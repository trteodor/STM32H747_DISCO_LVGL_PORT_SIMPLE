
STM32H747_Mastering_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001019c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006840  0801043c  0801043c  0002043c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016c7c  08016c7c  0003012c  2**0
                  CONTENTS
  4 .ARM          00000008  08016c7c  08016c7c  00026c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016c84  08016c84  0003012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016c84  08016c84  00026c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016c88  08016c88  00026c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  24000000  08016c8c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a98  2400012c  08016db8  0003012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001bc4  08016db8  00031bc4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f615  00000000  00000000  0003015a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005942  00000000  00000000  0005f76f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002110  00000000  00000000  000650b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ee8  00000000  00000000  000671c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000466ac  00000000  00000000  000690b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030cef  00000000  00000000  000af75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001ae8cd  00000000  00000000  000e044b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0028ed18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f28  00000000  00000000  0028ed68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010424 	.word	0x08010424

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	08010424 	.word	0x08010424

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007b6:	4b7f      	ldr	r3, [pc, #508]	; (80009b4 <main+0x204>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d11b      	bne.n	80007fa <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007c2:	f3bf 8f4f 	dsb	sy
}
 80007c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007c8:	f3bf 8f6f 	isb	sy
}
 80007cc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007ce:	4b79      	ldr	r3, [pc, #484]	; (80009b4 <main+0x204>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007d6:	f3bf 8f4f 	dsb	sy
}
 80007da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007dc:	f3bf 8f6f 	isb	sy
}
 80007e0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007e2:	4b74      	ldr	r3, [pc, #464]	; (80009b4 <main+0x204>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	4a73      	ldr	r2, [pc, #460]	; (80009b4 <main+0x204>)
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007ee:	f3bf 8f4f 	dsb	sy
}
 80007f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007f4:	f3bf 8f6f 	isb	sy
}
 80007f8:	e000      	b.n	80007fc <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007fa:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007fc:	4b6d      	ldr	r3, [pc, #436]	; (80009b4 <main+0x204>)
 80007fe:	695b      	ldr	r3, [r3, #20]
 8000800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000804:	2b00      	cmp	r3, #0
 8000806:	d138      	bne.n	800087a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000808:	4b6a      	ldr	r3, [pc, #424]	; (80009b4 <main+0x204>)
 800080a:	2200      	movs	r2, #0
 800080c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000810:	f3bf 8f4f 	dsb	sy
}
 8000814:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000816:	4b67      	ldr	r3, [pc, #412]	; (80009b4 <main+0x204>)
 8000818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800081c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	0b5b      	lsrs	r3, r3, #13
 8000822:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000826:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	08db      	lsrs	r3, r3, #3
 800082c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000830:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	015a      	lsls	r2, r3, #5
 8000836:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800083a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000840:	495c      	ldr	r1, [pc, #368]	; (80009b4 <main+0x204>)
 8000842:	4313      	orrs	r3, r2
 8000844:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1ef      	bne.n	8000832 <main+0x82>
    } while(sets-- != 0U);
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	1e5a      	subs	r2, r3, #1
 8000856:	60ba      	str	r2, [r7, #8]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1e5      	bne.n	8000828 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800085c:	f3bf 8f4f 	dsb	sy
}
 8000860:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000862:	4b54      	ldr	r3, [pc, #336]	; (80009b4 <main+0x204>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	4a53      	ldr	r2, [pc, #332]	; (80009b4 <main+0x204>)
 8000868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800086c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800086e:	f3bf 8f4f 	dsb	sy
}
 8000872:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000874:	f3bf 8f6f 	isb	sy
}
 8000878:	e000      	b.n	800087c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800087a:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800087c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000880:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000882:	bf00      	nop
 8000884:	4b4c      	ldr	r3, [pc, #304]	; (80009b8 <main+0x208>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800088c:	2b00      	cmp	r3, #0
 800088e:	d004      	beq.n	800089a <main+0xea>
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	1e5a      	subs	r2, r3, #1
 8000894:	617a      	str	r2, [r7, #20]
 8000896:	2b00      	cmp	r3, #0
 8000898:	dcf4      	bgt.n	8000884 <main+0xd4>
  if ( timeout < 0 )
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	2b00      	cmp	r3, #0
 800089e:	da01      	bge.n	80008a4 <main+0xf4>
  {
  Error_Handler();
 80008a0:	f000 fc2c 	bl	80010fc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a4:	f006 fc1a 	bl	80070dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a8:	f000 f88c 	bl	80009c4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008ac:	4b42      	ldr	r3, [pc, #264]	; (80009b8 <main+0x208>)
 80008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b2:	4a41      	ldr	r2, [pc, #260]	; (80009b8 <main+0x208>)
 80008b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008bc:	4b3e      	ldr	r3, [pc, #248]	; (80009b8 <main+0x208>)
 80008be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f008 f920 	bl	8008b10 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008d0:	2100      	movs	r1, #0
 80008d2:	2000      	movs	r0, #0
 80008d4:	f008 f936 	bl	8008b44 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80008d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008dc:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008de:	bf00      	nop
 80008e0:	4b35      	ldr	r3, [pc, #212]	; (80009b8 <main+0x208>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d104      	bne.n	80008f6 <main+0x146>
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	1e5a      	subs	r2, r3, #1
 80008f0:	617a      	str	r2, [r7, #20]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	dcf4      	bgt.n	80008e0 <main+0x130>
if ( timeout < 0 )
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	da01      	bge.n	8000900 <main+0x150>
{
Error_Handler();
 80008fc:	f000 fbfe 	bl	80010fc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000900:	f000 f926 	bl	8000b50 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000904:	f000 f8d8 	bl	8000ab8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Configure the Wakeup push-button in EXTI Mode */
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_EXTI);
 8000908:	2101      	movs	r1, #1
 800090a:	2000      	movs	r0, #0
 800090c:	f003 fcde 	bl	80042cc <BSP_PB_Init>
  BSP_LED_Init(LED1);
 8000910:	2000      	movs	r0, #0
 8000912:	f003 fc79 	bl	8004208 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000916:	2001      	movs	r0, #1
 8000918:	f003 fc76 	bl	8004208 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 800091c:	2002      	movs	r0, #2
 800091e:	f003 fc73 	bl	8004208 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8000922:	2003      	movs	r0, #3
 8000924:	f003 fc70 	bl	8004208 <BSP_LED_Init>

  /*##-1- Initialize the LCD #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8000928:	2101      	movs	r1, #1
 800092a:	2000      	movs	r0, #0
 800092c:	f004 f9a8 	bl	8004c80 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8000930:	4822      	ldr	r0, [pc, #136]	; (80009bc <main+0x20c>)
 8000932:	f00d fe77 	bl	800e624 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetFont(&UTIL_LCD_DEFAULT_FONT);
 8000936:	4822      	ldr	r0, [pc, #136]	; (80009c0 <main+0x210>)
 8000938:	f00d fef2 	bl	800e720 <UTIL_LCD_SetFont>
  Display_DemoDescription();
 800093c:	f000 f940 	bl	8000bc0 <Display_DemoDescription>
  HAL_Delay(2000);
 8000940:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000944:	f006 fc5c 	bl	8007200 <HAL_Delay>

  LCD_SetHint();
 8000948:	f000 f9ac 	bl	8000ca4 <LCD_SetHint>
  HAL_Delay(2000);
 800094c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000950:	f006 fc56 	bl	8007200 <HAL_Delay>

  for(uint32_t feature = 0; feature < 4; feature++)
 8000954:	2300      	movs	r3, #0
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	e00b      	b.n	8000972 <main+0x1c2>
  {
	  LCD_Show_Feature(feature);
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f000 fa0c 	bl	8000d7c <LCD_Show_Feature>
	  HAL_Delay(1000);
 8000964:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000968:	f006 fc4a 	bl	8007200 <HAL_Delay>
  for(uint32_t feature = 0; feature < 4; feature++)
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	3301      	adds	r3, #1
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	2b03      	cmp	r3, #3
 8000976:	d9f0      	bls.n	800095a <main+0x1aa>
  }

  SDRAM_demo();
 8000978:	f000 fdb6 	bl	80014e8 <SDRAM_demo>
  HAL_Delay(2000);
 800097c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000980:	f006 fc3e 	bl	8007200 <HAL_Delay>

  QSPI_demo();
 8000984:	f000 fbc0 	bl	8001108 <QSPI_demo>
  HAL_Delay(2000);
 8000988:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800098c:	f006 fc38 	bl	8007200 <HAL_Delay>

  Touchscreen_demo1();
 8000990:	f000 ff9e 	bl	80018d0 <Touchscreen_demo1>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_LED_Toggle(LED_GREEN);
 8000994:	2000      	movs	r0, #0
 8000996:	f003 fc7b 	bl	8004290 <BSP_LED_Toggle>
	  BSP_LED_Toggle(LED_ORANGE);
 800099a:	2001      	movs	r0, #1
 800099c:	f003 fc78 	bl	8004290 <BSP_LED_Toggle>
	  BSP_LED_Toggle(LED_RED);
 80009a0:	2002      	movs	r0, #2
 80009a2:	f003 fc75 	bl	8004290 <BSP_LED_Toggle>
	  BSP_LED_Toggle(LED_BLUE);
 80009a6:	2003      	movs	r0, #3
 80009a8:	f003 fc72 	bl	8004290 <BSP_LED_Toggle>
	  HAL_Delay(200);
 80009ac:	20c8      	movs	r0, #200	; 0xc8
 80009ae:	f006 fc27 	bl	8007200 <HAL_Delay>
	  BSP_LED_Toggle(LED_GREEN);
 80009b2:	e7ef      	b.n	8000994 <main+0x1e4>
 80009b4:	e000ed00 	.word	0xe000ed00
 80009b8:	58024400 	.word	0x58024400
 80009bc:	08013208 	.word	0x08013208
 80009c0:	240000a8 	.word	0x240000a8

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b09c      	sub	sp, #112	; 0x70
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	224c      	movs	r2, #76	; 0x4c
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f00f f8be 	bl	800fb54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2220      	movs	r2, #32
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f00f f8b8 	bl	800fb54 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009e4:	2004      	movs	r0, #4
 80009e6:	f009 fb11 	bl	800a00c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <SystemClock_Config+0xec>)
 80009f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f2:	4a2f      	ldr	r2, [pc, #188]	; (8000ab0 <SystemClock_Config+0xec>)
 80009f4:	f023 0301 	bic.w	r3, r3, #1
 80009f8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009fa:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <SystemClock_Config+0xec>)
 80009fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <SystemClock_Config+0xf0>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a2a      	ldr	r2, [pc, #168]	; (8000ab4 <SystemClock_Config+0xf0>)
 8000a0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <SystemClock_Config+0xf0>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a1c:	bf00      	nop
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <SystemClock_Config+0xf0>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a2a:	d1f8      	bne.n	8000a1e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a36:	2302      	movs	r3, #2
 8000a38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000a3e:	2305      	movs	r3, #5
 8000a40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000a42:	23a0      	movs	r3, #160	; 0xa0
 8000a44:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000a52:	2308      	movs	r3, #8
 8000a54:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	4618      	mov	r0, r3
 8000a64:	f009 ffdc 	bl	800aa20 <HAL_RCC_OscConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a6e:	f000 fb45 	bl	80010fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a72:	233f      	movs	r3, #63	; 0x3f
 8000a74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a76:	2303      	movs	r3, #3
 8000a78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a7e:	2308      	movs	r3, #8
 8000a80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a82:	2340      	movs	r3, #64	; 0x40
 8000a84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a86:	2340      	movs	r3, #64	; 0x40
 8000a88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a90:	2340      	movs	r3, #64	; 0x40
 8000a92:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2102      	movs	r1, #2
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00a fbef 	bl	800b27c <HAL_RCC_ClockConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000aa4:	f000 fb2a 	bl	80010fc <Error_Handler>
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	3770      	adds	r7, #112	; 0x70
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	58000400 	.word	0x58000400
 8000ab4:	58024800 	.word	0x58024800

08000ab8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000abe:	4a23      	ldr	r2, [pc, #140]	; (8000b4c <MX_USART1_UART_Init+0x94>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b00:	4811      	ldr	r0, [pc, #68]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000b02:	f00c fc13 	bl	800d32c <HAL_UART_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b0c:	f000 faf6 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b10:	2100      	movs	r1, #0
 8000b12:	480d      	ldr	r0, [pc, #52]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000b14:	f00d fbba 	bl	800e28c <HAL_UARTEx_SetTxFifoThreshold>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b1e:	f000 faed 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b22:	2100      	movs	r1, #0
 8000b24:	4808      	ldr	r0, [pc, #32]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000b26:	f00d fbef 	bl	800e308 <HAL_UARTEx_SetRxFifoThreshold>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b30:	f000 fae4 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000b36:	f00d fb70 	bl	800e21a <HAL_UARTEx_DisableFifoMode>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b40:	f000 fadc 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	24000148 	.word	0x24000148
 8000b4c:	40011000 	.word	0x40011000

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <MX_GPIO_Init+0x6c>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	4a17      	ldr	r2, [pc, #92]	; (8000bbc <MX_GPIO_Init+0x6c>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <MX_GPIO_Init+0x6c>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_GPIO_Init+0x6c>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7a:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <MX_GPIO_Init+0x6c>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <MX_GPIO_Init+0x6c>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <MX_GPIO_Init+0x6c>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b98:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <MX_GPIO_Init+0x6c>)
 8000b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_GPIO_Init+0x6c>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]

}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	58024400 	.word	0x58024400

08000bc0 <Display_DemoDescription>:
  * @brief  Display main demo messages
  * @param  None
  * @retval None
  */
static void Display_DemoDescription(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b094      	sub	sp, #80	; 0x50
 8000bc4:	af02      	add	r7, sp, #8
  char desc[64];
  uint32_t x_size;
  uint32_t y_size;

  BSP_LCD_GetXSize(0, &x_size);
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f004 fb70 	bl	80052b0 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f004 fb93 	bl	8005300 <BSP_LCD_GetYSize>
  /* Set LCD Foreground Layer  */
  UTIL_LCD_SetFont(&UTIL_LCD_DEFAULT_FONT);
 8000bda:	4829      	ldr	r0, [pc, #164]	; (8000c80 <Display_DemoDescription+0xc0>)
 8000bdc:	f00d fda0 	bl	800e720 <UTIL_LCD_SetFont>

  /* Clear the LCD */
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	f00d fd88 	bl	800e6f8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	f00d fe78 	bl	800e8e0 <UTIL_LCD_Clear>

  /* Set the LCD Text Color */
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_DARKBLUE);
 8000bf0:	4824      	ldr	r0, [pc, #144]	; (8000c84 <Display_DemoDescription+0xc4>)
 8000bf2:	f00d fd6d 	bl	800e6d0 <UTIL_LCD_SetTextColor>

  /* Display LCD messages */
  UTIL_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32H747I BSP", CENTER_MODE);
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <Display_DemoDescription+0xc8>)
 8000bfa:	210a      	movs	r1, #10
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f00d febb 	bl	800e978 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 35, (uint8_t *)"Drivers examples", CENTER_MODE);
 8000c02:	2301      	movs	r3, #1
 8000c04:	4a21      	ldr	r2, [pc, #132]	; (8000c8c <Display_DemoDescription+0xcc>)
 8000c06:	2123      	movs	r1, #35	; 0x23
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f00d feb5 	bl	800e978 <UTIL_LCD_DisplayStringAt>

  /* Draw Bitmap */
//  UTIL_LCD_DrawBitmap((x_size - 80)/2, 65, (uint8_t *)stlogo);

  UTIL_LCD_SetFont(&Font12);
 8000c0e:	4820      	ldr	r0, [pc, #128]	; (8000c90 <Display_DemoDescription+0xd0>)
 8000c10:	f00d fd86 	bl	800e720 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, y_size - 20, (uint8_t *)"Copyright (c) STMicroelectronics 2018", CENTER_MODE);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	f1a3 0114 	sub.w	r1, r3, #20
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	4a1d      	ldr	r2, [pc, #116]	; (8000c94 <Display_DemoDescription+0xd4>)
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f00d feaa 	bl	800e978 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_SetFont(&Font16);
 8000c24:	481c      	ldr	r0, [pc, #112]	; (8000c98 <Display_DemoDescription+0xd8>)
 8000c26:	f00d fd7b 	bl	800e720 <UTIL_LCD_SetFont>
  BSP_LCD_FillRect(0, 0, y_size/2 + 15, x_size, 60, UTIL_LCD_COLOR_BLUE);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	085b      	lsrs	r3, r3, #1
 8000c2e:	f103 020f 	add.w	r2, r3, #15
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4919      	ldr	r1, [pc, #100]	; (8000c9c <Display_DemoDescription+0xdc>)
 8000c36:	9101      	str	r1, [sp, #4]
 8000c38:	213c      	movs	r1, #60	; 0x3c
 8000c3a:	9100      	str	r1, [sp, #0]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f004 fd8e 	bl	8005760 <BSP_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f00d fd42 	bl	800e6d0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8000c4c:	4813      	ldr	r0, [pc, #76]	; (8000c9c <Display_DemoDescription+0xdc>)
 8000c4e:	f00d fd53 	bl	800e6f8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_DisplayStringAt(0, y_size / 2 + 30, (uint8_t *)"Press Wakeup button to start :", CENTER_MODE);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	085b      	lsrs	r3, r3, #1
 8000c56:	f103 011e 	add.w	r1, r3, #30
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <Display_DemoDescription+0xe0>)
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f00d fe8a 	bl	800e978 <UTIL_LCD_DisplayStringAt>
//  sprintf(desc,"%s example", BSP_examples[DemoIndex].DemoName);
  UTIL_LCD_DisplayStringAt(0, y_size/2 + 45, (uint8_t *)desc, CENTER_MODE);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	085b      	lsrs	r3, r3, #1
 8000c68:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 8000c6c:	f107 0208 	add.w	r2, r7, #8
 8000c70:	2301      	movs	r3, #1
 8000c72:	2000      	movs	r0, #0
 8000c74:	f00d fe80 	bl	800e978 <UTIL_LCD_DisplayStringAt>
}
 8000c78:	bf00      	nop
 8000c7a:	3748      	adds	r7, #72	; 0x48
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	240000a8 	.word	0x240000a8
 8000c84:	ff000080 	.word	0xff000080
 8000c88:	0801043c 	.word	0x0801043c
 8000c8c:	0801044c 	.word	0x0801044c
 8000c90:	240000c0 	.word	0x240000c0
 8000c94:	08010460 	.word	0x08010460
 8000c98:	240000b8 	.word	0x240000b8
 8000c9c:	ff0000ff 	.word	0xff0000ff
 8000ca0:	08010488 	.word	0x08010488

08000ca4 <LCD_SetHint>:
  * @brief  Display LCD demo hint
  * @param  None
  * @retval None
  */
static void LCD_SetHint(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af02      	add	r7, sp, #8
  uint32_t x_size;
  uint32_t y_size;
  BSP_LCD_GetXSize(0, &x_size);
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	4619      	mov	r1, r3
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f004 fafe 	bl	80052b0 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f004 fb21 	bl	8005300 <BSP_LCD_GetYSize>
  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8000cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc2:	f00d fe0d 	bl	800e8e0 <UTIL_LCD_Clear>

  /*  Set the LCD Text Color */
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_DARKBLUE);
 8000cc6:	4825      	ldr	r0, [pc, #148]	; (8000d5c <LCD_SetHint+0xb8>)
 8000cc8:	f00d fd02 	bl	800e6d0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_FillRect(0, 0, x_size, 80, UTIL_LCD_COLOR_BLUE);
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <LCD_SetHint+0xbc>)
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2350      	movs	r3, #80	; 0x50
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f00e fa28 	bl	800f12c <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f00d fcf6 	bl	800e6d0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8000ce4:	481e      	ldr	r0, [pc, #120]	; (8000d60 <LCD_SetHint+0xbc>)
 8000ce6:	f00d fd07 	bl	800e6f8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font24);
 8000cea:	481e      	ldr	r0, [pc, #120]	; (8000d64 <LCD_SetHint+0xc0>)
 8000cec:	f00d fd18 	bl	800e720 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"LCD", CENTER_MODE);
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	4a1d      	ldr	r2, [pc, #116]	; (8000d68 <LCD_SetHint+0xc4>)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f00d fe3e 	bl	800e978 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font12);
 8000cfc:	481b      	ldr	r0, [pc, #108]	; (8000d6c <LCD_SetHint+0xc8>)
 8000cfe:	f00d fd0f 	bl	800e720 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows the different", CENTER_MODE);
 8000d02:	2301      	movs	r3, #1
 8000d04:	4a1a      	ldr	r2, [pc, #104]	; (8000d70 <LCD_SetHint+0xcc>)
 8000d06:	211e      	movs	r1, #30
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f00d fe35 	bl	800e978 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"LCD Features, use Tamper push-button to display", CENTER_MODE);
 8000d0e:	2301      	movs	r3, #1
 8000d10:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <LCD_SetHint+0xd0>)
 8000d12:	212d      	movs	r1, #45	; 0x2d
 8000d14:	2000      	movs	r0, #0
 8000d16:	f00d fe2f 	bl	800e978 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 60, (uint8_t *)"next page", CENTER_MODE);
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	4a16      	ldr	r2, [pc, #88]	; (8000d78 <LCD_SetHint+0xd4>)
 8000d1e:	213c      	movs	r1, #60	; 0x3c
 8000d20:	2000      	movs	r0, #0
 8000d22:	f00d fe29 	bl	800e978 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DrawRect(10, 90, x_size - 20, y_size- 100, UTIL_LCD_COLOR_BLUE);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f1a3 0214 	sub.w	r2, r3, #20
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	3b64      	subs	r3, #100	; 0x64
 8000d30:	490b      	ldr	r1, [pc, #44]	; (8000d60 <LCD_SetHint+0xbc>)
 8000d32:	9100      	str	r1, [sp, #0]
 8000d34:	215a      	movs	r1, #90	; 0x5a
 8000d36:	200a      	movs	r0, #10
 8000d38:	f00d ff88 	bl	800ec4c <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(11, 91, x_size - 22, y_size- 102, UTIL_LCD_COLOR_BLUE);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f1a3 0216 	sub.w	r2, r3, #22
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	3b66      	subs	r3, #102	; 0x66
 8000d46:	4906      	ldr	r1, [pc, #24]	; (8000d60 <LCD_SetHint+0xbc>)
 8000d48:	9100      	str	r1, [sp, #0]
 8000d4a:	215b      	movs	r1, #91	; 0x5b
 8000d4c:	200b      	movs	r0, #11
 8000d4e:	f00d ff7d 	bl	800ec4c <UTIL_LCD_DrawRect>
 }
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	ff000080 	.word	0xff000080
 8000d60:	ff0000ff 	.word	0xff0000ff
 8000d64:	240000a8 	.word	0x240000a8
 8000d68:	080104a8 	.word	0x080104a8
 8000d6c:	240000c0 	.word	0x240000c0
 8000d70:	080104ac 	.word	0x080104ac
 8000d74:	080104d0 	.word	0x080104d0
 8000d78:	08010500 	.word	0x08010500

08000d7c <LCD_Show_Feature>:
  * @brief  Show LCD Features
  * @param  feature : feature index
  * @retval None
  */
static void LCD_Show_Feature(uint8_t feature)
{
 8000d7c:	b5b0      	push	{r4, r5, r7, lr}
 8000d7e:	b0a0      	sub	sp, #128	; 0x80
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  Point Points[]= {{220, 220}, {280, 180}, {320, 180}, {370, 220}, {370, 260}, {320, 310}, {280, 310}, {220, 260}};
 8000d86:	4bce      	ldr	r3, [pc, #824]	; (80010c0 <LCD_Show_Feature+0x344>)
 8000d88:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000d8c:	461d      	mov	r5, r3
 8000d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d92:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Point Points2[3];
  uint32_t x_size, y_size;
  int32_t i = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	677b      	str	r3, [r7, #116]	; 0x74
  uint8_t text[50];
  BSP_LCD_GetXSize(0, &x_size);
 8000d9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000da2:	4619      	mov	r1, r3
 8000da4:	2000      	movs	r0, #0
 8000da6:	f004 fa83 	bl	80052b0 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 8000daa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dae:	4619      	mov	r1, r3
 8000db0:	2000      	movs	r0, #0
 8000db2:	f004 faa5 	bl	8005300 <BSP_LCD_GetYSize>

  Points2[0].X = x_size - 80;
 8000db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	3b50      	subs	r3, #80	; 0x50
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  Points2[0].Y = 150;
 8000dc4:	2396      	movs	r3, #150	; 0x96
 8000dc6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  Points2[1].X = x_size - 20;
 8000dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	3b14      	subs	r3, #20
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	b21b      	sxth	r3, r3
 8000dd4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  Points2[1].Y = 150;
 8000dd8:	2396      	movs	r3, #150	; 0x96
 8000dda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  Points2[2].X = x_size - 20;
 8000dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	3b14      	subs	r3, #20
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  Points2[2].Y = 200;
 8000dec:	23c8      	movs	r3, #200	; 0xc8
 8000dee:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8000df2:	f04f 30ff 	mov.w	r0, #4294967295
 8000df6:	f00d fc7f 	bl	800e6f8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8000dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfe:	f00d fc67 	bl	800e6d0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_FillRect(12, 92, x_size - 24, y_size- 104, UTIL_LCD_COLOR_WHITE);
 8000e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e04:	f1a3 0218 	sub.w	r2, r3, #24
 8000e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e0a:	3b68      	subs	r3, #104	; 0x68
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e10:	9100      	str	r1, [sp, #0]
 8000e12:	215c      	movs	r1, #92	; 0x5c
 8000e14:	200c      	movs	r0, #12
 8000e16:	f00e f989 	bl	800f12c <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8000e1a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e1e:	f00d fc57 	bl	800e6d0 <UTIL_LCD_SetTextColor>

  switch (feature)
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	f200 8147 	bhi.w	80010b8 <LCD_Show_Feature+0x33c>
 8000e2a:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <LCD_Show_Feature+0xb4>)
 8000e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e30:	08000e41 	.word	0x08000e41
 8000e34:	08000ea7 	.word	0x08000ea7
 8000e38:	08000f87 	.word	0x08000f87
 8000e3c:	08001015 	.word	0x08001015
  {
  case 0:
    /* Text Feature */

    UTIL_LCD_DisplayStringAt(14, 100, (uint8_t *)"Left aligned Text", LEFT_MODE);
 8000e40:	2303      	movs	r3, #3
 8000e42:	4aa0      	ldr	r2, [pc, #640]	; (80010c4 <LCD_Show_Feature+0x348>)
 8000e44:	2164      	movs	r1, #100	; 0x64
 8000e46:	200e      	movs	r0, #14
 8000e48:	f00d fd96 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, 115, (uint8_t *)"Center aligned Text", CENTER_MODE);
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	4a9e      	ldr	r2, [pc, #632]	; (80010c8 <LCD_Show_Feature+0x34c>)
 8000e50:	2173      	movs	r1, #115	; 0x73
 8000e52:	2000      	movs	r0, #0
 8000e54:	f00d fd90 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(14, 130, (uint8_t*)"Right aligned Text", RIGHT_MODE);
 8000e58:	2302      	movs	r3, #2
 8000e5a:	4a9c      	ldr	r2, [pc, #624]	; (80010cc <LCD_Show_Feature+0x350>)
 8000e5c:	2182      	movs	r1, #130	; 0x82
 8000e5e:	200e      	movs	r0, #14
 8000e60:	f00d fd8a 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_SetFont(&Font24);
 8000e64:	489a      	ldr	r0, [pc, #616]	; (80010d0 <LCD_Show_Feature+0x354>)
 8000e66:	f00d fc5b 	bl	800e720 <UTIL_LCD_SetFont>
    UTIL_LCD_DisplayStringAt(14, 180, (uint8_t *)"Font24", LEFT_MODE);
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	4a99      	ldr	r2, [pc, #612]	; (80010d4 <LCD_Show_Feature+0x358>)
 8000e6e:	21b4      	movs	r1, #180	; 0xb4
 8000e70:	200e      	movs	r0, #14
 8000e72:	f00d fd81 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_SetFont(&Font20);
 8000e76:	4898      	ldr	r0, [pc, #608]	; (80010d8 <LCD_Show_Feature+0x35c>)
 8000e78:	f00d fc52 	bl	800e720 <UTIL_LCD_SetFont>
    UTIL_LCD_DisplayStringAt(x_size/2 -20, 180, (uint8_t *)"Font20", LEFT_MODE);
 8000e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e7e:	085b      	lsrs	r3, r3, #1
 8000e80:	f1a3 0014 	sub.w	r0, r3, #20
 8000e84:	2303      	movs	r3, #3
 8000e86:	4a95      	ldr	r2, [pc, #596]	; (80010dc <LCD_Show_Feature+0x360>)
 8000e88:	21b4      	movs	r1, #180	; 0xb4
 8000e8a:	f00d fd75 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_SetFont(&Font16);
 8000e8e:	4894      	ldr	r0, [pc, #592]	; (80010e0 <LCD_Show_Feature+0x364>)
 8000e90:	f00d fc46 	bl	800e720 <UTIL_LCD_SetFont>
    UTIL_LCD_DisplayStringAt(x_size - 80, 184, (uint8_t *)"Font16", LEFT_MODE);
 8000e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e96:	f1a3 0050 	sub.w	r0, r3, #80	; 0x50
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	4a91      	ldr	r2, [pc, #580]	; (80010e4 <LCD_Show_Feature+0x368>)
 8000e9e:	21b8      	movs	r1, #184	; 0xb8
 8000ea0:	f00d fd6a 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    break;
 8000ea4:	e108      	b.n	80010b8 <LCD_Show_Feature+0x33c>

  case 1:


    /* Draw misc. Shapes */
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8000ea6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000eaa:	f00d fc11 	bl	800e6d0 <UTIL_LCD_SetTextColor>
    UTIL_LCD_DrawRect(20, 100, 60 , 40, UTIL_LCD_COLOR_BLACK);
 8000eae:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	2328      	movs	r3, #40	; 0x28
 8000eb6:	223c      	movs	r2, #60	; 0x3c
 8000eb8:	2164      	movs	r1, #100	; 0x64
 8000eba:	2014      	movs	r0, #20
 8000ebc:	f00d fec6 	bl	800ec4c <UTIL_LCD_DrawRect>
    UTIL_LCD_FillRect(100, 100, 60 , 40, UTIL_LCD_COLOR_BLACK);
 8000ec0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2328      	movs	r3, #40	; 0x28
 8000ec8:	223c      	movs	r2, #60	; 0x3c
 8000eca:	2164      	movs	r1, #100	; 0x64
 8000ecc:	2064      	movs	r0, #100	; 0x64
 8000ece:	f00e f92d 	bl	800f12c <UTIL_LCD_FillRect>

    UTIL_LCD_DrawCircle(x_size - 120, 120, 20, UTIL_LCD_COLOR_GRAY);
 8000ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ed4:	f1a3 0078 	sub.w	r0, r3, #120	; 0x78
 8000ed8:	4b83      	ldr	r3, [pc, #524]	; (80010e8 <LCD_Show_Feature+0x36c>)
 8000eda:	2214      	movs	r2, #20
 8000edc:	2178      	movs	r1, #120	; 0x78
 8000ede:	f00d fedf 	bl	800eca0 <UTIL_LCD_DrawCircle>
    UTIL_LCD_FillCircle(x_size - 40, 120, 20, UTIL_LCD_COLOR_GRAY);
 8000ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ee4:	f1a3 0028 	sub.w	r0, r3, #40	; 0x28
 8000ee8:	4b7f      	ldr	r3, [pc, #508]	; (80010e8 <LCD_Show_Feature+0x36c>)
 8000eea:	2214      	movs	r2, #20
 8000eec:	2178      	movs	r1, #120	; 0x78
 8000eee:	f00e f957 	bl	800f1a0 <UTIL_LCD_FillCircle>

    UTIL_LCD_FillPolygon(Points, 8, UTIL_LCD_COLOR_GREEN);
 8000ef2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ef6:	f04f 22ff 	mov.w	r2, #4278255360	; 0xff00ff00
 8000efa:	2108      	movs	r1, #8
 8000efc:	4618      	mov	r0, r3
 8000efe:	f00e f9fb 	bl	800f2f8 <UTIL_LCD_FillPolygon>

    UTIL_LCD_DrawEllipse(130, 170, 30, 20, UTIL_LCD_COLOR_RED);
 8000f02:	4b7a      	ldr	r3, [pc, #488]	; (80010ec <LCD_Show_Feature+0x370>)
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2314      	movs	r3, #20
 8000f08:	221e      	movs	r2, #30
 8000f0a:	21aa      	movs	r1, #170	; 0xaa
 8000f0c:	2082      	movs	r0, #130	; 0x82
 8000f0e:	f00e f826 	bl	800ef5e <UTIL_LCD_DrawEllipse>
    UTIL_LCD_FillEllipse(200, 170, 30, 20, UTIL_LCD_COLOR_RED);
 8000f12:	4b76      	ldr	r3, [pc, #472]	; (80010ec <LCD_Show_Feature+0x370>)
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2314      	movs	r3, #20
 8000f18:	221e      	movs	r2, #30
 8000f1a:	21aa      	movs	r1, #170	; 0xaa
 8000f1c:	20c8      	movs	r0, #200	; 0xc8
 8000f1e:	f00e fb11 	bl	800f544 <UTIL_LCD_FillEllipse>

    UTIL_LCD_DrawHLine(20, y_size - 30, x_size / 5, UTIL_LCD_COLOR_BLACK);
 8000f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f24:	f1a3 011e 	sub.w	r1, r3, #30
 8000f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f2a:	4a71      	ldr	r2, [pc, #452]	; (80010f0 <LCD_Show_Feature+0x374>)
 8000f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f30:	089a      	lsrs	r2, r3, #2
 8000f32:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000f36:	2014      	movs	r0, #20
 8000f38:	f00d fc32 	bl	800e7a0 <UTIL_LCD_DrawHLine>
    UTIL_LCD_DrawLine (100, y_size - 20, 230, y_size- 50, UTIL_LCD_COLOR_BLACK);
 8000f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f3e:	f1a3 0114 	sub.w	r1, r3, #20
 8000f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f44:	3b32      	subs	r3, #50	; 0x32
 8000f46:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000f4a:	9200      	str	r2, [sp, #0]
 8000f4c:	22e6      	movs	r2, #230	; 0xe6
 8000f4e:	2064      	movs	r0, #100	; 0x64
 8000f50:	f00d fdc0 	bl	800ead4 <UTIL_LCD_DrawLine>
    UTIL_LCD_DrawLine (100, y_size- 50, 230, y_size- 20, UTIL_LCD_COLOR_BLACK);
 8000f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f56:	f1a3 0132 	sub.w	r1, r3, #50	; 0x32
 8000f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f5c:	3b14      	subs	r3, #20
 8000f5e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000f62:	9200      	str	r2, [sp, #0]
 8000f64:	22e6      	movs	r2, #230	; 0xe6
 8000f66:	2064      	movs	r0, #100	; 0x64
 8000f68:	f00d fdb4 	bl	800ead4 <UTIL_LCD_DrawLine>

    UTIL_LCD_DrawPolygon(Points2, 3, UTIL_LCD_COLOR_GREEN);
 8000f6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f70:	f04f 22ff 	mov.w	r2, #4278255360	; 0xff00ff00
 8000f74:	2103      	movs	r1, #3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f00d ff9c 	bl	800eeb4 <UTIL_LCD_DrawPolygon>
    HAL_Delay(2000);
 8000f7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f80:	f006 f93e 	bl	8007200 <HAL_Delay>
    break;
 8000f84:	e098      	b.n	80010b8 <LCD_Show_Feature+0x33c>

  case 2:
    /* Draw Bitmap */
    /* Draw Bitmap */
    UTIL_LCD_DrawBitmap(20, 100, (uint8_t *)stlogo);
 8000f86:	4a5b      	ldr	r2, [pc, #364]	; (80010f4 <LCD_Show_Feature+0x378>)
 8000f88:	2164      	movs	r1, #100	; 0x64
 8000f8a:	2014      	movs	r0, #20
 8000f8c:	f00e f8b8 	bl	800f100 <UTIL_LCD_DrawBitmap>
    HAL_Delay(500);
 8000f90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f94:	f006 f934 	bl	8007200 <HAL_Delay>

    UTIL_LCD_DrawBitmap(x_size/2 - 40, 100, (uint8_t *)stlogo);
 8000f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f9a:	085b      	lsrs	r3, r3, #1
 8000f9c:	3b28      	subs	r3, #40	; 0x28
 8000f9e:	4a55      	ldr	r2, [pc, #340]	; (80010f4 <LCD_Show_Feature+0x378>)
 8000fa0:	2164      	movs	r1, #100	; 0x64
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f00e f8ac 	bl	800f100 <UTIL_LCD_DrawBitmap>
    HAL_Delay(500);
 8000fa8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fac:	f006 f928 	bl	8007200 <HAL_Delay>

    UTIL_LCD_DrawBitmap(x_size-100, 100, (uint8_t *)stlogo);
 8000fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fb2:	3b64      	subs	r3, #100	; 0x64
 8000fb4:	4a4f      	ldr	r2, [pc, #316]	; (80010f4 <LCD_Show_Feature+0x378>)
 8000fb6:	2164      	movs	r1, #100	; 0x64
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f00e f8a1 	bl	800f100 <UTIL_LCD_DrawBitmap>
    HAL_Delay(500);
 8000fbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc2:	f006 f91d 	bl	8007200 <HAL_Delay>

    UTIL_LCD_DrawBitmap(20, y_size- 80, (uint8_t *)stlogo);
 8000fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fc8:	3b50      	subs	r3, #80	; 0x50
 8000fca:	4a4a      	ldr	r2, [pc, #296]	; (80010f4 <LCD_Show_Feature+0x378>)
 8000fcc:	4619      	mov	r1, r3
 8000fce:	2014      	movs	r0, #20
 8000fd0:	f00e f896 	bl	800f100 <UTIL_LCD_DrawBitmap>
    HAL_Delay(500);
 8000fd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fd8:	f006 f912 	bl	8007200 <HAL_Delay>

    UTIL_LCD_DrawBitmap(x_size/2 - 40, y_size- 80, (uint8_t *)stlogo);
 8000fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fde:	085b      	lsrs	r3, r3, #1
 8000fe0:	f1a3 0028 	sub.w	r0, r3, #40	; 0x28
 8000fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fe6:	3b50      	subs	r3, #80	; 0x50
 8000fe8:	4a42      	ldr	r2, [pc, #264]	; (80010f4 <LCD_Show_Feature+0x378>)
 8000fea:	4619      	mov	r1, r3
 8000fec:	f00e f888 	bl	800f100 <UTIL_LCD_DrawBitmap>
    HAL_Delay(500);
 8000ff0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ff4:	f006 f904 	bl	8007200 <HAL_Delay>

    UTIL_LCD_DrawBitmap(x_size-100, y_size- 80, (uint8_t *)stlogo);
 8000ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ffa:	f1a3 0064 	sub.w	r0, r3, #100	; 0x64
 8000ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001000:	3b50      	subs	r3, #80	; 0x50
 8001002:	4a3c      	ldr	r2, [pc, #240]	; (80010f4 <LCD_Show_Feature+0x378>)
 8001004:	4619      	mov	r1, r3
 8001006:	f00e f87b 	bl	800f100 <UTIL_LCD_DrawBitmap>
    HAL_Delay(500);
 800100a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800100e:	f006 f8f7 	bl	8007200 <HAL_Delay>
    break;
 8001012:	e051      	b.n	80010b8 <LCD_Show_Feature+0x33c>

  case 3:
    UTIL_LCD_SetFont(&Font24);
 8001014:	482e      	ldr	r0, [pc, #184]	; (80010d0 <LCD_Show_Feature+0x354>)
 8001016:	f00d fb83 	bl	800e720 <UTIL_LCD_SetFont>
    /* Set the LCD Back Color and Text Color*/
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 800101a:	f04f 30ff 	mov.w	r0, #4294967295
 800101e:	f00d fb6b 	bl	800e6f8 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
 8001022:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001026:	f00d fb53 	bl	800e6d0 <UTIL_LCD_SetTextColor>

    /*  Set the brightness */
    for( i = 100; i >= 0; i-=10)
 800102a:	2364      	movs	r3, #100	; 0x64
 800102c:	677b      	str	r3, [r7, #116]	; 0x74
 800102e:	e01c      	b.n	800106a <LCD_Show_Feature+0x2ee>
    {
      sprintf((char*)text," Brightness  =  %d ",(int)i);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001036:	4930      	ldr	r1, [pc, #192]	; (80010f8 <LCD_Show_Feature+0x37c>)
 8001038:	4618      	mov	r0, r3
 800103a:	f00e fd93 	bl	800fb64 <siprintf>
      UTIL_LCD_DisplayStringAt(0, x_size/2 + 45, (uint8_t *)text, CENTER_MODE);
 800103e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 8001046:	f107 020c 	add.w	r2, r7, #12
 800104a:	2301      	movs	r3, #1
 800104c:	2000      	movs	r0, #0
 800104e:	f00d fc93 	bl	800e978 <UTIL_LCD_DisplayStringAt>
      BSP_LCD_SetBrightness(0,i);
 8001052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001054:	4619      	mov	r1, r3
 8001056:	2000      	movs	r0, #0
 8001058:	f004 f97c 	bl	8005354 <BSP_LCD_SetBrightness>
      HAL_Delay(300);
 800105c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001060:	f006 f8ce 	bl	8007200 <HAL_Delay>
    for( i = 100; i >= 0; i-=10)
 8001064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001066:	3b0a      	subs	r3, #10
 8001068:	677b      	str	r3, [r7, #116]	; 0x74
 800106a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800106c:	2b00      	cmp	r3, #0
 800106e:	dadf      	bge.n	8001030 <LCD_Show_Feature+0x2b4>
    }

    for( i = 0; i <= 100; i+=10)
 8001070:	2300      	movs	r3, #0
 8001072:	677b      	str	r3, [r7, #116]	; 0x74
 8001074:	e01c      	b.n	80010b0 <LCD_Show_Feature+0x334>
    {
      sprintf((char*)text," Brightness  =  %d ",(int)i);
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800107c:	491e      	ldr	r1, [pc, #120]	; (80010f8 <LCD_Show_Feature+0x37c>)
 800107e:	4618      	mov	r0, r3
 8001080:	f00e fd70 	bl	800fb64 <siprintf>
      UTIL_LCD_DisplayStringAt(0, x_size/2 + 45, (uint8_t *)text, CENTER_MODE);
 8001084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001086:	085b      	lsrs	r3, r3, #1
 8001088:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 800108c:	f107 020c 	add.w	r2, r7, #12
 8001090:	2301      	movs	r3, #1
 8001092:	2000      	movs	r0, #0
 8001094:	f00d fc70 	bl	800e978 <UTIL_LCD_DisplayStringAt>
      BSP_LCD_SetBrightness(0,i);
 8001098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800109a:	4619      	mov	r1, r3
 800109c:	2000      	movs	r0, #0
 800109e:	f004 f959 	bl	8005354 <BSP_LCD_SetBrightness>
      HAL_Delay(300);
 80010a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010a6:	f006 f8ab 	bl	8007200 <HAL_Delay>
    for( i = 0; i <= 100; i+=10)
 80010aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010ac:	330a      	adds	r3, #10
 80010ae:	677b      	str	r3, [r7, #116]	; 0x74
 80010b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010b2:	2b64      	cmp	r3, #100	; 0x64
 80010b4:	dddf      	ble.n	8001076 <LCD_Show_Feature+0x2fa>
    }
    break;
 80010b6:	bf00      	nop
  }
}
 80010b8:	bf00      	nop
 80010ba:	3778      	adds	r7, #120	; 0x78
 80010bc:	46bd      	mov	sp, r7
 80010be:	bdb0      	pop	{r4, r5, r7, pc}
 80010c0:	08010574 	.word	0x08010574
 80010c4:	0801050c 	.word	0x0801050c
 80010c8:	08010520 	.word	0x08010520
 80010cc:	08010534 	.word	0x08010534
 80010d0:	240000a8 	.word	0x240000a8
 80010d4:	08010548 	.word	0x08010548
 80010d8:	240000b0 	.word	0x240000b0
 80010dc:	08010550 	.word	0x08010550
 80010e0:	240000b8 	.word	0x240000b8
 80010e4:	08010558 	.word	0x08010558
 80010e8:	ff808080 	.word	0xff808080
 80010ec:	ffff0000 	.word	0xffff0000
 80010f0:	cccccccd 	.word	0xcccccccd
 80010f4:	08010c2c 	.word	0x08010c2c
 80010f8:	08010560 	.word	0x08010560

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	e7fe      	b.n	8001104 <Error_Handler+0x8>
	...

08001108 <QSPI_demo>:
  * @brief  QSPI Demo
  * @param  None
  * @retval None
  */
void QSPI_demo (void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
  /* QSPI info structure */
  BSP_QSPI_Info_t pQSPI_Info;
  uint8_t status;

  QSPI_SetHint();
 800110e:	f000 f939 	bl	8001384 <QSPI_SetHint>

  /*##-1- Configure the QSPI device ##########################################*/
  /* QSPI device configuration */
  BSP_QSPI_Init_t init ;
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8001112:	2303      	movs	r3, #3
 8001114:	713b      	strb	r3, [r7, #4]
  init.TransferRate= MT25TL01G_DTR_TRANSFER ;
 8001116:	2301      	movs	r3, #1
 8001118:	717b      	strb	r3, [r7, #5]
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 800111a:	2340      	movs	r3, #64	; 0x40
 800111c:	71bb      	strb	r3, [r7, #6]
  status = BSP_QSPI_Init(0,&init);
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	2000      	movs	r0, #0
 8001124:	f004 fe54 	bl	8005dd0 <BSP_QSPI_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	77fb      	strb	r3, [r7, #31]

  if (status != BSP_ERROR_NONE)
 800112c:	7ffb      	ldrb	r3, [r7, #31]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d024      	beq.n	800117c <QSPI_demo+0x74>
  {
    UTIL_LCD_DisplayStringAt(20, 100, (uint8_t*)"QSPI Initialization : FAILED.", LEFT_MODE);
 8001132:	2303      	movs	r3, #3
 8001134:	4a7d      	ldr	r2, [pc, #500]	; (800132c <QSPI_demo+0x224>)
 8001136:	2164      	movs	r1, #100	; 0x64
 8001138:	2014      	movs	r0, #20
 800113a:	f00d fc1d 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 800113e:	2303      	movs	r3, #3
 8001140:	4a7b      	ldr	r2, [pc, #492]	; (8001330 <QSPI_demo+0x228>)
 8001142:	2173      	movs	r1, #115	; 0x73
 8001144:	2014      	movs	r0, #20
 8001146:	f00d fc17 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 145, (uint8_t*)"Check the hardware configuration :", LEFT_MODE);
 800114a:	2303      	movs	r3, #3
 800114c:	4a79      	ldr	r2, [pc, #484]	; (8001334 <QSPI_demo+0x22c>)
 800114e:	2191      	movs	r1, #145	; 0x91
 8001150:	2014      	movs	r0, #20
 8001152:	f00d fc11 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 160, (uint8_t*)"  refer to the UM of the board", LEFT_MODE);
 8001156:	2303      	movs	r3, #3
 8001158:	4a77      	ldr	r2, [pc, #476]	; (8001338 <QSPI_demo+0x230>)
 800115a:	21a0      	movs	r1, #160	; 0xa0
 800115c:	2014      	movs	r0, #20
 800115e:	f00d fc0b 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 175, (uint8_t*)"  for the hardware modifications", LEFT_MODE);
 8001162:	2303      	movs	r3, #3
 8001164:	4a75      	ldr	r2, [pc, #468]	; (800133c <QSPI_demo+0x234>)
 8001166:	21af      	movs	r1, #175	; 0xaf
 8001168:	2014      	movs	r0, #20
 800116a:	f00d fc05 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 190, (uint8_t*)"  to connect the QSPI memory", LEFT_MODE);
 800116e:	2303      	movs	r3, #3
 8001170:	4a73      	ldr	r2, [pc, #460]	; (8001340 <QSPI_demo+0x238>)
 8001172:	21be      	movs	r1, #190	; 0xbe
 8001174:	2014      	movs	r0, #20
 8001176:	f00d fbff 	bl	800e978 <UTIL_LCD_DisplayStringAt>
//    if(CheckForUserInput() > 0)
//    {
//      return;
//    }
//  }
}
 800117a:	e0d3      	b.n	8001324 <QSPI_demo+0x21c>
    UTIL_LCD_DisplayStringAt(20, 100, (uint8_t*)"QSPI Initialization : OK.", LEFT_MODE);
 800117c:	2303      	movs	r3, #3
 800117e:	4a71      	ldr	r2, [pc, #452]	; (8001344 <QSPI_demo+0x23c>)
 8001180:	2164      	movs	r1, #100	; 0x64
 8001182:	2014      	movs	r0, #20
 8001184:	f00d fbf8 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    pQSPI_Info.FlashSize          = (uint32_t)0x00;
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
    pQSPI_Info.EraseSectorSize    = (uint32_t)0x00;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
    pQSPI_Info.EraseSectorsNumber = (uint32_t)0x00;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
    pQSPI_Info.ProgPageSize       = (uint32_t)0x00;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
    pQSPI_Info.ProgPagesNumber    = (uint32_t)0x00;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
    BSP_QSPI_GetInfo(0,&pQSPI_Info);
 800119c:	f107 0308 	add.w	r3, r7, #8
 80011a0:	4619      	mov	r1, r3
 80011a2:	2000      	movs	r0, #0
 80011a4:	f005 f832 	bl	800620c <BSP_QSPI_GetInfo>
    if((pQSPI_Info.FlashSize != 0x8000000) || (pQSPI_Info.EraseSectorSize != 0x2000)  ||
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80011ae:	d10f      	bne.n	80011d0 <QSPI_demo+0xc8>
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011b6:	d10b      	bne.n	80011d0 <QSPI_demo+0xc8>
       (pQSPI_Info.ProgPageSize != 0x100)  || (pQSPI_Info.EraseSectorsNumber != 0x4000) ||
 80011b8:	697b      	ldr	r3, [r7, #20]
    if((pQSPI_Info.FlashSize != 0x8000000) || (pQSPI_Info.EraseSectorSize != 0x2000)  ||
 80011ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011be:	d107      	bne.n	80011d0 <QSPI_demo+0xc8>
       (pQSPI_Info.ProgPageSize != 0x100)  || (pQSPI_Info.EraseSectorsNumber != 0x4000) ||
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011c6:	d103      	bne.n	80011d0 <QSPI_demo+0xc8>
         (pQSPI_Info.ProgPagesNumber != 0x80000))
 80011c8:	69bb      	ldr	r3, [r7, #24]
       (pQSPI_Info.ProgPageSize != 0x100)  || (pQSPI_Info.EraseSectorsNumber != 0x4000) ||
 80011ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011ce:	d00c      	beq.n	80011ea <QSPI_demo+0xe2>
      UTIL_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI GET INFO : FAILED.", LEFT_MODE);
 80011d0:	2303      	movs	r3, #3
 80011d2:	4a5d      	ldr	r2, [pc, #372]	; (8001348 <QSPI_demo+0x240>)
 80011d4:	2173      	movs	r1, #115	; 0x73
 80011d6:	2014      	movs	r0, #20
 80011d8:	f00d fbce 	bl	800e978 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 80011dc:	2303      	movs	r3, #3
 80011de:	4a54      	ldr	r2, [pc, #336]	; (8001330 <QSPI_demo+0x228>)
 80011e0:	2182      	movs	r1, #130	; 0x82
 80011e2:	2014      	movs	r0, #20
 80011e4:	f00d fbc8 	bl	800e978 <UTIL_LCD_DisplayStringAt>
}
 80011e8:	e09c      	b.n	8001324 <QSPI_demo+0x21c>
      UTIL_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI GET INFO : OK.   ", LEFT_MODE);
 80011ea:	2303      	movs	r3, #3
 80011ec:	4a57      	ldr	r2, [pc, #348]	; (800134c <QSPI_demo+0x244>)
 80011ee:	2173      	movs	r1, #115	; 0x73
 80011f0:	2014      	movs	r0, #20
 80011f2:	f00d fbc1 	bl	800e978 <UTIL_LCD_DisplayStringAt>
      if(BSP_QSPI_EraseBlock(0,WRITE_READ_ADDR,BSP_QSPI_ERASE_8K) != BSP_ERROR_NONE)
 80011f6:	2200      	movs	r2, #0
 80011f8:	2150      	movs	r1, #80	; 0x50
 80011fa:	2000      	movs	r0, #0
 80011fc:	f004 ffb0 	bl	8006160 <BSP_QSPI_EraseBlock>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00c      	beq.n	8001220 <QSPI_demo+0x118>
        UTIL_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI ERASE : FAILED.", LEFT_MODE);
 8001206:	2303      	movs	r3, #3
 8001208:	4a51      	ldr	r2, [pc, #324]	; (8001350 <QSPI_demo+0x248>)
 800120a:	2182      	movs	r1, #130	; 0x82
 800120c:	2014      	movs	r0, #20
 800120e:	f00d fbb3 	bl	800e978 <UTIL_LCD_DisplayStringAt>
        UTIL_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8001212:	2303      	movs	r3, #3
 8001214:	4a46      	ldr	r2, [pc, #280]	; (8001330 <QSPI_demo+0x228>)
 8001216:	2191      	movs	r1, #145	; 0x91
 8001218:	2014      	movs	r0, #20
 800121a:	f00d fbad 	bl	800e978 <UTIL_LCD_DisplayStringAt>
}
 800121e:	e081      	b.n	8001324 <QSPI_demo+0x21c>
        UTIL_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI ERASE : OK.   ", LEFT_MODE);
 8001220:	2303      	movs	r3, #3
 8001222:	4a4c      	ldr	r2, [pc, #304]	; (8001354 <QSPI_demo+0x24c>)
 8001224:	2182      	movs	r1, #130	; 0x82
 8001226:	2014      	movs	r0, #20
 8001228:	f00d fba6 	bl	800e978 <UTIL_LCD_DisplayStringAt>
        Fill_Buffer(qspi_aTxBuffer, BUFFER_SIZE, 0xD20F);
 800122c:	f24d 220f 	movw	r2, #53775	; 0xd20f
 8001230:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001234:	4848      	ldr	r0, [pc, #288]	; (8001358 <QSPI_demo+0x250>)
 8001236:	f000 f913 	bl	8001460 <Fill_Buffer>
        if(BSP_QSPI_Write(0,qspi_aTxBuffer, WRITE_READ_ADDR, BUFFER_SIZE) != BSP_ERROR_NONE)
 800123a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800123e:	2250      	movs	r2, #80	; 0x50
 8001240:	4945      	ldr	r1, [pc, #276]	; (8001358 <QSPI_demo+0x250>)
 8001242:	2000      	movs	r0, #0
 8001244:	f004 fef0 	bl	8006028 <BSP_QSPI_Write>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00c      	beq.n	8001268 <QSPI_demo+0x160>
          UTIL_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI WRITE : FAILED.", LEFT_MODE);
 800124e:	2303      	movs	r3, #3
 8001250:	4a42      	ldr	r2, [pc, #264]	; (800135c <QSPI_demo+0x254>)
 8001252:	2191      	movs	r1, #145	; 0x91
 8001254:	2014      	movs	r0, #20
 8001256:	f00d fb8f 	bl	800e978 <UTIL_LCD_DisplayStringAt>
          UTIL_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 800125a:	2303      	movs	r3, #3
 800125c:	4a34      	ldr	r2, [pc, #208]	; (8001330 <QSPI_demo+0x228>)
 800125e:	21a0      	movs	r1, #160	; 0xa0
 8001260:	2014      	movs	r0, #20
 8001262:	f00d fb89 	bl	800e978 <UTIL_LCD_DisplayStringAt>
}
 8001266:	e05d      	b.n	8001324 <QSPI_demo+0x21c>
          UTIL_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI WRITE : OK.     ", LEFT_MODE);
 8001268:	2303      	movs	r3, #3
 800126a:	4a3d      	ldr	r2, [pc, #244]	; (8001360 <QSPI_demo+0x258>)
 800126c:	2191      	movs	r1, #145	; 0x91
 800126e:	2014      	movs	r0, #20
 8001270:	f00d fb82 	bl	800e978 <UTIL_LCD_DisplayStringAt>
          if(BSP_QSPI_Read(0,qspi_aRxBuffer, WRITE_READ_ADDR, BUFFER_SIZE) != BSP_ERROR_NONE)
 8001274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001278:	2250      	movs	r2, #80	; 0x50
 800127a:	493a      	ldr	r1, [pc, #232]	; (8001364 <QSPI_demo+0x25c>)
 800127c:	2000      	movs	r0, #0
 800127e:	f004 fe81 	bl	8005f84 <BSP_QSPI_Read>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00c      	beq.n	80012a2 <QSPI_demo+0x19a>
            UTIL_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI READ : FAILED.", LEFT_MODE);
 8001288:	2303      	movs	r3, #3
 800128a:	4a37      	ldr	r2, [pc, #220]	; (8001368 <QSPI_demo+0x260>)
 800128c:	21a0      	movs	r1, #160	; 0xa0
 800128e:	2014      	movs	r0, #20
 8001290:	f00d fb72 	bl	800e978 <UTIL_LCD_DisplayStringAt>
            UTIL_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8001294:	2303      	movs	r3, #3
 8001296:	4a26      	ldr	r2, [pc, #152]	; (8001330 <QSPI_demo+0x228>)
 8001298:	21af      	movs	r1, #175	; 0xaf
 800129a:	2014      	movs	r0, #20
 800129c:	f00d fb6c 	bl	800e978 <UTIL_LCD_DisplayStringAt>
}
 80012a0:	e040      	b.n	8001324 <QSPI_demo+0x21c>
            UTIL_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI READ :  OK.    ", LEFT_MODE);
 80012a2:	2303      	movs	r3, #3
 80012a4:	4a31      	ldr	r2, [pc, #196]	; (800136c <QSPI_demo+0x264>)
 80012a6:	21a0      	movs	r1, #160	; 0xa0
 80012a8:	2014      	movs	r0, #20
 80012aa:	f00d fb65 	bl	800e978 <UTIL_LCD_DisplayStringAt>
            if(Buffercmp(qspi_aRxBuffer, qspi_aTxBuffer, BUFFER_SIZE) > 0)
 80012ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b2:	4929      	ldr	r1, [pc, #164]	; (8001358 <QSPI_demo+0x250>)
 80012b4:	482b      	ldr	r0, [pc, #172]	; (8001364 <QSPI_demo+0x25c>)
 80012b6:	f000 f8f6 	bl	80014a6 <Buffercmp>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00c      	beq.n	80012da <QSPI_demo+0x1d2>
              UTIL_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI COMPARE : FAILED.", LEFT_MODE);
 80012c0:	2303      	movs	r3, #3
 80012c2:	4a2b      	ldr	r2, [pc, #172]	; (8001370 <QSPI_demo+0x268>)
 80012c4:	21af      	movs	r1, #175	; 0xaf
 80012c6:	2014      	movs	r0, #20
 80012c8:	f00d fb56 	bl	800e978 <UTIL_LCD_DisplayStringAt>
              UTIL_LCD_DisplayStringAt(20, 190, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 80012cc:	2303      	movs	r3, #3
 80012ce:	4a18      	ldr	r2, [pc, #96]	; (8001330 <QSPI_demo+0x228>)
 80012d0:	21be      	movs	r1, #190	; 0xbe
 80012d2:	2014      	movs	r0, #20
 80012d4:	f00d fb50 	bl	800e978 <UTIL_LCD_DisplayStringAt>
}
 80012d8:	e024      	b.n	8001324 <QSPI_demo+0x21c>
              UTIL_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI COMPARE : OK.     ", LEFT_MODE);
 80012da:	2303      	movs	r3, #3
 80012dc:	4a25      	ldr	r2, [pc, #148]	; (8001374 <QSPI_demo+0x26c>)
 80012de:	21af      	movs	r1, #175	; 0xaf
 80012e0:	2014      	movs	r0, #20
 80012e2:	f00d fb49 	bl	800e978 <UTIL_LCD_DisplayStringAt>
             if(BSP_QSPI_EnableMemoryMappedMode(0)!=BSP_ERROR_NONE)
 80012e6:	2000      	movs	r0, #0
 80012e8:	f004 ffa6 	bl	8006238 <BSP_QSPI_EnableMemoryMappedMode>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00c      	beq.n	800130c <QSPI_demo+0x204>
               UTIL_LCD_DisplayStringAt(20, 190, (uint8_t*)"QSPI Memory Mapped Mode : FAILED.     ", LEFT_MODE);
 80012f2:	2303      	movs	r3, #3
 80012f4:	4a20      	ldr	r2, [pc, #128]	; (8001378 <QSPI_demo+0x270>)
 80012f6:	21be      	movs	r1, #190	; 0xbe
 80012f8:	2014      	movs	r0, #20
 80012fa:	f00d fb3d 	bl	800e978 <UTIL_LCD_DisplayStringAt>
               UTIL_LCD_DisplayStringAt(20, 190, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 80012fe:	2303      	movs	r3, #3
 8001300:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <QSPI_demo+0x228>)
 8001302:	21be      	movs	r1, #190	; 0xbe
 8001304:	2014      	movs	r0, #20
 8001306:	f00d fb37 	bl	800e978 <UTIL_LCD_DisplayStringAt>
}
 800130a:	e00b      	b.n	8001324 <QSPI_demo+0x21c>
               UTIL_LCD_DisplayStringAt(20, 190, (uint8_t*)"QSPI Memory Mapped Mode : OK.     ", LEFT_MODE);
 800130c:	2303      	movs	r3, #3
 800130e:	4a1b      	ldr	r2, [pc, #108]	; (800137c <QSPI_demo+0x274>)
 8001310:	21be      	movs	r1, #190	; 0xbe
 8001312:	2014      	movs	r0, #20
 8001314:	f00d fb30 	bl	800e978 <UTIL_LCD_DisplayStringAt>
               UTIL_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI Test : OK.     ", LEFT_MODE);
 8001318:	2303      	movs	r3, #3
 800131a:	4a19      	ldr	r2, [pc, #100]	; (8001380 <QSPI_demo+0x278>)
 800131c:	21af      	movs	r1, #175	; 0xaf
 800131e:	2014      	movs	r0, #20
 8001320:	f00d fb2a 	bl	800e978 <UTIL_LCD_DisplayStringAt>
}
 8001324:	bf00      	nop
 8001326:	3720      	adds	r7, #32
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	08010594 	.word	0x08010594
 8001330:	080105b4 	.word	0x080105b4
 8001334:	080105c8 	.word	0x080105c8
 8001338:	080105ec 	.word	0x080105ec
 800133c:	0801060c 	.word	0x0801060c
 8001340:	08010630 	.word	0x08010630
 8001344:	08010650 	.word	0x08010650
 8001348:	0801066c 	.word	0x0801066c
 800134c:	08010684 	.word	0x08010684
 8001350:	0801069c 	.word	0x0801069c
 8001354:	080106b4 	.word	0x080106b4
 8001358:	240001d8 	.word	0x240001d8
 800135c:	080106c8 	.word	0x080106c8
 8001360:	080106e0 	.word	0x080106e0
 8001364:	240003d8 	.word	0x240003d8
 8001368:	080106f8 	.word	0x080106f8
 800136c:	0801070c 	.word	0x0801070c
 8001370:	08010724 	.word	0x08010724
 8001374:	0801073c 	.word	0x0801073c
 8001378:	08010754 	.word	0x08010754
 800137c:	0801077c 	.word	0x0801077c
 8001380:	080107a0 	.word	0x080107a0

08001384 <QSPI_SetHint>:
  * @brief  Display QSPI Demo Hint
  * @param  None
  * @retval None
  */
static void QSPI_SetHint(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af02      	add	r7, sp, #8
  uint32_t x_size;
  uint32_t y_size;
  BSP_LCD_GetXSize(0, &x_size);
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	4619      	mov	r1, r3
 800138e:	2000      	movs	r0, #0
 8001390:	f003 ff8e 	bl	80052b0 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	2000      	movs	r0, #0
 800139a:	f003 ffb1 	bl	8005300 <BSP_LCD_GetYSize>
  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 800139e:	f04f 30ff 	mov.w	r0, #4294967295
 80013a2:	f00d fa9d 	bl	800e8e0 <UTIL_LCD_Clear>

  /* Set LCD Demo description */
  UTIL_LCD_FillRect(0, 0, x_size, 80,UTIL_LCD_COLOR_BLUE);
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4b26      	ldr	r3, [pc, #152]	; (8001444 <QSPI_SetHint+0xc0>)
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2350      	movs	r3, #80	; 0x50
 80013ae:	2100      	movs	r1, #0
 80013b0:	2000      	movs	r0, #0
 80013b2:	f00d febb 	bl	800f12c <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 80013b6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ba:	f00d f989 	bl	800e6d0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 80013be:	4821      	ldr	r0, [pc, #132]	; (8001444 <QSPI_SetHint+0xc0>)
 80013c0:	f00d f99a 	bl	800e6f8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font24);
 80013c4:	4820      	ldr	r0, [pc, #128]	; (8001448 <QSPI_SetHint+0xc4>)
 80013c6:	f00d f9ab 	bl	800e720 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 0, (uint8_t*)"QSPI", CENTER_MODE);
 80013ca:	2301      	movs	r3, #1
 80013cc:	4a1f      	ldr	r2, [pc, #124]	; (800144c <QSPI_SetHint+0xc8>)
 80013ce:	2100      	movs	r1, #0
 80013d0:	2000      	movs	r0, #0
 80013d2:	f00d fad1 	bl	800e978 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font12);
 80013d6:	481e      	ldr	r0, [pc, #120]	; (8001450 <QSPI_SetHint+0xcc>)
 80013d8:	f00d f9a2 	bl	800e720 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 30, (uint8_t*)"This example shows how to write", CENTER_MODE);
 80013dc:	2301      	movs	r3, #1
 80013de:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <QSPI_SetHint+0xd0>)
 80013e0:	211e      	movs	r1, #30
 80013e2:	2000      	movs	r0, #0
 80013e4:	f00d fac8 	bl	800e978 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 45, (uint8_t*)"and read data on QSPI memory", CENTER_MODE);
 80013e8:	2301      	movs	r3, #1
 80013ea:	4a1b      	ldr	r2, [pc, #108]	; (8001458 <QSPI_SetHint+0xd4>)
 80013ec:	212d      	movs	r1, #45	; 0x2d
 80013ee:	2000      	movs	r0, #0
 80013f0:	f00d fac2 	bl	800e978 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 60, (uint8_t*)"(Hardware modifications needed)", CENTER_MODE);
 80013f4:	2301      	movs	r3, #1
 80013f6:	4a19      	ldr	r2, [pc, #100]	; (800145c <QSPI_SetHint+0xd8>)
 80013f8:	213c      	movs	r1, #60	; 0x3c
 80013fa:	2000      	movs	r0, #0
 80013fc:	f00d fabc 	bl	800e978 <UTIL_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  UTIL_LCD_DrawRect(10, 90, x_size - 20,y_size- 100,UTIL_LCD_COLOR_BLUE);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f1a3 0214 	sub.w	r2, r3, #20
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	3b64      	subs	r3, #100	; 0x64
 800140a:	490e      	ldr	r1, [pc, #56]	; (8001444 <QSPI_SetHint+0xc0>)
 800140c:	9100      	str	r1, [sp, #0]
 800140e:	215a      	movs	r1, #90	; 0x5a
 8001410:	200a      	movs	r0, #10
 8001412:	f00d fc1b 	bl	800ec4c <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(11, 91, x_size - 22, y_size- 102,UTIL_LCD_COLOR_BLUE);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f1a3 0216 	sub.w	r2, r3, #22
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	3b66      	subs	r3, #102	; 0x66
 8001420:	4908      	ldr	r1, [pc, #32]	; (8001444 <QSPI_SetHint+0xc0>)
 8001422:	9100      	str	r1, [sp, #0]
 8001424:	215b      	movs	r1, #91	; 0x5b
 8001426:	200b      	movs	r0, #11
 8001428:	f00d fc10 	bl	800ec4c <UTIL_LCD_DrawRect>

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 800142c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001430:	f00d f94e 	bl	800e6d0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f00d f95e 	bl	800e6f8 <UTIL_LCD_SetBackColor>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	ff0000ff 	.word	0xff0000ff
 8001448:	240000a8 	.word	0x240000a8
 800144c:	080107b8 	.word	0x080107b8
 8001450:	240000c0 	.word	0x240000c0
 8001454:	080107c0 	.word	0x080107c0
 8001458:	080107e0 	.word	0x080107e0
 800145c:	08010800 	.word	0x08010800

08001460 <Fill_Buffer>:
  * @param  uwBufferLenght: size of the buffer to fill
  * @param  uwOffset: first value to fill on the buffer
  * @retval None
  */
static void Fill_Buffer(uint8_t *pBuffer, uint32_t uwBufferLenght, uint32_t uwOffset)
{
 8001460:	b480      	push	{r7}
 8001462:	b087      	sub	sp, #28
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t tmpIndex = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	e00c      	b.n	8001490 <Fill_Buffer+0x30>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	b2d9      	uxtb	r1, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	4403      	add	r3, r0
 8001484:	440a      	add	r2, r1
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	701a      	strb	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	3301      	adds	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	429a      	cmp	r2, r3
 8001496:	d3ee      	bcc.n	8001476 <Fill_Buffer+0x16>
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	371c      	adds	r7, #28
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval 1: pBuffer identical to pBuffer1
  *         0: pBuffer differs from pBuffer1
  */
static uint8_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint32_t BufferLength)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b085      	sub	sp, #20
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
  while (BufferLength--)
 80014b2:	e00d      	b.n	80014d0 <Buffercmp+0x2a>
  {
    if (*pBuffer1 != *pBuffer2)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	781a      	ldrb	r2, [r3, #0]
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <Buffercmp+0x1e>
    {
      return 1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e00b      	b.n	80014dc <Buffercmp+0x36>
    }

    pBuffer1++;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3301      	adds	r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	3301      	adds	r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	1e5a      	subs	r2, r3, #1
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1ec      	bne.n	80014b4 <Buffercmp+0xe>
  }

  return 0;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <SDRAM_demo>:
  * @brief  SDRAM Demo
  * @param  None
  * @retval None
  */
void SDRAM_demo (void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  SDRAM_SetHint();
 80014ec:	f000 f894 	bl	8001618 <SDRAM_SetHint>

  /* SDRAM device configuration */
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 80014f0:	2000      	movs	r0, #0
 80014f2:	f005 f9b3 	bl	800685c <BSP_SDRAM_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00c      	beq.n	8001516 <SDRAM_demo+0x2e>
  {
    UTIL_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM Initialization : FAILED.", LEFT_MODE);
 80014fc:	2303      	movs	r3, #3
 80014fe:	4a38      	ldr	r2, [pc, #224]	; (80015e0 <SDRAM_demo+0xf8>)
 8001500:	2173      	movs	r1, #115	; 0x73
 8001502:	2014      	movs	r0, #20
 8001504:	f00d fa38 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 8001508:	2303      	movs	r3, #3
 800150a:	4a36      	ldr	r2, [pc, #216]	; (80015e4 <SDRAM_demo+0xfc>)
 800150c:	2182      	movs	r1, #130	; 0x82
 800150e:	2014      	movs	r0, #20
 8001510:	f00d fa32 	bl	800e978 <UTIL_LCD_DisplayStringAt>
 8001514:	e005      	b.n	8001522 <SDRAM_demo+0x3a>
  }
  else
  {
    UTIL_LCD_DisplayStringAt(20, 100, (uint8_t *)"SDRAM Initialization : OK.", LEFT_MODE);
 8001516:	2303      	movs	r3, #3
 8001518:	4a33      	ldr	r2, [pc, #204]	; (80015e8 <SDRAM_demo+0x100>)
 800151a:	2164      	movs	r1, #100	; 0x64
 800151c:	2014      	movs	r0, #20
 800151e:	f00d fa2b 	bl	800e978 <UTIL_LCD_DisplayStringAt>
  }
  /* Fill the buffer to write */
  Fill_Buffer(sdram_aTxBuffer, BUFFER_SIZE, 0xA244250F);
 8001522:	4a32      	ldr	r2, [pc, #200]	; (80015ec <SDRAM_demo+0x104>)
 8001524:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001528:	4831      	ldr	r0, [pc, #196]	; (80015f0 <SDRAM_demo+0x108>)
 800152a:	f000 f8db 	bl	80016e4 <Fill_Buffer>

  /* Write data to the SDRAM memory */
  if(HAL_SDRAM_Write_32b(&hsdram[0], (uint32_t *)(SDRAM_DEVICE_ADDR + WRITE_READ_ADDR), (uint32_t*)sdram_aTxBuffer, BUFFER_SIZE) != BSP_ERROR_NONE)
 800152e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001532:	4a2f      	ldr	r2, [pc, #188]	; (80015f0 <SDRAM_demo+0x108>)
 8001534:	492f      	ldr	r1, [pc, #188]	; (80015f4 <SDRAM_demo+0x10c>)
 8001536:	4830      	ldr	r0, [pc, #192]	; (80015f8 <SDRAM_demo+0x110>)
 8001538:	f00b fe4f 	bl	800d1da <HAL_SDRAM_Write_32b>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00c      	beq.n	800155c <SDRAM_demo+0x74>
  {
    UTIL_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : FAILED.", LEFT_MODE);
 8001542:	2303      	movs	r3, #3
 8001544:	4a2d      	ldr	r2, [pc, #180]	; (80015fc <SDRAM_demo+0x114>)
 8001546:	2173      	movs	r1, #115	; 0x73
 8001548:	2014      	movs	r0, #20
 800154a:	f00d fa15 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 800154e:	2303      	movs	r3, #3
 8001550:	4a24      	ldr	r2, [pc, #144]	; (80015e4 <SDRAM_demo+0xfc>)
 8001552:	2182      	movs	r1, #130	; 0x82
 8001554:	2014      	movs	r0, #20
 8001556:	f00d fa0f 	bl	800e978 <UTIL_LCD_DisplayStringAt>
 800155a:	e005      	b.n	8001568 <SDRAM_demo+0x80>
  }
  else
  {
    UTIL_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : OK.", LEFT_MODE);
 800155c:	2303      	movs	r3, #3
 800155e:	4a28      	ldr	r2, [pc, #160]	; (8001600 <SDRAM_demo+0x118>)
 8001560:	2173      	movs	r1, #115	; 0x73
 8001562:	2014      	movs	r0, #20
 8001564:	f00d fa08 	bl	800e978 <UTIL_LCD_DisplayStringAt>
  }

  /* Read back data from the SDRAM memory */
  if(HAL_SDRAM_Read_32b(&hsdram[0], (uint32_t *)(SDRAM_DEVICE_ADDR + WRITE_READ_ADDR), (uint32_t*)sdram_aRxBuffer, BUFFER_SIZE) != BSP_ERROR_NONE)
 8001568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800156c:	4a25      	ldr	r2, [pc, #148]	; (8001604 <SDRAM_demo+0x11c>)
 800156e:	4921      	ldr	r1, [pc, #132]	; (80015f4 <SDRAM_demo+0x10c>)
 8001570:	4821      	ldr	r0, [pc, #132]	; (80015f8 <SDRAM_demo+0x110>)
 8001572:	f00b fde5 	bl	800d140 <HAL_SDRAM_Read_32b>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00c      	beq.n	8001596 <SDRAM_demo+0xae>
  {
    UTIL_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : FAILED.", LEFT_MODE);
 800157c:	2303      	movs	r3, #3
 800157e:	4a22      	ldr	r2, [pc, #136]	; (8001608 <SDRAM_demo+0x120>)
 8001580:	2182      	movs	r1, #130	; 0x82
 8001582:	2014      	movs	r0, #20
 8001584:	f00d f9f8 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 8001588:	2303      	movs	r3, #3
 800158a:	4a16      	ldr	r2, [pc, #88]	; (80015e4 <SDRAM_demo+0xfc>)
 800158c:	2191      	movs	r1, #145	; 0x91
 800158e:	2014      	movs	r0, #20
 8001590:	f00d f9f2 	bl	800e978 <UTIL_LCD_DisplayStringAt>
 8001594:	e005      	b.n	80015a2 <SDRAM_demo+0xba>
  }
  else
  {
    UTIL_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : OK.", LEFT_MODE);
 8001596:	2303      	movs	r3, #3
 8001598:	4a1c      	ldr	r2, [pc, #112]	; (800160c <SDRAM_demo+0x124>)
 800159a:	2182      	movs	r1, #130	; 0x82
 800159c:	2014      	movs	r0, #20
 800159e:	f00d f9eb 	bl	800e978 <UTIL_LCD_DisplayStringAt>
  }

  if(Buffercmp(sdram_aTxBuffer, sdram_aRxBuffer, BUFFER_SIZE) > 0)
 80015a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a6:	4917      	ldr	r1, [pc, #92]	; (8001604 <SDRAM_demo+0x11c>)
 80015a8:	4811      	ldr	r0, [pc, #68]	; (80015f0 <SDRAM_demo+0x108>)
 80015aa:	f000 f8e5 	bl	8001778 <Buffercmp>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00c      	beq.n	80015ce <SDRAM_demo+0xe6>
  {
    UTIL_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM COMPARE : FAILED.", LEFT_MODE);
 80015b4:	2303      	movs	r3, #3
 80015b6:	4a16      	ldr	r2, [pc, #88]	; (8001610 <SDRAM_demo+0x128>)
 80015b8:	2191      	movs	r1, #145	; 0x91
 80015ba:	2014      	movs	r0, #20
 80015bc:	f00d f9dc 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 160, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 80015c0:	2303      	movs	r3, #3
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <SDRAM_demo+0xfc>)
 80015c4:	21a0      	movs	r1, #160	; 0xa0
 80015c6:	2014      	movs	r0, #20
 80015c8:	f00d f9d6 	bl	800e978 <UTIL_LCD_DisplayStringAt>
//    {
//      ButtonState = 0;
//      return;
//    }
//  }
}
 80015cc:	e005      	b.n	80015da <SDRAM_demo+0xf2>
    UTIL_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM Test : OK.", LEFT_MODE);
 80015ce:	2303      	movs	r3, #3
 80015d0:	4a10      	ldr	r2, [pc, #64]	; (8001614 <SDRAM_demo+0x12c>)
 80015d2:	2191      	movs	r1, #145	; 0x91
 80015d4:	2014      	movs	r0, #20
 80015d6:	f00d f9cf 	bl	800e978 <UTIL_LCD_DisplayStringAt>
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	08010820 	.word	0x08010820
 80015e4:	08010840 	.word	0x08010840
 80015e8:	08010854 	.word	0x08010854
 80015ec:	a244250f 	.word	0xa244250f
 80015f0:	240005d8 	.word	0x240005d8
 80015f4:	d0001000 	.word	0xd0001000
 80015f8:	24001a2c 	.word	0x24001a2c
 80015fc:	08010870 	.word	0x08010870
 8001600:	08010888 	.word	0x08010888
 8001604:	240009d8 	.word	0x240009d8
 8001608:	0801089c 	.word	0x0801089c
 800160c:	080108b4 	.word	0x080108b4
 8001610:	080108c8 	.word	0x080108c8
 8001614:	080108e0 	.word	0x080108e0

08001618 <SDRAM_SetHint>:
  * @brief  Display SDRAM Demo Hint
  * @param  None
  * @retval None
  */
static void SDRAM_SetHint(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af02      	add	r7, sp, #8
  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4619      	mov	r1, r3
 8001622:	2000      	movs	r0, #0
 8001624:	f003 fe44 	bl	80052b0 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 8001628:	463b      	mov	r3, r7
 800162a:	4619      	mov	r1, r3
 800162c:	2000      	movs	r0, #0
 800162e:	f003 fe67 	bl	8005300 <BSP_LCD_GetYSize>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8001632:	f04f 30ff 	mov.w	r0, #4294967295
 8001636:	f00d f953 	bl	800e8e0 <UTIL_LCD_Clear>

  /* Set LCD Demo description */
  UTIL_LCD_FillRect(0, 0, x_size, 80, UTIL_LCD_COLOR_BLUE);
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	4b23      	ldr	r3, [pc, #140]	; (80016cc <SDRAM_SetHint+0xb4>)
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2350      	movs	r3, #80	; 0x50
 8001642:	2100      	movs	r1, #0
 8001644:	2000      	movs	r0, #0
 8001646:	f00d fd71 	bl	800f12c <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800164a:	f04f 30ff 	mov.w	r0, #4294967295
 800164e:	f00d f83f 	bl	800e6d0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8001652:	481e      	ldr	r0, [pc, #120]	; (80016cc <SDRAM_SetHint+0xb4>)
 8001654:	f00d f850 	bl	800e6f8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font24);
 8001658:	481d      	ldr	r0, [pc, #116]	; (80016d0 <SDRAM_SetHint+0xb8>)
 800165a:	f00d f861 	bl	800e720 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"SDRAM", CENTER_MODE);
 800165e:	2301      	movs	r3, #1
 8001660:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <SDRAM_SetHint+0xbc>)
 8001662:	2100      	movs	r1, #0
 8001664:	2000      	movs	r0, #0
 8001666:	f00d f987 	bl	800e978 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font12);
 800166a:	481b      	ldr	r0, [pc, #108]	; (80016d8 <SDRAM_SetHint+0xc0>)
 800166c:	f00d f858 	bl	800e720 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows how to write", CENTER_MODE);
 8001670:	2301      	movs	r3, #1
 8001672:	4a1a      	ldr	r2, [pc, #104]	; (80016dc <SDRAM_SetHint+0xc4>)
 8001674:	211e      	movs	r1, #30
 8001676:	2000      	movs	r0, #0
 8001678:	f00d f97e 	bl	800e978 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"and read data on SDRAM", CENTER_MODE);
 800167c:	2301      	movs	r3, #1
 800167e:	4a18      	ldr	r2, [pc, #96]	; (80016e0 <SDRAM_SetHint+0xc8>)
 8001680:	212d      	movs	r1, #45	; 0x2d
 8001682:	2000      	movs	r0, #0
 8001684:	f00d f978 	bl	800e978 <UTIL_LCD_DisplayStringAt>

   /* Set the LCD Text Color */
  UTIL_LCD_DrawRect(10, 90, x_size - 20, y_size- 100, UTIL_LCD_COLOR_BLUE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f1a3 0214 	sub.w	r2, r3, #20
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	3b64      	subs	r3, #100	; 0x64
 8001692:	490e      	ldr	r1, [pc, #56]	; (80016cc <SDRAM_SetHint+0xb4>)
 8001694:	9100      	str	r1, [sp, #0]
 8001696:	215a      	movs	r1, #90	; 0x5a
 8001698:	200a      	movs	r0, #10
 800169a:	f00d fad7 	bl	800ec4c <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(11, 91, x_size - 22, y_size- 102, UTIL_LCD_COLOR_BLUE);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f1a3 0216 	sub.w	r2, r3, #22
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	3b66      	subs	r3, #102	; 0x66
 80016a8:	4908      	ldr	r1, [pc, #32]	; (80016cc <SDRAM_SetHint+0xb4>)
 80016aa:	9100      	str	r1, [sp, #0]
 80016ac:	215b      	movs	r1, #91	; 0x5b
 80016ae:	200b      	movs	r0, #11
 80016b0:	f00d facc 	bl	800ec4c <UTIL_LCD_DrawRect>

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 80016b4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80016b8:	f00d f80a 	bl	800e6d0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f00d f81a 	bl	800e6f8 <UTIL_LCD_SetBackColor>
 }
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	ff0000ff 	.word	0xff0000ff
 80016d0:	240000a8 	.word	0x240000a8
 80016d4:	080108f4 	.word	0x080108f4
 80016d8:	240000c0 	.word	0x240000c0
 80016dc:	080108fc 	.word	0x080108fc
 80016e0:	0801091c 	.word	0x0801091c

080016e4 <Fill_Buffer>:
  * @param  uwBufferLenght: size of the buffer to fill
  * @param  uwOffset: first value to fill on the buffer
  * @retval None
  */
static void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLength, uint32_t uwOffset)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b08b      	sub	sp, #44	; 0x2c
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpIndex = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++ )
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
 80016f8:	e00a      	b.n	8001710 <Fill_Buffer+0x2c>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4413      	add	r3, r2
 8001702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	440a      	add	r2, r1
 8001708:	601a      	str	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++ )
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	3301      	adds	r3, #1
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
 8001710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	429a      	cmp	r2, r3
 8001716:	d3f0      	bcc.n	80016fa <Fill_Buffer+0x16>
  }
  /* Clean Data Cache to update the content of the SDRAM */
  SCB_CleanDCache_by_Addr((uint32_t*)pBuffer, uwBufferLength*4);
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	461a      	mov	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	623b      	str	r3, [r7, #32]
 8001722:	61fa      	str	r2, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	2b00      	cmp	r3, #0
 8001728:	dd1d      	ble.n	8001766 <Fill_Buffer+0x82>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	4413      	add	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800173a:	f3bf 8f4f 	dsb	sy
}
 800173e:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001740:	4a0c      	ldr	r2, [pc, #48]	; (8001774 <Fill_Buffer+0x90>)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	3320      	adds	r3, #32
 800174c:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	3b20      	subs	r3, #32
 8001752:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b00      	cmp	r3, #0
 8001758:	dcf2      	bgt.n	8001740 <Fill_Buffer+0x5c>
  __ASM volatile ("dsb 0xF":::"memory");
 800175a:	f3bf 8f4f 	dsb	sy
}
 800175e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001760:	f3bf 8f6f 	isb	sy
}
 8001764:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001766:	bf00      	nop
}
 8001768:	bf00      	nop
 800176a:	372c      	adds	r7, #44	; 0x2c
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval 1: pBuffer identical to pBuffer1
  *         0: pBuffer differs from pBuffer1
  */
static uint8_t Buffercmp(uint32_t* pBuffer1, uint32_t* pBuffer2, uint16_t BufferLength)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	4613      	mov	r3, r2
 8001784:	80fb      	strh	r3, [r7, #6]
  /* Invalidate Data Cache to get the updated content of the SRAM*/
  SCB_CleanInvalidateDCache_by_Addr((uint32_t *)pBuffer2, BufferLength*4);
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	61fa      	str	r2, [r7, #28]
 800178e:	61bb      	str	r3, [r7, #24]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanInvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2b00      	cmp	r3, #0
 8001794:	dd1d      	ble.n	80017d2 <Buffercmp+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f003 021f 	and.w	r2, r3, #31
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	4413      	add	r3, r2
 80017a0:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80017a6:	f3bf 8f4f 	dsb	sy
}
 80017aa:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80017ac:	4a17      	ldr	r2, [pc, #92]	; (800180c <Buffercmp+0x94>)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	3320      	adds	r3, #32
 80017b8:	613b      	str	r3, [r7, #16]
        op_size -=          __SCB_DCACHE_LINE_SIZE;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3b20      	subs	r3, #32
 80017be:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	dcf2      	bgt.n	80017ac <Buffercmp+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 80017c6:	f3bf 8f4f 	dsb	sy
}
 80017ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017cc:	f3bf 8f6f 	isb	sy
}
 80017d0:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80017d2:	bf00      	nop

  while (BufferLength--)
 80017d4:	e00d      	b.n	80017f2 <Buffercmp+0x7a>
  {
    if (*pBuffer1 != *pBuffer2)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d001      	beq.n	80017e6 <Buffercmp+0x6e>
    {
      return 1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00b      	b.n	80017fe <Buffercmp+0x86>
    }

    pBuffer1++;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3304      	adds	r3, #4
 80017ea:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	3304      	adds	r3, #4
 80017f0:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	1e5a      	subs	r2, r3, #1
 80017f6:	80fa      	strh	r2, [r7, #6]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1ec      	bne.n	80017d6 <Buffercmp+0x5e>
  }

  return 0;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3724      	adds	r7, #36	; 0x24
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <NMI_Handler+0x4>

08001816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <MemManage_Handler+0x4>

08001822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler+0x4>

0800182e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185c:	f005 fcb0 	bl	80071c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800186c:	4a14      	ldr	r2, [pc, #80]	; (80018c0 <_sbrk+0x5c>)
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <_sbrk+0x60>)
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <_sbrk+0x64>)
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <_sbrk+0x68>)
 8001884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	429a      	cmp	r2, r3
 8001892:	d207      	bcs.n	80018a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001894:	f00e f926 	bl	800fae4 <__errno>
 8001898:	4603      	mov	r3, r0
 800189a:	220c      	movs	r2, #12
 800189c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	e009      	b.n	80018b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <_sbrk+0x64>)
 80018b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	24080000 	.word	0x24080000
 80018c4:	00000400 	.word	0x00000400
 80018c8:	24000dd8 	.word	0x24000dd8
 80018cc:	24001bc8 	.word	0x24001bc8

080018d0 <Touchscreen_demo1>:
  * @brief  Touchscreen Demo1 : test touchscreen calibration and single touch in polling mode
  * @param  None
  * @retval None
  */
void Touchscreen_demo1(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
  uint16_t x1, y1;
  uint8_t state = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	75fb      	strb	r3, [r7, #23]
  uint32_t ts_status = BSP_ERROR_NONE;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
 80018de:	f107 0308 	add.w	r3, r7, #8
 80018e2:	4619      	mov	r1, r3
 80018e4:	2000      	movs	r0, #0
 80018e6:	f003 fce3 	bl	80052b0 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	4619      	mov	r1, r3
 80018ee:	2000      	movs	r0, #0
 80018f0:	f003 fd06 	bl	8005300 <BSP_LCD_GetYSize>
//  ButtonState = 0;

  hTS->Width = x_size;
 80018f4:	4b56      	ldr	r3, [pc, #344]	; (8001a50 <Touchscreen_demo1+0x180>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	601a      	str	r2, [r3, #0]
  hTS->Height = y_size;
 80018fc:	4b54      	ldr	r3, [pc, #336]	; (8001a50 <Touchscreen_demo1+0x180>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	605a      	str	r2, [r3, #4]
  hTS->Orientation = TS_SWAP_XY | TS_SWAP_Y;
 8001904:	4b52      	ldr	r3, [pc, #328]	; (8001a50 <Touchscreen_demo1+0x180>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	220c      	movs	r2, #12
 800190a:	609a      	str	r2, [r3, #8]
  hTS->Accuracy = 0;
 800190c:	4b50      	ldr	r3, [pc, #320]	; (8001a50 <Touchscreen_demo1+0x180>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2200      	movs	r2, #0
 8001912:	60da      	str	r2, [r3, #12]

  /* Touchscreen initialization */
  ts_status = BSP_TS_Init(0, hTS);
 8001914:	4b4e      	ldr	r3, [pc, #312]	; (8001a50 <Touchscreen_demo1+0x180>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	2000      	movs	r0, #0
 800191c:	f005 f946 	bl	8006bac <BSP_TS_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	613b      	str	r3, [r7, #16]

  if(ts_status == BSP_ERROR_NONE)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 808e 	bne.w	8001a48 <Touchscreen_demo1+0x178>
  {
    /* Display touch screen demo description */
    Touchscreen_SetHint_Demo(TOUCHSCREEN_DEMO_1);
 800192c:	2001      	movs	r0, #1
 800192e:	f000 f897 	bl	8001a60 <Touchscreen_SetHint_Demo>
    Touchscreen_DrawBackground_Circles(state);
 8001932:	7dfb      	ldrb	r3, [r7, #23]
 8001934:	4618      	mov	r0, r3
 8001936:	f000 f949 	bl	8001bcc <Touchscreen_DrawBackground_Circles>

    while (1)
    {
      /* Check in polling mode in touch screen the touch status and coordinates */
      /* of touches if touch occurred                                           */
      ts_status = BSP_TS_GetState(0, &TS_State);
 800193a:	4946      	ldr	r1, [pc, #280]	; (8001a54 <Touchscreen_demo1+0x184>)
 800193c:	2000      	movs	r0, #0
 800193e:	f005 f9f1 	bl	8006d24 <BSP_TS_GetState>
 8001942:	4603      	mov	r3, r0
 8001944:	613b      	str	r3, [r7, #16]
      if(TS_State.TouchDetected)
 8001946:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <Touchscreen_demo1+0x184>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d078      	beq.n	8001a40 <Touchscreen_demo1+0x170>
      {
        /* One or dual touch have been detected          */
        /* Only take into account the first touch so far */

        /* Get X and Y position of the first touch post calibrated */
        x1 = TS_State.TouchX;
 800194e:	4b41      	ldr	r3, [pc, #260]	; (8001a54 <Touchscreen_demo1+0x184>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	81fb      	strh	r3, [r7, #14]
        y1 = TS_State.TouchY;
 8001954:	4b3f      	ldr	r3, [pc, #252]	; (8001a54 <Touchscreen_demo1+0x184>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	81bb      	strh	r3, [r7, #12]

        if ((y1 > (CIRCLE_YPOS(1) - CIRCLE_RADIUS)) &&
 800195a:	89bb      	ldrh	r3, [r7, #12]
 800195c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8001960:	d96e      	bls.n	8001a40 <Touchscreen_demo1+0x170>
 8001962:	89bb      	ldrh	r3, [r7, #12]
 8001964:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001968:	d26a      	bcs.n	8001a40 <Touchscreen_demo1+0x170>
            (y1 < (CIRCLE_YPOS(1) + CIRCLE_RADIUS)))
        {
          if ((x1 > (CIRCLE_XPOS(1) - CIRCLE_RADIUS)) &&
 800196a:	89fb      	ldrh	r3, [r7, #14]
 800196c:	2b78      	cmp	r3, #120	; 0x78
 800196e:	d914      	bls.n	800199a <Touchscreen_demo1+0xca>
 8001970:	89fb      	ldrh	r3, [r7, #14]
 8001972:	2bc7      	cmp	r3, #199	; 0xc7
 8001974:	d811      	bhi.n	800199a <Touchscreen_demo1+0xca>
              (x1 < (CIRCLE_XPOS(1) + CIRCLE_RADIUS)))
          {
            if ((state & 1) == 0)
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10c      	bne.n	800199a <Touchscreen_demo1+0xca>
            {
              Touchscreen_DrawBackground_Circles(state);
 8001980:	7dfb      	ldrb	r3, [r7, #23]
 8001982:	4618      	mov	r0, r3
 8001984:	f000 f922 	bl	8001bcc <Touchscreen_DrawBackground_Circles>
              UTIL_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLUE);
 8001988:	4b33      	ldr	r3, [pc, #204]	; (8001a58 <Touchscreen_demo1+0x188>)
 800198a:	2228      	movs	r2, #40	; 0x28
 800198c:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001990:	20a0      	movs	r0, #160	; 0xa0
 8001992:	f00d fc05 	bl	800f1a0 <UTIL_LCD_FillCircle>
              state = 1;
 8001996:	2301      	movs	r3, #1
 8001998:	75fb      	strb	r3, [r7, #23]
            }
          }
          if ((x1 > (CIRCLE_XPOS(2) - CIRCLE_RADIUS)) &&
 800199a:	89fb      	ldrh	r3, [r7, #14]
 800199c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80019a0:	d916      	bls.n	80019d0 <Touchscreen_demo1+0x100>
 80019a2:	89fb      	ldrh	r3, [r7, #14]
 80019a4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80019a8:	d212      	bcs.n	80019d0 <Touchscreen_demo1+0x100>
              (x1 < (CIRCLE_XPOS(2) + CIRCLE_RADIUS)))
          {
            if ((state & 2) == 0)
 80019aa:	7dfb      	ldrb	r3, [r7, #23]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10d      	bne.n	80019d0 <Touchscreen_demo1+0x100>
            {
              Touchscreen_DrawBackground_Circles(state);
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f908 	bl	8001bcc <Touchscreen_DrawBackground_Circles>
              UTIL_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS, UTIL_LCD_COLOR_RED);
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <Touchscreen_demo1+0x18c>)
 80019be:	2228      	movs	r2, #40	; 0x28
 80019c0:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80019c4:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80019c8:	f00d fbea 	bl	800f1a0 <UTIL_LCD_FillCircle>
              state = 2;
 80019cc:	2302      	movs	r3, #2
 80019ce:	75fb      	strb	r3, [r7, #23]
            }
          }

          if ((x1 > (CIRCLE_XPOS(3) - CIRCLE_RADIUS)) &&
 80019d0:	89fb      	ldrh	r3, [r7, #14]
 80019d2:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 80019d6:	d917      	bls.n	8001a08 <Touchscreen_demo1+0x138>
 80019d8:	89fb      	ldrh	r3, [r7, #14]
 80019da:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80019de:	d213      	bcs.n	8001a08 <Touchscreen_demo1+0x138>
              (x1 < (CIRCLE_XPOS(3) + CIRCLE_RADIUS)))
          {
            if ((state & 4) == 0)
 80019e0:	7dfb      	ldrb	r3, [r7, #23]
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10e      	bne.n	8001a08 <Touchscreen_demo1+0x138>
            {
              Touchscreen_DrawBackground_Circles(state);
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f8ed 	bl	8001bcc <Touchscreen_DrawBackground_Circles>
              UTIL_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS, UTIL_LCD_COLOR_YELLOW);
 80019f2:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 80019f6:	2228      	movs	r2, #40	; 0x28
 80019f8:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80019fc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001a00:	f00d fbce 	bl	800f1a0 <UTIL_LCD_FillCircle>
              state = 4;
 8001a04:	2304      	movs	r3, #4
 8001a06:	75fb      	strb	r3, [r7, #23]
            }
          }

          if ((x1 > (CIRCLE_XPOS(4) - CIRCLE_RADIUS)) &&
 8001a08:	89fb      	ldrh	r3, [r7, #14]
 8001a0a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001a0e:	d917      	bls.n	8001a40 <Touchscreen_demo1+0x170>
 8001a10:	89fb      	ldrh	r3, [r7, #14]
 8001a12:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8001a16:	d213      	bcs.n	8001a40 <Touchscreen_demo1+0x170>
              (x1 < (CIRCLE_XPOS(4) + CIRCLE_RADIUS)))
          {
            if ((state & 8) == 0)
 8001a18:	7dfb      	ldrb	r3, [r7, #23]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10e      	bne.n	8001a40 <Touchscreen_demo1+0x170>
            {
              Touchscreen_DrawBackground_Circles(state);
 8001a22:	7dfb      	ldrb	r3, [r7, #23]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f8d1 	bl	8001bcc <Touchscreen_DrawBackground_Circles>
              UTIL_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS, UTIL_LCD_COLOR_GREEN);
 8001a2a:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
 8001a2e:	2228      	movs	r2, #40	; 0x28
 8001a30:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001a34:	f44f 7020 	mov.w	r0, #640	; 0x280
 8001a38:	f00d fbb2 	bl	800f1a0 <UTIL_LCD_FillCircle>
              state = 8;
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	75fb      	strb	r3, [r7, #23]
//
//        ButtonState = 0;
//        return;
//      }

      HAL_Delay(20);
 8001a40:	2014      	movs	r0, #20
 8001a42:	f005 fbdd 	bl	8007200 <HAL_Delay>
      ts_status = BSP_TS_GetState(0, &TS_State);
 8001a46:	e778      	b.n	800193a <Touchscreen_demo1+0x6a>
    }
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	24000de8 	.word	0x24000de8
 8001a54:	24000ddc 	.word	0x24000ddc
 8001a58:	ff0000ff 	.word	0xff0000ff
 8001a5c:	ffff0000 	.word	0xffff0000

08001a60 <Touchscreen_SetHint_Demo>:
  *         demoIndex in parameter.
  * @param  demoIndex : parameter of type @ref TouchScreenDemoTypeDef
  * @retval None
  */
static void Touchscreen_SetHint_Demo(TouchScreenDemoTypeDef demoIndex)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	4619      	mov	r1, r3
 8001a70:	2000      	movs	r0, #0
 8001a72:	f003 fc1d 	bl	80052b0 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f003 fc3f 	bl	8005300 <BSP_LCD_GetYSize>

  if(demoIndex <= TOUCHSCREEN_DEMO_MAX)
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	f200 8085 	bhi.w	8001b94 <Touchscreen_SetHint_Demo+0x134>
  {
    /* Clear the LCD */
    UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8001a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8e:	f00c ff27 	bl	800e8e0 <UTIL_LCD_Clear>

    /* Set Touchscreen Demo1 description */
    UTIL_LCD_FillRect(0, 0, x_size, 80, UTIL_LCD_COLOR_BLUE);
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	4b41      	ldr	r3, [pc, #260]	; (8001b9c <Touchscreen_SetHint_Demo+0x13c>)
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	2350      	movs	r3, #80	; 0x50
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f00d fb45 	bl	800f12c <UTIL_LCD_FillRect>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8001aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa6:	f00c fe13 	bl	800e6d0 <UTIL_LCD_SetTextColor>
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8001aaa:	483c      	ldr	r0, [pc, #240]	; (8001b9c <Touchscreen_SetHint_Demo+0x13c>)
 8001aac:	f00c fe24 	bl	800e6f8 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetFont(&Font24);
 8001ab0:	483b      	ldr	r0, [pc, #236]	; (8001ba0 <Touchscreen_SetHint_Demo+0x140>)
 8001ab2:	f00c fe35 	bl	800e720 <UTIL_LCD_SetFont>

    if(demoIndex == TOUCHSCREEN_DEMO_1)
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d11b      	bne.n	8001af4 <Touchscreen_SetHint_Demo+0x94>
    {
      UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"Touchscreen basic polling", CENTER_MODE);
 8001abc:	2301      	movs	r3, #1
 8001abe:	4a39      	ldr	r2, [pc, #228]	; (8001ba4 <Touchscreen_SetHint_Demo+0x144>)
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f00c ff58 	bl	800e978 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_SetFont(&Font12);
 8001ac8:	4837      	ldr	r0, [pc, #220]	; (8001ba8 <Touchscreen_SetHint_Demo+0x148>)
 8001aca:	f00c fe29 	bl	800e720 <UTIL_LCD_SetFont>
      UTIL_LCD_DisplayStringAt(0, 30, (uint8_t *)"Please use the Touchscreen to", CENTER_MODE);
 8001ace:	2301      	movs	r3, #1
 8001ad0:	4a36      	ldr	r2, [pc, #216]	; (8001bac <Touchscreen_SetHint_Demo+0x14c>)
 8001ad2:	211e      	movs	r1, #30
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f00c ff4f 	bl	800e978 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"activate the colored circle", CENTER_MODE);
 8001ada:	2301      	movs	r3, #1
 8001adc:	4a34      	ldr	r2, [pc, #208]	; (8001bb0 <Touchscreen_SetHint_Demo+0x150>)
 8001ade:	212d      	movs	r1, #45	; 0x2d
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f00c ff49 	bl	800e978 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(0, 60, (uint8_t *)"inside the rectangle. Then press User button", CENTER_MODE);
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	4a32      	ldr	r2, [pc, #200]	; (8001bb4 <Touchscreen_SetHint_Demo+0x154>)
 8001aea:	213c      	movs	r1, #60	; 0x3c
 8001aec:	2000      	movs	r0, #0
 8001aee:	f00c ff43 	bl	800e978 <UTIL_LCD_DisplayStringAt>
 8001af2:	e039      	b.n	8001b68 <Touchscreen_SetHint_Demo+0x108>
    }
    else if (demoIndex == TOUCHSCREEN_DEMO_2)
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d11b      	bne.n	8001b32 <Touchscreen_SetHint_Demo+0xd2>
    {
      UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"Touchscreen dual touch polling", CENTER_MODE);
 8001afa:	2301      	movs	r3, #1
 8001afc:	4a2e      	ldr	r2, [pc, #184]	; (8001bb8 <Touchscreen_SetHint_Demo+0x158>)
 8001afe:	2100      	movs	r1, #0
 8001b00:	2000      	movs	r0, #0
 8001b02:	f00c ff39 	bl	800e978 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_SetFont(&Font12);
 8001b06:	4828      	ldr	r0, [pc, #160]	; (8001ba8 <Touchscreen_SetHint_Demo+0x148>)
 8001b08:	f00c fe0a 	bl	800e720 <UTIL_LCD_SetFont>
      UTIL_LCD_DisplayStringAt(0, 30, (uint8_t *)"Please press the Touchscreen to", CENTER_MODE);
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	4a2b      	ldr	r2, [pc, #172]	; (8001bbc <Touchscreen_SetHint_Demo+0x15c>)
 8001b10:	211e      	movs	r1, #30
 8001b12:	2000      	movs	r0, #0
 8001b14:	f00c ff30 	bl	800e978 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"activate single and", CENTER_MODE);
 8001b18:	2301      	movs	r3, #1
 8001b1a:	4a29      	ldr	r2, [pc, #164]	; (8001bc0 <Touchscreen_SetHint_Demo+0x160>)
 8001b1c:	212d      	movs	r1, #45	; 0x2d
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f00c ff2a 	bl	800e978 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(0, 60, (uint8_t *)"dual touch", CENTER_MODE);
 8001b24:	2301      	movs	r3, #1
 8001b26:	4a27      	ldr	r2, [pc, #156]	; (8001bc4 <Touchscreen_SetHint_Demo+0x164>)
 8001b28:	213c      	movs	r1, #60	; 0x3c
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f00c ff24 	bl	800e978 <UTIL_LCD_DisplayStringAt>
 8001b30:	e01a      	b.n	8001b68 <Touchscreen_SetHint_Demo+0x108>

    }
    else /* demoIndex == TOUCHSCREEN_DEMO_3 */
    {
      UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"Touchscreen dual touch interrupt", CENTER_MODE);
 8001b32:	2301      	movs	r3, #1
 8001b34:	4a24      	ldr	r2, [pc, #144]	; (8001bc8 <Touchscreen_SetHint_Demo+0x168>)
 8001b36:	2100      	movs	r1, #0
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f00c ff1d 	bl	800e978 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_SetFont(&Font12);
 8001b3e:	481a      	ldr	r0, [pc, #104]	; (8001ba8 <Touchscreen_SetHint_Demo+0x148>)
 8001b40:	f00c fdee 	bl	800e720 <UTIL_LCD_SetFont>
      UTIL_LCD_DisplayStringAt(0, 30, (uint8_t *)"Please press the Touchscreen to", CENTER_MODE);
 8001b44:	2301      	movs	r3, #1
 8001b46:	4a1d      	ldr	r2, [pc, #116]	; (8001bbc <Touchscreen_SetHint_Demo+0x15c>)
 8001b48:	211e      	movs	r1, #30
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f00c ff14 	bl	800e978 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"activate single and", CENTER_MODE);
 8001b50:	2301      	movs	r3, #1
 8001b52:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <Touchscreen_SetHint_Demo+0x160>)
 8001b54:	212d      	movs	r1, #45	; 0x2d
 8001b56:	2000      	movs	r0, #0
 8001b58:	f00c ff0e 	bl	800e978 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(0, 60, (uint8_t *)"dual touch", CENTER_MODE);
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	4a19      	ldr	r2, [pc, #100]	; (8001bc4 <Touchscreen_SetHint_Demo+0x164>)
 8001b60:	213c      	movs	r1, #60	; 0x3c
 8001b62:	2000      	movs	r0, #0
 8001b64:	f00c ff08 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    }

    UTIL_LCD_DrawRect(10, 90, x_size - 20, y_size - 100, UTIL_LCD_COLOR_BLUE);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f1a3 0214 	sub.w	r2, r3, #20
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	3b64      	subs	r3, #100	; 0x64
 8001b72:	490a      	ldr	r1, [pc, #40]	; (8001b9c <Touchscreen_SetHint_Demo+0x13c>)
 8001b74:	9100      	str	r1, [sp, #0]
 8001b76:	215a      	movs	r1, #90	; 0x5a
 8001b78:	200a      	movs	r0, #10
 8001b7a:	f00d f867 	bl	800ec4c <UTIL_LCD_DrawRect>
    UTIL_LCD_DrawRect(11, 91, x_size - 22, y_size - 102, UTIL_LCD_COLOR_BLUE);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f1a3 0216 	sub.w	r2, r3, #22
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	3b66      	subs	r3, #102	; 0x66
 8001b88:	4904      	ldr	r1, [pc, #16]	; (8001b9c <Touchscreen_SetHint_Demo+0x13c>)
 8001b8a:	9100      	str	r1, [sp, #0]
 8001b8c:	215b      	movs	r1, #91	; 0x5b
 8001b8e:	200b      	movs	r0, #11
 8001b90:	f00d f85c 	bl	800ec4c <UTIL_LCD_DrawRect>

  } /* of if(demoIndex <= TOUCHSCREEN_DEMO_MAX) */
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	ff0000ff 	.word	0xff0000ff
 8001ba0:	240000a8 	.word	0x240000a8
 8001ba4:	08010aec 	.word	0x08010aec
 8001ba8:	240000c0 	.word	0x240000c0
 8001bac:	08010b08 	.word	0x08010b08
 8001bb0:	08010b28 	.word	0x08010b28
 8001bb4:	08010b44 	.word	0x08010b44
 8001bb8:	08010b74 	.word	0x08010b74
 8001bbc:	08010b94 	.word	0x08010b94
 8001bc0:	08010bb4 	.word	0x08010bb4
 8001bc4:	08010bc8 	.word	0x08010bc8
 8001bc8:	08010bd4 	.word	0x08010bd4

08001bcc <Touchscreen_DrawBackground_Circles>:
  * @brief  Draw Touchscreen Background
  * @param  state : touch zone state
  * @retval None
  */
void Touchscreen_DrawBackground_Circles(uint8_t state)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
  uint16_t x, y;
  switch (state)
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	f200 81c1 	bhi.w	8001f60 <Touchscreen_DrawBackground_Circles+0x394>
 8001bde:	a201      	add	r2, pc, #4	; (adr r2, 8001be4 <Touchscreen_DrawBackground_Circles+0x18>)
 8001be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be4:	08001c69 	.word	0x08001c69
 8001be8:	08001cf3 	.word	0x08001cf3
 8001bec:	08001d13 	.word	0x08001d13
 8001bf0:	08001f61 	.word	0x08001f61
 8001bf4:	08001d37 	.word	0x08001d37
 8001bf8:	08001f61 	.word	0x08001f61
 8001bfc:	08001f61 	.word	0x08001f61
 8001c00:	08001f61 	.word	0x08001f61
 8001c04:	08001d5d 	.word	0x08001d5d
 8001c08:	08001f61 	.word	0x08001f61
 8001c0c:	08001f61 	.word	0x08001f61
 8001c10:	08001f61 	.word	0x08001f61
 8001c14:	08001f61 	.word	0x08001f61
 8001c18:	08001f61 	.word	0x08001f61
 8001c1c:	08001f61 	.word	0x08001f61
 8001c20:	08001f61 	.word	0x08001f61
 8001c24:	08001d83 	.word	0x08001d83
 8001c28:	08001f61 	.word	0x08001f61
 8001c2c:	08001f61 	.word	0x08001f61
 8001c30:	08001f61 	.word	0x08001f61
 8001c34:	08001f61 	.word	0x08001f61
 8001c38:	08001f61 	.word	0x08001f61
 8001c3c:	08001f61 	.word	0x08001f61
 8001c40:	08001f61 	.word	0x08001f61
 8001c44:	08001f61 	.word	0x08001f61
 8001c48:	08001f61 	.word	0x08001f61
 8001c4c:	08001f61 	.word	0x08001f61
 8001c50:	08001f61 	.word	0x08001f61
 8001c54:	08001f61 	.word	0x08001f61
 8001c58:	08001f61 	.word	0x08001f61
 8001c5c:	08001f61 	.word	0x08001f61
 8001c60:	08001f61 	.word	0x08001f61
 8001c64:	08001eb9 	.word	0x08001eb9
  {
  case 0:
    UTIL_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLUE);
 8001c68:	4bbf      	ldr	r3, [pc, #764]	; (8001f68 <Touchscreen_DrawBackground_Circles+0x39c>)
 8001c6a:	2228      	movs	r2, #40	; 0x28
 8001c6c:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001c70:	20a0      	movs	r0, #160	; 0xa0
 8001c72:	f00d fa95 	bl	800f1a0 <UTIL_LCD_FillCircle>

    UTIL_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS, UTIL_LCD_COLOR_RED);
 8001c76:	4bbd      	ldr	r3, [pc, #756]	; (8001f6c <Touchscreen_DrawBackground_Circles+0x3a0>)
 8001c78:	2228      	movs	r2, #40	; 0x28
 8001c7a:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001c7e:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001c82:	f00d fa8d 	bl	800f1a0 <UTIL_LCD_FillCircle>

    UTIL_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS, UTIL_LCD_COLOR_YELLOW);
 8001c86:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8001c8a:	2228      	movs	r2, #40	; 0x28
 8001c8c:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001c90:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001c94:	f00d fa84 	bl	800f1a0 <UTIL_LCD_FillCircle>


    UTIL_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS, UTIL_LCD_COLOR_GREEN);
 8001c98:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
 8001c9c:	2228      	movs	r2, #40	; 0x28
 8001c9e:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001ca2:	f44f 7020 	mov.w	r0, #640	; 0x280
 8001ca6:	f00d fa7b 	bl	800f1a0 <UTIL_LCD_FillCircle>

    UTIL_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cae:	2226      	movs	r2, #38	; 0x26
 8001cb0:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001cb4:	20a0      	movs	r0, #160	; 0xa0
 8001cb6:	f00d fa73 	bl	800f1a0 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	2226      	movs	r2, #38	; 0x26
 8001cc0:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001cc4:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001cc8:	f00d fa6a 	bl	800f1a0 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 8001ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd0:	2226      	movs	r2, #38	; 0x26
 8001cd2:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001cd6:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001cda:	f00d fa61 	bl	800f1a0 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce2:	2226      	movs	r2, #38	; 0x26
 8001ce4:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001ce8:	f44f 7020 	mov.w	r0, #640	; 0x280
 8001cec:	f00d fa58 	bl	800f1a0 <UTIL_LCD_FillCircle>
    break;
 8001cf0:	e136      	b.n	8001f60 <Touchscreen_DrawBackground_Circles+0x394>

  case 1:
    UTIL_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLUE);
 8001cf2:	4b9d      	ldr	r3, [pc, #628]	; (8001f68 <Touchscreen_DrawBackground_Circles+0x39c>)
 8001cf4:	2228      	movs	r2, #40	; 0x28
 8001cf6:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001cfa:	20a0      	movs	r0, #160	; 0xa0
 8001cfc:	f00d fa50 	bl	800f1a0 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295
 8001d04:	2226      	movs	r2, #38	; 0x26
 8001d06:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001d0a:	20a0      	movs	r0, #160	; 0xa0
 8001d0c:	f00d fa48 	bl	800f1a0 <UTIL_LCD_FillCircle>
    break;
 8001d10:	e126      	b.n	8001f60 <Touchscreen_DrawBackground_Circles+0x394>

  case 2:
    UTIL_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS, UTIL_LCD_COLOR_RED);
 8001d12:	4b96      	ldr	r3, [pc, #600]	; (8001f6c <Touchscreen_DrawBackground_Circles+0x3a0>)
 8001d14:	2228      	movs	r2, #40	; 0x28
 8001d16:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001d1a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001d1e:	f00d fa3f 	bl	800f1a0 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
 8001d26:	2226      	movs	r2, #38	; 0x26
 8001d28:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001d2c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001d30:	f00d fa36 	bl	800f1a0 <UTIL_LCD_FillCircle>
    break;
 8001d34:	e114      	b.n	8001f60 <Touchscreen_DrawBackground_Circles+0x394>

  case 4:
    UTIL_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS, UTIL_LCD_COLOR_YELLOW);
 8001d36:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8001d3a:	2228      	movs	r2, #40	; 0x28
 8001d3c:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001d40:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001d44:	f00d fa2c 	bl	800f1a0 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4c:	2226      	movs	r2, #38	; 0x26
 8001d4e:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001d52:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001d56:	f00d fa23 	bl	800f1a0 <UTIL_LCD_FillCircle>
    break;
 8001d5a:	e101      	b.n	8001f60 <Touchscreen_DrawBackground_Circles+0x394>

  case 8:
    UTIL_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS, UTIL_LCD_COLOR_GREEN);
 8001d5c:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
 8001d60:	2228      	movs	r2, #40	; 0x28
 8001d62:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001d66:	f44f 7020 	mov.w	r0, #640	; 0x280
 8001d6a:	f00d fa19 	bl	800f1a0 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d72:	2226      	movs	r2, #38	; 0x26
 8001d74:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001d78:	f44f 7020 	mov.w	r0, #640	; 0x280
 8001d7c:	f00d fa10 	bl	800f1a0 <UTIL_LCD_FillCircle>
    break;
 8001d80:	e0ee      	b.n	8001f60 <Touchscreen_DrawBackground_Circles+0x394>

  case 16:
    UTIL_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLUE);
 8001d82:	4b79      	ldr	r3, [pc, #484]	; (8001f68 <Touchscreen_DrawBackground_Circles+0x39c>)
 8001d84:	2228      	movs	r2, #40	; 0x28
 8001d86:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001d8a:	20a0      	movs	r0, #160	; 0xa0
 8001d8c:	f00d fa08 	bl	800f1a0 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLUE);
 8001d90:	4b75      	ldr	r3, [pc, #468]	; (8001f68 <Touchscreen_DrawBackground_Circles+0x39c>)
 8001d92:	2228      	movs	r2, #40	; 0x28
 8001d94:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001d98:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001d9c:	f00d fa00 	bl	800f1a0 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLUE);
 8001da0:	4b71      	ldr	r3, [pc, #452]	; (8001f68 <Touchscreen_DrawBackground_Circles+0x39c>)
 8001da2:	2228      	movs	r2, #40	; 0x28
 8001da4:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001da8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001dac:	f00d f9f8 	bl	800f1a0 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLUE);
 8001db0:	4b6d      	ldr	r3, [pc, #436]	; (8001f68 <Touchscreen_DrawBackground_Circles+0x39c>)
 8001db2:	2228      	movs	r2, #40	; 0x28
 8001db4:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001db8:	f44f 7020 	mov.w	r0, #640	; 0x280
 8001dbc:	f00d f9f0 	bl	800f1a0 <UTIL_LCD_FillCircle>

    UTIL_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 8001dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc4:	2226      	movs	r2, #38	; 0x26
 8001dc6:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001dca:	20a0      	movs	r0, #160	; 0xa0
 8001dcc:	f00d f9e8 	bl	800f1a0 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd4:	2226      	movs	r2, #38	; 0x26
 8001dd6:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001dda:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001dde:	f00d f9df 	bl	800f1a0 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295
 8001de6:	2226      	movs	r2, #38	; 0x26
 8001de8:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001dec:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001df0:	f00d f9d6 	bl	800f1a0 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295
 8001df8:	2226      	movs	r2, #38	; 0x26
 8001dfa:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001dfe:	f44f 7020 	mov.w	r0, #640	; 0x280
 8001e02:	f00d f9cd 	bl	800f1a0 <UTIL_LCD_FillCircle>

    UTIL_LCD_DrawHLine(CIRCLE_XPOS(1)-LINE_LENGHT, CIRCLE_YPOS(1), 2*LINE_LENGHT, UTIL_LCD_COLOR_BLUE);
 8001e06:	4b58      	ldr	r3, [pc, #352]	; (8001f68 <Touchscreen_DrawBackground_Circles+0x39c>)
 8001e08:	223c      	movs	r2, #60	; 0x3c
 8001e0a:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001e0e:	2082      	movs	r0, #130	; 0x82
 8001e10:	f00c fcc6 	bl	800e7a0 <UTIL_LCD_DrawHLine>
    UTIL_LCD_DrawHLine(CIRCLE_XPOS(2)-LINE_LENGHT, CIRCLE_YPOS(2), 2*LINE_LENGHT, UTIL_LCD_COLOR_BLUE);
 8001e14:	4b54      	ldr	r3, [pc, #336]	; (8001f68 <Touchscreen_DrawBackground_Circles+0x39c>)
 8001e16:	223c      	movs	r2, #60	; 0x3c
 8001e18:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001e1c:	f44f 7091 	mov.w	r0, #290	; 0x122
 8001e20:	f00c fcbe 	bl	800e7a0 <UTIL_LCD_DrawHLine>
    UTIL_LCD_DrawVLine(CIRCLE_XPOS(2), CIRCLE_YPOS(2)-LINE_LENGHT, 2*LINE_LENGHT, UTIL_LCD_COLOR_BLUE);
 8001e24:	4b50      	ldr	r3, [pc, #320]	; (8001f68 <Touchscreen_DrawBackground_Circles+0x39c>)
 8001e26:	223c      	movs	r2, #60	; 0x3c
 8001e28:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001e2c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001e30:	f00c fcec 	bl	800e80c <UTIL_LCD_DrawVLine>
    UTIL_LCD_DrawHLine(CIRCLE_XPOS(3)-LINE_LENGHT, CIRCLE_YPOS(3), 2*LINE_LENGHT, UTIL_LCD_COLOR_BLUE);
 8001e34:	4b4c      	ldr	r3, [pc, #304]	; (8001f68 <Touchscreen_DrawBackground_Circles+0x39c>)
 8001e36:	223c      	movs	r2, #60	; 0x3c
 8001e38:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001e3c:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001e40:	f00c fcae 	bl	800e7a0 <UTIL_LCD_DrawHLine>
    UTIL_LCD_DrawHLine(CIRCLE_XPOS(4)-LINE_LENGHT, CIRCLE_YPOS(4), 2*LINE_LENGHT, UTIL_LCD_COLOR_BLUE);
 8001e44:	4b48      	ldr	r3, [pc, #288]	; (8001f68 <Touchscreen_DrawBackground_Circles+0x39c>)
 8001e46:	223c      	movs	r2, #60	; 0x3c
 8001e48:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001e4c:	f240 2062 	movw	r0, #610	; 0x262
 8001e50:	f00c fca6 	bl	800e7a0 <UTIL_LCD_DrawHLine>
    UTIL_LCD_DrawVLine(CIRCLE_XPOS(4), CIRCLE_YPOS(4)-LINE_LENGHT, 2*LINE_LENGHT, UTIL_LCD_COLOR_BLUE);
 8001e54:	4b44      	ldr	r3, [pc, #272]	; (8001f68 <Touchscreen_DrawBackground_Circles+0x39c>)
 8001e56:	223c      	movs	r2, #60	; 0x3c
 8001e58:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001e5c:	f44f 7020 	mov.w	r0, #640	; 0x280
 8001e60:	f00c fcd4 	bl	800e80c <UTIL_LCD_DrawVLine>

    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 8001e64:	4840      	ldr	r0, [pc, #256]	; (8001f68 <Touchscreen_DrawBackground_Circles+0x39c>)
 8001e66:	f00c fc33 	bl	800e6d0 <UTIL_LCD_SetTextColor>
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8001e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6e:	f00c fc43 	bl	800e6f8 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetFont(&Font24);
 8001e72:	483f      	ldr	r0, [pc, #252]	; (8001f70 <Touchscreen_DrawBackground_Circles+0x3a4>)
 8001e74:	f00c fc54 	bl	800e720 <UTIL_LCD_SetFont>
    x = CIRCLE_XPOS(1);
 8001e78:	23a0      	movs	r3, #160	; 0xa0
 8001e7a:	81fb      	strh	r3, [r7, #14]
    y = CIRCLE_YPOS(1) - CIRCLE_RADIUS - UTIL_LCD_GetFont()->Height;
 8001e7c:	f00c fc64 	bl	800e748 <UTIL_LCD_GetFont>
 8001e80:	4603      	mov	r3, r0
 8001e82:	88db      	ldrh	r3, [r3, #6]
 8001e84:	f5c3 73aa 	rsb	r3, r3, #340	; 0x154
 8001e88:	81bb      	strh	r3, [r7, #12]
    UTIL_LCD_DisplayStringAt(x, y, (uint8_t *)"Volume", CENTER_MODE);
 8001e8a:	89f8      	ldrh	r0, [r7, #14]
 8001e8c:	89b9      	ldrh	r1, [r7, #12]
 8001e8e:	2301      	movs	r3, #1
 8001e90:	4a38      	ldr	r2, [pc, #224]	; (8001f74 <Touchscreen_DrawBackground_Circles+0x3a8>)
 8001e92:	f00c fd71 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    x = CIRCLE_XPOS(4);
 8001e96:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001e9a:	81fb      	strh	r3, [r7, #14]
    y = CIRCLE_YPOS(4) - CIRCLE_RADIUS - UTIL_LCD_GetFont()->Height;
 8001e9c:	f00c fc54 	bl	800e748 <UTIL_LCD_GetFont>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	88db      	ldrh	r3, [r3, #6]
 8001ea4:	f5c3 73aa 	rsb	r3, r3, #340	; 0x154
 8001ea8:	81bb      	strh	r3, [r7, #12]
    UTIL_LCD_DisplayStringAt(x, y, (uint8_t *)"Frequency", CENTER_MODE);
 8001eaa:	89f8      	ldrh	r0, [r7, #14]
 8001eac:	89b9      	ldrh	r1, [r7, #12]
 8001eae:	2301      	movs	r3, #1
 8001eb0:	4a31      	ldr	r2, [pc, #196]	; (8001f78 <Touchscreen_DrawBackground_Circles+0x3ac>)
 8001eb2:	f00c fd61 	bl	800e978 <UTIL_LCD_DisplayStringAt>

    break;
 8001eb6:	e053      	b.n	8001f60 <Touchscreen_DrawBackground_Circles+0x394>

  case 32:
    UTIL_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLACK);
 8001eb8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001ebc:	2228      	movs	r2, #40	; 0x28
 8001ebe:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001ec2:	20a0      	movs	r0, #160	; 0xa0
 8001ec4:	f00d f96c 	bl	800f1a0 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLACK);
 8001ec8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001ecc:	2228      	movs	r2, #40	; 0x28
 8001ece:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001ed2:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001ed6:	f00d f963 	bl	800f1a0 <UTIL_LCD_FillCircle>

    UTIL_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
 8001ede:	2226      	movs	r2, #38	; 0x26
 8001ee0:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001ee4:	20a0      	movs	r0, #160	; 0xa0
 8001ee6:	f00d f95b 	bl	800f1a0 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	2226      	movs	r2, #38	; 0x26
 8001ef0:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001ef4:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001ef8:	f00d f952 	bl	800f1a0 <UTIL_LCD_FillCircle>


    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8001efc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001f00:	f00c fbe6 	bl	800e6d0 <UTIL_LCD_SetTextColor>
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	f00c fbf6 	bl	800e6f8 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetFont(&Font20);
 8001f0c:	481b      	ldr	r0, [pc, #108]	; (8001f7c <Touchscreen_DrawBackground_Circles+0x3b0>)
 8001f0e:	f00c fc07 	bl	800e720 <UTIL_LCD_SetFont>
    x = CIRCLE_XPOS(1) - 10;
 8001f12:	2396      	movs	r3, #150	; 0x96
 8001f14:	81fb      	strh	r3, [r7, #14]
    y = CIRCLE_YPOS(1) - (UTIL_LCD_GetFont()->Height)/2;
 8001f16:	f00c fc17 	bl	800e748 <UTIL_LCD_GetFont>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	88db      	ldrh	r3, [r3, #6]
 8001f1e:	085b      	lsrs	r3, r3, #1
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8001f26:	81bb      	strh	r3, [r7, #12]
    UTIL_LCD_DisplayStringAt(x, y, (uint8_t *)"Up", LEFT_MODE);
 8001f28:	89f8      	ldrh	r0, [r7, #14]
 8001f2a:	89b9      	ldrh	r1, [r7, #12]
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <Touchscreen_DrawBackground_Circles+0x3b4>)
 8001f30:	f00c fd22 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    x = CIRCLE_XPOS(2) - 10;
 8001f34:	f44f 739b 	mov.w	r3, #310	; 0x136
 8001f38:	81fb      	strh	r3, [r7, #14]
    y = CIRCLE_YPOS(3)  - (UTIL_LCD_GetFont()->Height)/2;
 8001f3a:	f00c fc05 	bl	800e748 <UTIL_LCD_GetFont>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	88db      	ldrh	r3, [r3, #6]
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8001f4a:	81bb      	strh	r3, [r7, #12]
    UTIL_LCD_DisplayStringAt(x, y, (uint8_t *)"Dw", LEFT_MODE);
 8001f4c:	89f8      	ldrh	r0, [r7, #14]
 8001f4e:	89b9      	ldrh	r1, [r7, #12]
 8001f50:	2303      	movs	r3, #3
 8001f52:	4a0c      	ldr	r2, [pc, #48]	; (8001f84 <Touchscreen_DrawBackground_Circles+0x3b8>)
 8001f54:	f00c fd10 	bl	800e978 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_SetFont(&Font12);
 8001f58:	480b      	ldr	r0, [pc, #44]	; (8001f88 <Touchscreen_DrawBackground_Circles+0x3bc>)
 8001f5a:	f00c fbe1 	bl	800e720 <UTIL_LCD_SetFont>

    break;
 8001f5e:	bf00      	nop
  }
}
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	ff0000ff 	.word	0xff0000ff
 8001f6c:	ffff0000 	.word	0xffff0000
 8001f70:	240000a8 	.word	0x240000a8
 8001f74:	08010bf8 	.word	0x08010bf8
 8001f78:	08010c00 	.word	0x08010c00
 8001f7c:	240000b0 	.word	0x240000b0
 8001f80:	08010c0c 	.word	0x08010c0c
 8001f84:	08010c10 	.word	0x08010c10
 8001f88:	240000c0 	.word	0x240000c0

08001f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f90:	f7fe fb78 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f94:	480c      	ldr	r0, [pc, #48]	; (8001fc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f96:	490d      	ldr	r1, [pc, #52]	; (8001fcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f98:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f9c:	e002      	b.n	8001fa4 <LoopCopyDataInit>

08001f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa2:	3304      	adds	r3, #4

08001fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa8:	d3f9      	bcc.n	8001f9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fac:	4c0a      	ldr	r4, [pc, #40]	; (8001fd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb0:	e001      	b.n	8001fb6 <LoopFillZerobss>

08001fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb4:	3204      	adds	r2, #4

08001fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb8:	d3fb      	bcc.n	8001fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fba:	f00d fd99 	bl	800faf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fbe:	f7fe fbf7 	bl	80007b0 <main>
  bx  lr
 8001fc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fc4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001fc8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001fcc:	2400012c 	.word	0x2400012c
  ldr r2, =_sidata
 8001fd0:	08016c8c 	.word	0x08016c8c
  ldr r2, =_sbss
 8001fd4:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 8001fd8:	24001bc4 	.word	0x24001bc4

08001fdc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fdc:	e7fe      	b.n	8001fdc <ADC3_IRQHandler>
	...

08001fe0 <FT6X06_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT6X06_RegisterBusIO (FT6X06_Object_t *pObj, FT6X06_IO_t *pIO)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d103      	bne.n	8001ff8 <FT6X06_RegisterBusIO+0x18>
  {
    ret = FT6X06_ERROR;
 8001ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	e02c      	b.n	8002052 <FT6X06_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	891a      	ldrh	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a0c      	ldr	r2, [pc, #48]	; (800205c <FT6X06_RegisterBusIO+0x7c>)
 800202c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <FT6X06_RegisterBusIO+0x80>)
 8002032:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d004      	beq.n	800204c <FT6X06_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4798      	blx	r3
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	e002      	b.n	8002052 <FT6X06_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT6X06_ERROR;
 800204c:	f04f 33ff 	mov.w	r3, #4294967295
 8002050:	60fb      	str	r3, [r7, #12]
    }
  }    
  
  return ret;
 8002052:	68fb      	ldr	r3, [r7, #12]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	080023f3 	.word	0x080023f3
 8002060:	08002427 	.word	0x08002427

08002064 <FT6X06_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT6X06 sensor capabilities
  * @retval Component status
  */
int32_t FT6X06_GetCapabilities(FT6X06_Object_t *pObj, FT6X06_Capabilities_t *Capabilities)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2200      	movs	r2, #0
 8002078:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	2202      	movs	r2, #2
 800207e:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002086:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800208e:	609a      	str	r2, [r3, #8]
  
  return FT6X06_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <FT6X06_Init>:
  *         from MCU to FT6X06 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_Init(FT6X06_Object_t *pObj)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  int32_t ret = FT6X06_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
  
  if(pObj->IsInitialized == 0U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10d      	bne.n	80020d0 <FT6X06_Init+0x32>
  {    
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT6X06_TS_Calibration(pObj);
#endif /* (FT6X06_AUTO_CALIBRATION_ENABLED == 1) */    
    /* By default set FT6X06 IC in Polling mode : no INT generation on FT6X06 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT6X06_DisableIT(pObj);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f954 	bl	8002368 <FT6X06_DisableIT>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4413      	add	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
    
    pObj->IsInitialized = 1;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  if(ret != FT6X06_OK)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <FT6X06_Init+0x3e>
  {
    ret = FT6X06_ERROR;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
 80020da:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80020dc:	68fb      	ldr	r3, [r7, #12]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <FT6X06_DeInit>:
  *         from MCU to FT6X06 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  if(pObj->IsInitialized == 1U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d103      	bne.n	8002100 <FT6X06_DeInit+0x1a>
  {
    pObj->IsInitialized = 0;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  return FT6X06_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <FT6X06_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval Component status
  */
int32_t FT6X06_GestureConfig(FT6X06_Object_t *pObj, FT6X06_Gesture_Init_t *GestureInit)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f103 0218 	add.w	r2, r3, #24
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	4619      	mov	r1, r3
 8002126:	4610      	mov	r0, r2
 8002128:	f000 f9f4 	bl	8002514 <ft6x06_radian_value>
 800212c:	60f8      	str	r0, [r7, #12]
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f103 0218 	add.w	r2, r3, #24
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	4619      	mov	r1, r3
 800213c:	4610      	mov	r0, r2
 800213e:	f000 f9fa 	bl	8002536 <ft6x06_offset_left_right>
 8002142:	4602      	mov	r2, r0
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4413      	add	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f103 0218 	add.w	r2, r3, #24
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	4619      	mov	r1, r3
 8002158:	4610      	mov	r0, r2
 800215a:	f000 f9fd 	bl	8002558 <ft6x06_offset_up_down>
 800215e:	4602      	mov	r2, r0
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4413      	add	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f103 0218 	add.w	r2, r3, #24
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	4619      	mov	r1, r3
 8002174:	4610      	mov	r0, r2
 8002176:	f000 fa00 	bl	800257a <ft6x06_disatnce_left_right>
 800217a:	4602      	mov	r2, r0
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4413      	add	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f103 0218 	add.w	r2, r3, #24
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	4619      	mov	r1, r3
 8002190:	4610      	mov	r0, r2
 8002192:	f000 fa03 	bl	800259c <ft6x06_distance_up_down>
 8002196:	4602      	mov	r2, r0
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4413      	add	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f103 0218 	add.w	r2, r3, #24
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	4619      	mov	r1, r3
 80021ac:	4610      	mov	r0, r2
 80021ae:	f000 fa06 	bl	80025be <ft6x06_distance_zoom>
 80021b2:	4602      	mov	r2, r0
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4413      	add	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  
  if(ret != FT6X06_OK)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <FT6X06_GestureConfig+0xb8>
  {
    ret = FT6X06_ERROR;
 80021c0:	f04f 33ff 	mov.w	r3, #4294967295
 80021c4:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;   
 80021c6:	68fb      	ldr	r3, [r7, #12]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <FT6X06_ReadID>:
  * @param  pObj Component object pointer
  * @param  Id Pointer to component's ID
  * @retval Component status
  */
int32_t FT6X06_ReadID(FT6X06_Object_t *pObj, uint32_t *Id)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ft6x06_id;

  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3318      	adds	r3, #24
 80021de:	f107 020b 	add.w	r2, r7, #11
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 fa0c 	bl	8002602 <ft6x06_chip_id>
 80021ea:	60f8      	str	r0, [r7, #12]
  *Id = (uint32_t) ft6x06_id;
 80021ec:	7afb      	ldrb	r3, [r7, #11]
 80021ee:	461a      	mov	r2, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	601a      	str	r2, [r3, #0]

  return ret;
 80021f4:	68fb      	ldr	r3, [r7, #12]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <FT6X06_GetState>:
  * @param  pObj Component object pointer
  * @param  State Single Touch structure pointer
  * @retval Component status.
  */
int32_t FT6X06_GetState(FT6X06_Object_t *pObj, FT6X06_State_t *State)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	6039      	str	r1, [r7, #0]
  int32_t ret = FT6X06_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];
  
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f8d0 	bl	80023b2 <FT6X06_DetectTouch>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	601a      	str	r2, [r3, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f103 0018 	add.w	r0, r3, #24
 8002220:	f107 0208 	add.w	r2, r7, #8
 8002224:	2304      	movs	r3, #4
 8002226:	2103      	movs	r1, #3
 8002228:	f000 f917 	bl	800245a <ft6x06_read_reg>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <FT6X06_GetState+0x3c>
  {
    ret = FT6X06_ERROR;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	e00f      	b.n	800225a <FT6X06_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800223a:	7a3b      	ldrb	r3, [r7, #8]
 800223c:	021b      	lsls	r3, r3, #8
 800223e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002242:	7a7a      	ldrb	r2, [r7, #9]
 8002244:	431a      	orrs	r2, r3
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800224a:	7abb      	ldrb	r3, [r7, #10]
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002252:	7afa      	ldrb	r2, [r7, #11]
 8002254:	431a      	orrs	r2, r3
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	609a      	str	r2, [r3, #8]
  }
  
  return ret;
 800225a:	68fb      	ldr	r3, [r7, #12]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <FT6X06_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval Component status.
  */
int32_t FT6X06_GetMultiTouchState(FT6X06_Object_t *pObj, FT6X06_MultiTouch_State_t *State)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  int32_t ret = FT6X06_OK;  
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
  uint8_t  data[12];
  
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f89d 	bl	80023b2 <FT6X06_DetectTouch>
 8002278:	4603      	mov	r3, r0
 800227a:	461a      	mov	r2, r3
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	601a      	str	r2, [r3, #0]
  
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f103 0018 	add.w	r0, r3, #24
 8002286:	f107 0208 	add.w	r2, r7, #8
 800228a:	230c      	movs	r3, #12
 800228c:	2103      	movs	r1, #3
 800228e:	f000 f8e4 	bl	800245a <ft6x06_read_reg>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <FT6X06_GetMultiTouchState+0x3c>
  {
    ret = FT6X06_ERROR;
 8002298:	f04f 33ff 	mov.w	r3, #4294967295
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	e03f      	b.n	8002320 <FT6X06_GetMultiTouchState+0xbc>
  }
  else
  {  
    /* Send back first ready X position to caller */
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80022a0:	7a3b      	ldrb	r3, [r7, #8]
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80022a8:	7a7a      	ldrb	r2, [r7, #9]
 80022aa:	431a      	orrs	r2, r3
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80022b0:	7abb      	ldrb	r3, [r7, #10]
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80022b8:	7afa      	ldrb	r2, [r7, #11]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	60da      	str	r2, [r3, #12]
    /* Send back first ready Event to caller */  
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80022c0:	7a3b      	ldrb	r3, [r7, #8]
 80022c2:	099b      	lsrs	r3, r3, #6
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	61da      	str	r2, [r3, #28]
    /* Send back first ready Weight to caller */  
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 80022cc:	7b3b      	ldrb	r3, [r7, #12]
 80022ce:	461a      	mov	r2, r3
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	615a      	str	r2, [r3, #20]
    /* Send back first ready Area to caller */  
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 80022d4:	7b7b      	ldrb	r3, [r7, #13]
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	461a      	mov	r2, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Send back first ready X position to caller */
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80022e0:	7bbb      	ldrb	r3, [r7, #14]
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	609a      	str	r2, [r3, #8]
    /* Send back first ready Y position to caller */
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80022f0:	7c3b      	ldrb	r3, [r7, #16]
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80022f8:	7c7a      	ldrb	r2, [r7, #17]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	611a      	str	r2, [r3, #16]
    /* Send back first ready Event to caller */  
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8002300:	7bbb      	ldrb	r3, [r7, #14]
 8002302:	099b      	lsrs	r3, r3, #6
 8002304:	b2db      	uxtb	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	621a      	str	r2, [r3, #32]
    /* Send back first ready Weight to caller */  
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 800230c:	7cbb      	ldrb	r3, [r7, #18]
 800230e:	461a      	mov	r2, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	619a      	str	r2, [r3, #24]
    /* Send back first ready Area to caller */  
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	b2db      	uxtb	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  return ret;  
 8002320:	697b      	ldr	r3, [r7, #20]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <FT6X06_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId gesture ID
  * @retval Component status
  */
int32_t FT6X06_GetGesture(FT6X06_Object_t *pObj, uint8_t *GestureId)
{  
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3318      	adds	r3, #24
 8002338:	6839      	ldr	r1, [r7, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f000 f8bb 	bl	80024b6 <ft6x06_gest_id>
 8002340:	4603      	mov	r3, r0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <FT6X06_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_EnableIT(FT6X06_Object_t *pObj)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3318      	adds	r3, #24
 8002356:	2101      	movs	r1, #1
 8002358:	4618      	mov	r0, r3
 800235a:	f000 f941 	bl	80025e0 <ft6x06_g_mode>
 800235e:	4603      	mov	r3, r0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <FT6X06_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DisableIT(FT6X06_Object_t *pObj)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3318      	adds	r3, #24
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f932 	bl	80025e0 <ft6x06_g_mode>
 800237c:	4603      	mov	r3, r0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <FT6X06_ITStatus>:
  *         @note : This feature is not supported by FT6X06.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_ITStatus(FT6X06_Object_t *pObj)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <FT6X06_ClearIT>:
  *         @note : This feature is not supported by FT6X06.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <FT6X06_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT6X06_ERROR
  *         in case of error
  */
static int32_t FT6X06_DetectTouch(FT6X06_Object_t *pObj)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;
  
  /* Read register FT6X06_TD_STAT_REG to check number of touches detection */
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3318      	adds	r3, #24
 80023be:	f107 020b 	add.w	r2, r7, #11
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f886 	bl	80024d6 <ft6x06_td_status>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <FT6X06_DetectTouch+0x26>
  {
    ret = FT6X06_ERROR;
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	e007      	b.n	80023e8 <FT6X06_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 80023d8:	7afb      	ldrb	r3, [r7, #11]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d902      	bls.n	80023e4 <FT6X06_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	e001      	b.n	80023e8 <FT6X06_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 80023e4:	7afb      	ldrb	r3, [r7, #11]
 80023e6:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80023e8:	68fb      	ldr	r3, [r7, #12]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80023f2:	b590      	push	{r4, r7, lr}
 80023f4:	b087      	sub	sp, #28
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	461a      	mov	r2, r3
 80023fe:	460b      	mov	r3, r1
 8002400:	72fb      	strb	r3, [r7, #11]
 8002402:	4613      	mov	r3, r2
 8002404:	813b      	strh	r3, [r7, #8]
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	691c      	ldr	r4, [r3, #16]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	8918      	ldrh	r0, [r3, #8]
 8002412:	7afb      	ldrb	r3, [r7, #11]
 8002414:	b299      	uxth	r1, r3
 8002416:	893b      	ldrh	r3, [r7, #8]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	47a0      	blx	r4
 800241c:	4603      	mov	r3, r0
}
 800241e:	4618      	mov	r0, r3
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd90      	pop	{r4, r7, pc}

08002426 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002426:	b590      	push	{r4, r7, lr}
 8002428:	b087      	sub	sp, #28
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	461a      	mov	r2, r3
 8002432:	460b      	mov	r3, r1
 8002434:	72fb      	strb	r3, [r7, #11]
 8002436:	4613      	mov	r3, r2
 8002438:	813b      	strh	r3, [r7, #8]
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	68dc      	ldr	r4, [r3, #12]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	8918      	ldrh	r0, [r3, #8]
 8002446:	7afb      	ldrb	r3, [r7, #11]
 8002448:	b299      	uxth	r1, r3
 800244a:	893b      	ldrh	r3, [r7, #8]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	47a0      	blx	r4
 8002450:	4603      	mov	r3, r0
}
 8002452:	4618      	mov	r0, r3
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	bd90      	pop	{r4, r7, pc}

0800245a <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800245a:	b590      	push	{r4, r7, lr}
 800245c:	b085      	sub	sp, #20
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	461a      	mov	r2, r3
 8002466:	460b      	mov	r3, r1
 8002468:	72fb      	strb	r3, [r7, #11]
 800246a:	4613      	mov	r3, r2
 800246c:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	685c      	ldr	r4, [r3, #4]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6898      	ldr	r0, [r3, #8]
 8002476:	893b      	ldrh	r3, [r7, #8]
 8002478:	7af9      	ldrb	r1, [r7, #11]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	47a0      	blx	r4
 800247e:	4603      	mov	r3, r0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	bd90      	pop	{r4, r7, pc}

08002488 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	461a      	mov	r2, r3
 8002494:	460b      	mov	r3, r1
 8002496:	72fb      	strb	r3, [r7, #11]
 8002498:	4613      	mov	r3, r2
 800249a:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681c      	ldr	r4, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6898      	ldr	r0, [r3, #8]
 80024a4:	893b      	ldrh	r3, [r7, #8]
 80024a6:	7af9      	ldrb	r1, [r7, #11]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	47a0      	blx	r4
 80024ac:	4603      	mov	r3, r0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd90      	pop	{r4, r7, pc}

080024b6 <ft6x06_gest_id>:
* Input          : Pointer to uint8_t
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 80024c0:	2301      	movs	r3, #1
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	2101      	movs	r1, #1
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff ffc7 	bl	800245a <ft6x06_read_reg>
 80024cc:	4603      	mov	r3, r0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 80024e0:	2301      	movs	r3, #1
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	2102      	movs	r1, #2
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ffb7 	bl	800245a <ft6x06_read_reg>
 80024ec:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10a      	bne.n	800250a <ft6x06_td_status+0x34>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800250a:	68fb      	ldr	r3, [r7, #12]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8002520:	1cfa      	adds	r2, r7, #3
 8002522:	2301      	movs	r3, #1
 8002524:	2191      	movs	r1, #145	; 0x91
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ffae 	bl	8002488 <ft6x06_write_reg>
 800252c:	4603      	mov	r3, r0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	460b      	mov	r3, r1
 8002540:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8002542:	1cfa      	adds	r2, r7, #3
 8002544:	2301      	movs	r3, #1
 8002546:	2192      	movs	r1, #146	; 0x92
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff9d 	bl	8002488 <ft6x06_write_reg>
 800254e:	4603      	mov	r3, r0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8002564:	1cfa      	adds	r2, r7, #3
 8002566:	2301      	movs	r3, #1
 8002568:	2193      	movs	r1, #147	; 0x93
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff ff8c 	bl	8002488 <ft6x06_write_reg>
 8002570:	4603      	mov	r3, r0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	460b      	mov	r3, r1
 8002584:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8002586:	1cfa      	adds	r2, r7, #3
 8002588:	2301      	movs	r3, #1
 800258a:	2194      	movs	r1, #148	; 0x94
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff7b 	bl	8002488 <ft6x06_write_reg>
 8002592:	4603      	mov	r3, r0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80025a8:	1cfa      	adds	r2, r7, #3
 80025aa:	2301      	movs	r3, #1
 80025ac:	2195      	movs	r1, #149	; 0x95
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ff6a 	bl	8002488 <ft6x06_write_reg>
 80025b4:	4603      	mov	r3, r0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	460b      	mov	r3, r1
 80025c8:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80025ca:	1cfa      	adds	r2, r7, #3
 80025cc:	2301      	movs	r3, #1
 80025ce:	2196      	movs	r1, #150	; 0x96
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff ff59 	bl	8002488 <ft6x06_write_reg>
 80025d6:	4603      	mov	r3, r0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80025ec:	1cfa      	adds	r2, r7, #3
 80025ee:	2301      	movs	r3, #1
 80025f0:	21a4      	movs	r1, #164	; 0xa4
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff ff48 	bl	8002488 <ft6x06_write_reg>
 80025f8:	4603      	mov	r3, r0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b084      	sub	sp, #16
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 800260c:	2301      	movs	r3, #1
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	21a8      	movs	r1, #168	; 0xa8
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff ff21 	bl	800245a <ft6x06_read_reg>
 8002618:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d107      	bne.n	8002630 <ft6x06_chip_id+0x2e>
  {
    *value &= FT6X06_CHIP_ID_BIT_MASK; 
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	781a      	ldrb	r2, [r3, #0]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT6X06_CHIP_ID_BIT_POSITION; 
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	781a      	ldrb	r2, [r3, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8002630:	68fb      	ldr	r3, [r7, #12]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <IS42S32800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S32800J_ERROR;
 8002644:	f04f 33ff 	mov.w	r3, #4294967295
 8002648:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4619      	mov	r1, r3
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f831 	bl	80026b8 <IS42S32800J_ClockEnable>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d128      	bne.n	80026ae <IS42S32800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S32800J_Delay(1);
 800265c:	2001      	movs	r0, #1
 800265e:	f000 f8e1 	bl	8002824 <IS42S32800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4619      	mov	r1, r3
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f849 	bl	8002700 <IS42S32800J_Precharge>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d11c      	bne.n	80026ae <IS42S32800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6819      	ldr	r1, [r3, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	461a      	mov	r2, r3
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f896 	bl	80027b0 <IS42S32800J_RefreshMode>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d111      	bne.n	80026ae <IS42S32800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 800268a:	6839      	ldr	r1, [r7, #0]
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f85b 	bl	8002748 <IS42S32800J_ModeRegConfig>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10a      	bne.n	80026ae <IS42S32800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	4619      	mov	r1, r3
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f8ac 	bl	80027fc <IS42S32800J_RefreshRate>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <IS42S32800J_Init+0x74>
          {
            ret = IS42S32800J_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 80026ae:	68fb      	ldr	r3, [r7, #12]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <IS42S32800J_ClockEnable+0x44>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80026c8:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <IS42S32800J_ClockEnable+0x44>)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <IS42S32800J_ClockEnable+0x44>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <IS42S32800J_ClockEnable+0x44>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80026da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026de:	4907      	ldr	r1, [pc, #28]	; (80026fc <IS42S32800J_ClockEnable+0x44>)
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f00a fdc6 	bl	800d272 <HAL_SDRAM_SendCommand>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <IS42S32800J_ClockEnable+0x3a>
  {
    return IS42S32800J_ERROR;
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295
 80026f0:	e000      	b.n	80026f4 <IS42S32800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 80026f2:	2300      	movs	r3, #0
  }
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	24000dec 	.word	0x24000dec

08002700 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <IS42S32800J_Precharge+0x44>)
 800270c:	2202      	movs	r2, #2
 800270e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8002710:	4a0c      	ldr	r2, [pc, #48]	; (8002744 <IS42S32800J_Precharge+0x44>)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <IS42S32800J_Precharge+0x44>)
 8002718:	2201      	movs	r2, #1
 800271a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <IS42S32800J_Precharge+0x44>)
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8002722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002726:	4907      	ldr	r1, [pc, #28]	; (8002744 <IS42S32800J_Precharge+0x44>)
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f00a fda2 	bl	800d272 <HAL_SDRAM_SendCommand>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <IS42S32800J_Precharge+0x3a>
  {
    return IS42S32800J_ERROR;
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
 8002738:	e000      	b.n	800273c <IS42S32800J_Precharge+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 800273a:	2300      	movs	r3, #0
  }
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	24000dec 	.word	0x24000dec

08002748 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800275a:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8002760:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8002766:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800276c:	4313      	orrs	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8002770:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <IS42S32800J_ModeRegConfig+0x64>)
 8002772:	2204      	movs	r2, #4
 8002774:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a0c      	ldr	r2, [pc, #48]	; (80027ac <IS42S32800J_ModeRegConfig+0x64>)
 800277c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <IS42S32800J_ModeRegConfig+0x64>)
 8002780:	2201      	movs	r2, #1
 8002782:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002784:	4a09      	ldr	r2, [pc, #36]	; (80027ac <IS42S32800J_ModeRegConfig+0x64>)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800278a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800278e:	4907      	ldr	r1, [pc, #28]	; (80027ac <IS42S32800J_ModeRegConfig+0x64>)
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f00a fd6e 	bl	800d272 <HAL_SDRAM_SendCommand>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <IS42S32800J_ModeRegConfig+0x5a>
  {
    return IS42S32800J_ERROR;
 800279c:	f04f 33ff 	mov.w	r3, #4294967295
 80027a0:	e000      	b.n	80027a4 <IS42S32800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S32800J_OK;
 80027a2:	2300      	movs	r3, #0
  }
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	24000dec 	.word	0x24000dec

080027b0 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 80027bc:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <IS42S32800J_RefreshMode+0x48>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 80027c2:	4a0d      	ldr	r2, [pc, #52]	; (80027f8 <IS42S32800J_RefreshMode+0x48>)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <IS42S32800J_RefreshMode+0x48>)
 80027ca:	2208      	movs	r2, #8
 80027cc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <IS42S32800J_RefreshMode+0x48>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80027d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027d8:	4907      	ldr	r1, [pc, #28]	; (80027f8 <IS42S32800J_RefreshMode+0x48>)
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f00a fd49 	bl	800d272 <HAL_SDRAM_SendCommand>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <IS42S32800J_RefreshMode+0x3c>
  {
    return IS42S32800J_ERROR;
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ea:	e000      	b.n	80027ee <IS42S32800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S32800J_OK;
 80027ec:	2300      	movs	r3, #0
  }
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	24000dec 	.word	0x24000dec

080027fc <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8002806:	6839      	ldr	r1, [r7, #0]
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f00a fd67 	bl	800d2dc <HAL_SDRAM_ProgramRefreshRate>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <IS42S32800J_RefreshRate+0x1e>
  {
    return IS42S32800J_ERROR;
 8002814:	f04f 33ff 	mov.w	r3, #4294967295
 8002818:	e000      	b.n	800281c <IS42S32800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S32800J_OK;
 800281a:	2300      	movs	r3, #0
  }
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <IS42S32800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay : specifies the delay time length, in milliseconds
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800282c:	f004 fcdc 	bl	80071e8 <HAL_GetTick>
 8002830:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8002832:	bf00      	nop
 8002834:	f004 fcd8 	bl	80071e8 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	429a      	cmp	r2, r3
 8002842:	d8f7      	bhi.n	8002834 <IS42S32800J_Delay+0x10>
  {
  }
  return IS42S32800J_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800285c:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002864:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800286c:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002876:	fbb2 f2f3 	udiv	r2, r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002886:	fbb2 f2f3 	udiv	r2, r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b090      	sub	sp, #64	; 0x40
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d102      	bne.n	80028b4 <MT25TL01G_Enter4BytesAddressMode+0x18>
 80028ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028b2:	e001      	b.n	80028b8 <MT25TL01G_Enter4BytesAddressMode+0x1c>
 80028b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028b8:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 80028ba:	23b7      	movs	r3, #183	; 0xb7
 80028bc:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80028d2:	2300      	movs	r3, #0
 80028d4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80028d6:	2300      	movs	r3, #0
 80028d8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	4619      	mov	r1, r3
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f860 	bl	80029a4 <MT25TL01G_WriteEnable>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 80028ea:	f06f 0301 	mvn.w	r3, #1
 80028ee:	e019      	b.n	8002924 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80028f0:	f107 0308 	add.w	r3, r7, #8
 80028f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f8:	4619      	mov	r1, r3
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f007 fc5e 	bl	800a1bc <HAL_QSPI_Command>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002906:	f06f 0301 	mvn.w	r3, #1
 800290a:	e00b      	b.n	8002924 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	4619      	mov	r1, r3
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f80b 	bl	800292c <MT25TL01G_AutoPollingMemReady>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 800291c:	f06f 0301 	mvn.w	r3, #1
 8002920:	e000      	b.n	8002924 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3740      	adds	r7, #64	; 0x40
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b096      	sub	sp, #88	; 0x58
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002938:	f44f 7340 	mov.w	r3, #768	; 0x300
 800293c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800293e:	2305      	movs	r3, #5
 8002940:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002942:	2300      	movs	r3, #0
 8002944:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002946:	2300      	movs	r3, #0
 8002948:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800294a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800294e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 8002950:	2302      	movs	r3, #2
 8002952:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002954:	2300      	movs	r3, #0
 8002956:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002958:	2300      	movs	r3, #0
 800295a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800295c:	2300      	movs	r3, #0
 800295e:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002964:	2300      	movs	r3, #0
 8002966:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 8002968:	2310      	movs	r3, #16
 800296a:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800296c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002970:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8002972:	f240 1301 	movw	r3, #257	; 0x101
 8002976:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 8002978:	2302      	movs	r3, #2
 800297a:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800297c:	f107 0208 	add.w	r2, r7, #8
 8002980:	f107 0120 	add.w	r1, r7, #32
 8002984:	f241 3388 	movw	r3, #5000	; 0x1388
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f007 fda4 	bl	800a4d6 <HAL_QSPI_AutoPolling>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8002994:	f06f 0304 	mvn.w	r3, #4
 8002998:	e000      	b.n	800299c <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 800299a:	2300      	movs	r3, #0

}
 800299c:	4618      	mov	r0, r3
 800299e:	3758      	adds	r7, #88	; 0x58
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b096      	sub	sp, #88	; 0x58
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d102      	bne.n	80029bc <MT25TL01G_WriteEnable+0x18>
 80029b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029ba:	e001      	b.n	80029c0 <MT25TL01G_WriteEnable+0x1c>
 80029bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 80029c2:	2306      	movs	r3, #6
 80029c4:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80029da:	2300      	movs	r3, #0
 80029dc:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80029de:	2300      	movs	r3, #0
 80029e0:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80029e2:	f107 0320 	add.w	r3, r7, #32
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4619      	mov	r1, r3
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f007 fbe5 	bl	800a1bc <HAL_QSPI_Command>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80029f8:	f06f 0301 	mvn.w	r3, #1
 80029fc:	e029      	b.n	8002a52 <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80029fe:	f240 2302 	movw	r3, #514	; 0x202
 8002a02:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8002a04:	f240 2302 	movw	r3, #514	; 0x202
 8002a08:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8002a12:	2310      	movs	r3, #16
 8002a14:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002a16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a1a:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8002a1c:	2305      	movs	r3, #5
 8002a1e:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d102      	bne.n	8002a2c <MT25TL01G_WriteEnable+0x88>
 8002a26:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002a2a:	e001      	b.n	8002a30 <MT25TL01G_WriteEnable+0x8c>
 8002a2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a30:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a32:	f107 0208 	add.w	r2, r7, #8
 8002a36:	f107 0120 	add.w	r1, r7, #32
 8002a3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f007 fd49 	bl	800a4d6 <HAL_QSPI_AutoPolling>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8002a4a:	f06f 0304 	mvn.w	r3, #4
 8002a4e:	e000      	b.n	8002a52 <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3758      	adds	r7, #88	; 0x58
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <MT25TL01G_PageProgram>:
  * @param  Size Size of data to write. Range 1 ~ 256
  * @retval QSPI memory status
  */

int32_t MT25TL01G_PageProgram(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b092      	sub	sp, #72	; 0x48
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	72fb      	strb	r3, [r7, #11]
  QSPI_CommandTypeDef s_command;
  switch(Mode)
 8002a6c:	7afb      	ldrb	r3, [r7, #11]
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d83a      	bhi.n	8002ae8 <MT25TL01G_PageProgram+0x8c>
 8002a72:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <MT25TL01G_PageProgram+0x1c>)
 8002a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a78:	08002a89 	.word	0x08002a89
 8002a7c:	08002aa1 	.word	0x08002aa1
 8002a80:	08002ab9 	.word	0x08002ab9
 8002a84:	08002ad1 	.word	0x08002ad1
  {

  case MT25TL01G_SPI_MODE :                   /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002a88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = MT25TL01G_PAGE_PROG_CMD;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 8002a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_1_LINE;
 8002a98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a9c:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8002a9e:	e023      	b.n	8002ae8 <MT25TL01G_PageProgram+0x8c>

  case MT25TL01G_SPI_2IO_MODE :               /*  1-2-2 commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = MT25TL01G_EXT_DUAL_IN_FAST_PROG_CMD;
 8002aa6:	23d2      	movs	r3, #210	; 0xd2
 8002aa8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_2_LINES;
 8002aaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_2_LINES;
 8002ab0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ab4:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8002ab6:	e017      	b.n	8002ae8 <MT25TL01G_PageProgram+0x8c>

  case MT25TL01G_SPI_4IO_MODE :               /* 1-4-4 program commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = MT25TL01G_EXT_QUAD_IN_FAST_PROG_CMD;
 8002abe:	2338      	movs	r3, #56	; 0x38
 8002ac0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 8002ac2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_4_LINES;
 8002ac8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8002ace:	e00b      	b.n	8002ae8 <MT25TL01G_PageProgram+0x8c>

  case MT25TL01G_QPI_MODE :                   /* 4-4-4 commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8002ad0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = MT25TL01G_QUAD_IN_FAST_PROG_4_BYTE_ADDR_CMD;
 8002ad6:	2334      	movs	r3, #52	; 0x34
 8002ad8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 8002ada:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_4_LINES;
 8002ae0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8002ae6:	bf00      	nop

  }

  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002ae8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002aec:	61fb      	str	r3, [r7, #28]
  s_command.Address           = WriteAddr;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	617b      	str	r3, [r7, #20]
  s_command.NbData            = Size;
 8002af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002b02:	2300      	movs	r3, #0
 8002b04:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002b06:	2300      	movs	r3, #0
 8002b08:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002b0a:	f107 0310 	add.w	r3, r7, #16
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4619      	mov	r1, r3
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f007 fb51 	bl	800a1bc <HAL_QSPI_Command>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <MT25TL01G_PageProgram+0xca>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002b20:	f06f 0301 	mvn.w	r3, #1
 8002b24:	e00c      	b.n	8002b40 <MT25TL01G_PageProgram+0xe4>
  }
  if (HAL_QSPI_Transmit(Ctx, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f007 fba3 	bl	800a278 <HAL_QSPI_Transmit>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <MT25TL01G_PageProgram+0xe2>
  {
    return MT25TL01G_ERROR_TRANSMIT;
 8002b38:	f06f 0302 	mvn.w	r3, #2
 8002b3c:	e000      	b.n	8002b40 <MT25TL01G_PageProgram+0xe4>
  }
  return MT25TL01G_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3748      	adds	r7, #72	; 0x48
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <MT25TL01G_ReadDTR>:
  * @param  ReadAddr Read start address
  * @param  Size Size of data to read
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ReadDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b092      	sub	sp, #72	; 0x48
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	460b      	mov	r3, r1
 8002b56:	72fb      	strb	r3, [r7, #11]
  QSPI_CommandTypeDef s_command;
  switch(Mode)
 8002b58:	7afb      	ldrb	r3, [r7, #11]
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d83a      	bhi.n	8002bd4 <MT25TL01G_ReadDTR+0x8c>
 8002b5e:	a201      	add	r2, pc, #4	; (adr r2, 8002b64 <MT25TL01G_ReadDTR+0x1c>)
 8002b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b64:	08002b75 	.word	0x08002b75
 8002b68:	08002b8d 	.word	0x08002b8d
 8002b6c:	08002ba5 	.word	0x08002ba5
 8002b70:	08002bbd 	.word	0x08002bbd
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b78:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8002b7a:	230e      	movs	r3, #14
 8002b7c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8002b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8002b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8002b8a:	e023      	b.n	8002bd4 <MT25TL01G_ReadDTR+0x8c>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8002b92:	233d      	movs	r3, #61	; 0x3d
 8002b94:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8002b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8002b9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ba0:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8002ba2:	e017      	b.n	8002bd4 <MT25TL01G_ReadDTR+0x8c>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8002baa:	23ee      	movs	r3, #238	; 0xee
 8002bac:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002bae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8002bb4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002bb8:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8002bba:	e00b      	b.n	8002bd4 <MT25TL01G_ReadDTR+0x8c>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002bbc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8002bc2:	23ed      	movs	r3, #237	; 0xed
 8002bc4:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002bc6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8002bcc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002bd0:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8002bd2:	bf00      	nop
  }
  /* Initialize the read command */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8002bd4:	2308      	movs	r3, #8
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002bd8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002bdc:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.NbData            = Size;
 8002be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8002bea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8002bf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bf4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002bfa:	f107 0310 	add.w	r3, r7, #16
 8002bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c02:	4619      	mov	r1, r3
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f007 fad9 	bl	800a1bc <HAL_QSPI_Command>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <MT25TL01G_ReadDTR+0xce>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002c10:	f06f 0301 	mvn.w	r3, #1
 8002c14:	e00c      	b.n	8002c30 <MT25TL01G_ReadDTR+0xe8>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(Ctx, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f007 fbbd 	bl	800a39c <HAL_QSPI_Receive>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <MT25TL01G_ReadDTR+0xe6>
  {
    return MT25TL01G_ERROR_RECEIVE;
 8002c28:	f06f 0303 	mvn.w	r3, #3
 8002c2c:	e000      	b.n	8002c30 <MT25TL01G_ReadDTR+0xe8>
  }

  return MT25TL01G_OK;
 8002c2e:	2300      	movs	r3, #0

}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3748      	adds	r7, #72	; 0x48
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <MT25TL01G_ReadSTR>:
  * @param  Size Size of data to read
  * @retval QSPI memory status
  */

int32_t MT25TL01G_ReadSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b092      	sub	sp, #72	; 0x48
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	460b      	mov	r3, r1
 8002c46:	72fb      	strb	r3, [r7, #11]
  QSPI_CommandTypeDef s_command;
  switch(Mode)
 8002c48:	7afb      	ldrb	r3, [r7, #11]
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d83a      	bhi.n	8002cc4 <MT25TL01G_ReadSTR+0x8c>
 8002c4e:	a201      	add	r2, pc, #4	; (adr r2, 8002c54 <MT25TL01G_ReadSTR+0x1c>)
 8002c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c54:	08002c65 	.word	0x08002c65
 8002c58:	08002c7d 	.word	0x08002c7d
 8002c5c:	08002c95 	.word	0x08002c95
 8002c60:	08002cad 	.word	0x08002cad
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8002c6a:	230c      	movs	r3, #12
 8002c6c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8002c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8002c74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c78:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 8002c7a:	e023      	b.n	8002cc4 <MT25TL01G_ReadSTR+0x8c>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8002c82:	23bc      	movs	r3, #188	; 0xbc
 8002c84:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8002c86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8002c8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c90:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8002c92:	e017      	b.n	8002cc4 <MT25TL01G_ReadSTR+0x8c>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c98:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8002c9a:	23ec      	movs	r3, #236	; 0xec
 8002c9c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002c9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8002ca4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002ca8:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8002caa:	e00b      	b.n	8002cc4 <MT25TL01G_ReadSTR+0x8c>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002cac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8002cb2:	23eb      	movs	r3, #235	; 0xeb
 8002cb4:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002cb6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8002cbc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002cc0:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8002cc2:	bf00      	nop
  }
  /* Initialize the read command */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8002cc4:	2308      	movs	r3, #8
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002cc8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002ccc:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.NbData            = Size;
 8002cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ce6:	f107 0310 	add.w	r3, r7, #16
 8002cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cee:	4619      	mov	r1, r3
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f007 fa63 	bl	800a1bc <HAL_QSPI_Command>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <MT25TL01G_ReadSTR+0xca>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002cfc:	f06f 0301 	mvn.w	r3, #1
 8002d00:	e00c      	b.n	8002d1c <MT25TL01G_ReadSTR+0xe4>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(Ctx, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f007 fb47 	bl	800a39c <HAL_QSPI_Receive>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <MT25TL01G_ReadSTR+0xe2>
  {
    return MT25TL01G_ERROR_RECEIVE;
 8002d14:	f06f 0303 	mvn.w	r3, #3
 8002d18:	e000      	b.n	8002d1c <MT25TL01G_ReadSTR+0xe4>
  }


  return MT25TL01G_OK;
 8002d1a:	2300      	movs	r3, #0

}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3748      	adds	r7, #72	; 0x48
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <MT25TL01G_BlockErase>:
  * @param  BlockAddress Block address to erase
  * @retval QSPI memory status
  */

int32_t MT25TL01G_BlockErase(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode ,uint32_t BlockAddress, MT25TL01G_Erase_t BlockSize)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b092      	sub	sp, #72	; 0x48
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	460b      	mov	r3, r1
 8002d32:	72fb      	strb	r3, [r7, #11]
 8002d34:	4613      	mov	r3, r2
 8002d36:	72bb      	strb	r3, [r7, #10]
  QSPI_CommandTypeDef s_command;
  switch(BlockSize)
 8002d38:	7abb      	ldrb	r3, [r7, #10]
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d00e      	beq.n	8002d5c <MT25TL01G_BlockErase+0x38>
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	dc03      	bgt.n	8002d4a <MT25TL01G_BlockErase+0x26>
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d004      	beq.n	8002d50 <MT25TL01G_BlockErase+0x2c>
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d005      	beq.n	8002d56 <MT25TL01G_BlockErase+0x32>
  {
  default :
  case MT25TL01G_ERASE_4K :
    s_command.Instruction     = MT25TL01G_SUBSECTOR_ERASE_4_BYTE_ADDR_CMD_4K;
 8002d4a:	2321      	movs	r3, #33	; 0x21
 8002d4c:	613b      	str	r3, [r7, #16]
    break;
 8002d4e:	e00c      	b.n	8002d6a <MT25TL01G_BlockErase+0x46>

  case MT25TL01G_ERASE_32K :
    s_command.Instruction     = MT25TL01G_SUBSECTOR_ERASE_CMD_32K;
 8002d50:	2352      	movs	r3, #82	; 0x52
 8002d52:	613b      	str	r3, [r7, #16]
    break;
 8002d54:	e009      	b.n	8002d6a <MT25TL01G_BlockErase+0x46>

  case MT25TL01G_ERASE_64K :
    s_command.Instruction     = MT25TL01G_SECTOR_ERASE_4_BYTE_ADDR_CMD;
 8002d56:	23dc      	movs	r3, #220	; 0xdc
 8002d58:	613b      	str	r3, [r7, #16]
    break;
 8002d5a:	e006      	b.n	8002d6a <MT25TL01G_BlockErase+0x46>

  case MT25TL01G_ERASE_CHIP :
    return MT25TL01G_ChipErase(Ctx, Mode);
 8002d5c:	7afb      	ldrb	r3, [r7, #11]
 8002d5e:	4619      	mov	r1, r3
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 f83c 	bl	8002dde <MT25TL01G_ChipErase>
 8002d66:	4603      	mov	r3, r0
 8002d68:	e035      	b.n	8002dd6 <MT25TL01G_BlockErase+0xb2>
  }
  /* Initialize the erase command */

  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002d6a:	7afb      	ldrb	r3, [r7, #11]
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	d102      	bne.n	8002d76 <MT25TL01G_BlockErase+0x52>
 8002d70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d74:	e001      	b.n	8002d7a <MT25TL01G_BlockErase+0x56>
 8002d76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002d7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002d82:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002d86:	61fb      	str	r3, [r7, #28]
  s_command.Address           = BlockAddress;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_NONE;
 8002d90:	2300      	movs	r3, #0
 8002d92:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002da0:	2300      	movs	r3, #0
 8002da2:	647b      	str	r3, [r7, #68]	; 0x44

  /* Send the command */
  MT25TL01G_WriteEnable(Ctx,Mode);
 8002da4:	7afb      	ldrb	r3, [r7, #11]
 8002da6:	4619      	mov	r1, r3
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7ff fdfb 	bl	80029a4 <MT25TL01G_WriteEnable>
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002dae:	f107 0310 	add.w	r3, r7, #16
 8002db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db6:	4619      	mov	r1, r3
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f007 f9ff 	bl	800a1bc <HAL_QSPI_Command>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <MT25TL01G_BlockErase+0xa6>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002dc4:	f06f 0301 	mvn.w	r3, #1
 8002dc8:	e005      	b.n	8002dd6 <MT25TL01G_BlockErase+0xb2>
  }
  MT25TL01G_AutoPollingMemReady(Ctx,Mode);
 8002dca:	7afb      	ldrb	r3, [r7, #11]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f7ff fdac 	bl	800292c <MT25TL01G_AutoPollingMemReady>
  return MT25TL01G_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3748      	adds	r7, #72	; 0x48
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <MT25TL01G_ChipErase>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_ChipErase(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b090      	sub	sp, #64	; 0x40
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the erase command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d102      	bne.n	8002df6 <MT25TL01G_ChipErase+0x18>
 8002df0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002df4:	e001      	b.n	8002dfa <MT25TL01G_ChipErase+0x1c>
 8002df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dfa:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_DIE_ERASE_CMD;
 8002dfc:	23c7      	movs	r3, #199	; 0xc7
 8002dfe:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002e14:	2300      	movs	r3, #0
 8002e16:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e1c:	f107 0308 	add.w	r3, r7, #8
 8002e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e24:	4619      	mov	r1, r3
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f007 f9c8 	bl	800a1bc <HAL_QSPI_Command>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <MT25TL01G_ChipErase+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002e32:	f06f 0301 	mvn.w	r3, #1
 8002e36:	e000      	b.n	8002e3a <MT25TL01G_ChipErase+0x5c>
  }

  return MT25TL01G_OK;
 8002e38:	2300      	movs	r3, #0

}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3740      	adds	r7, #64	; 0x40
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b090      	sub	sp, #64	; 0x40
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e4e:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8002e50:	2335      	movs	r3, #53	; 0x35
 8002e52:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002e64:	2300      	movs	r3, #0
 8002e66:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e70:	f107 0308 	add.w	r3, r7, #8
 8002e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e78:	4619      	mov	r1, r3
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f007 f99e 	bl	800a1bc <HAL_QSPI_Command>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002e86:	f06f 0301 	mvn.w	r3, #1
 8002e8a:	e000      	b.n	8002e8e <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3740      	adds	r7, #64	; 0x40
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b090      	sub	sp, #64	; 0x40
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ea2:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8002ea4:	23f5      	movs	r3, #245	; 0xf5
 8002ea6:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002eac:	2300      	movs	r3, #0
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ec4:	f107 0308 	add.w	r3, r7, #8
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4619      	mov	r1, r3
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f007 f974 	bl	800a1bc <HAL_QSPI_Command>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002eda:	f06f 0301 	mvn.w	r3, #1
 8002ede:	e000      	b.n	8002ee2 <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3740      	adds	r7, #64	; 0x40
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b092      	sub	sp, #72	; 0x48
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d83a      	bhi.n	8002f74 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 8002efe:	a201      	add	r2, pc, #4	; (adr r2, 8002f04 <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 8002f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f04:	08002f15 	.word	0x08002f15
 8002f08:	08002f2d 	.word	0x08002f2d
 8002f0c:	08002f45 	.word	0x08002f45
 8002f10:	08002f5d 	.word	0x08002f5d
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8002f1a:	230e      	movs	r3, #14
 8002f1c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8002f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8002f24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8002f2a:	e023      	b.n	8002f74 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8002f32:	233d      	movs	r3, #61	; 0x3d
 8002f34:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8002f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8002f3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f40:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8002f42:	e017      	b.n	8002f74 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f48:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8002f4a:	23ee      	movs	r3, #238	; 0xee
 8002f4c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002f4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8002f54:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8002f5a:	e00b      	b.n	8002f74 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002f5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f60:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8002f62:	23ed      	movs	r3, #237	; 0xed
 8002f64:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002f66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8002f6c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002f70:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8002f72:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002f74:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002f78:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8002f7e:	2308      	movs	r3, #8
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8002f82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8002f88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f8c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8002f9a:	f107 0208 	add.w	r2, r7, #8
 8002f9e:	f107 0310 	add.w	r3, r7, #16
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f007 fb0d 	bl	800a5c4 <HAL_QSPI_MemoryMapped>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 8002fb0:	f06f 0305 	mvn.w	r3, #5
 8002fb4:	e000      	b.n	8002fb8 <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3748      	adds	r7, #72	; 0x48
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b092      	sub	sp, #72	; 0x48
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d83a      	bhi.n	8003048 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 8002fd2:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 8002fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd8:	08002fe9 	.word	0x08002fe9
 8002fdc:	08003001 	.word	0x08003001
 8002fe0:	08003019 	.word	0x08003019
 8002fe4:	08003031 	.word	0x08003031
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8002fee:	230c      	movs	r3, #12
 8002ff0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8002ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8002ff8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ffc:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 8002ffe:	e023      	b.n	8003048 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8003006:	23bc      	movs	r3, #188	; 0xbc
 8003008:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800300a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8003010:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003014:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8003016:	e017      	b.n	8003048 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800301c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800301e:	23ec      	movs	r3, #236	; 0xec
 8003020:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003022:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8003028:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800302c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800302e:	e00b      	b.n	8003048 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003030:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003034:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8003036:	23eb      	movs	r3, #235	; 0xeb
 8003038:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800303a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800303e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8003040:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003044:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8003046:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8003048:	2308      	movs	r3, #8
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800304c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003050:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003052:	2300      	movs	r3, #0
 8003054:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003056:	2300      	movs	r3, #0
 8003058:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800305a:	2300      	movs	r3, #0
 800305c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800305e:	2300      	movs	r3, #0
 8003060:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800306a:	f107 0208 	add.w	r2, r7, #8
 800306e:	f107 0310 	add.w	r3, r7, #16
 8003072:	4619      	mov	r1, r3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f007 faa5 	bl	800a5c4 <HAL_QSPI_MemoryMapped>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 8003080:	f06f 0305 	mvn.w	r3, #5
 8003084:	e000      	b.n	8003088 <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3748      	adds	r7, #72	; 0x48
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b090      	sub	sp, #64	; 0x40
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d102      	bne.n	80030a8 <MT25TL01G_ResetEnable+0x18>
 80030a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030a6:	e001      	b.n	80030ac <MT25TL01G_ResetEnable+0x1c>
 80030a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ac:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80030ae:	2366      	movs	r3, #102	; 0x66
 80030b0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80030c6:	2300      	movs	r3, #0
 80030c8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80030ca:	2300      	movs	r3, #0
 80030cc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030ce:	f107 0308 	add.w	r3, r7, #8
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4619      	mov	r1, r3
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f007 f86f 	bl	800a1bc <HAL_QSPI_Command>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80030e4:	f06f 0301 	mvn.w	r3, #1
 80030e8:	e000      	b.n	80030ec <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3740      	adds	r7, #64	; 0x40
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b090      	sub	sp, #64	; 0x40
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d102      	bne.n	800310c <MT25TL01G_ResetMemory+0x18>
 8003106:	f44f 7340 	mov.w	r3, #768	; 0x300
 800310a:	e001      	b.n	8003110 <MT25TL01G_ResetMemory+0x1c>
 800310c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003110:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8003112:	2399      	movs	r3, #153	; 0x99
 8003114:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800311a:	2300      	movs	r3, #0
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800311e:	2300      	movs	r3, #0
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003126:	2300      	movs	r3, #0
 8003128:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800312a:	2300      	movs	r3, #0
 800312c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800312e:	2300      	movs	r3, #0
 8003130:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003132:	f107 0308 	add.w	r3, r7, #8
 8003136:	f241 3288 	movw	r2, #5000	; 0x1388
 800313a:	4619      	mov	r1, r3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f007 f83d 	bl	800a1bc <HAL_QSPI_Command>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8003148:	f06f 0301 	mvn.w	r3, #1
 800314c:	e000      	b.n	8003150 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3740      	adds	r7, #64	; 0x40
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <OTM8009A_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OTM8009A_RegisterBusIO (OTM8009A_Object_t *pObj, OTM8009A_IO_t *pIO)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  int32_t ret = OTM8009A_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]

  if(pObj == NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d103      	bne.n	8003174 <OTM8009A_RegisterBusIO+0x1c>
  {
    ret = OTM8009A_ERROR;
 800316c:	f04f 33ff 	mov.w	r3, #4294967295
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	e014      	b.n	800319e <OTM8009A_RegisterBusIO+0x46>
  }
  else
  {
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	605a      	str	r2, [r3, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	609a      	str	r2, [r3, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	60da      	str	r2, [r3, #12]
    
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a07      	ldr	r2, [pc, #28]	; (80031ac <OTM8009A_RegisterBusIO+0x54>)
 8003190:	615a      	str	r2, [r3, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a06      	ldr	r2, [pc, #24]	; (80031b0 <OTM8009A_RegisterBusIO+0x58>)
 8003196:	611a      	str	r2, [r3, #16]
    pObj->Ctx.handle   = pObj;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	619a      	str	r2, [r3, #24]
  }
  
  return ret;
 800319e:	68fb      	ldr	r3, [r7, #12]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	08004113 	.word	0x08004113
 80031b0:	08004145 	.word	0x08004145

080031b4 <OTM8009A_Init>:
  * @param  ColorCoding   Color Code
  * @param  Orientation   Display orientation
  * @retval Component status
  */
int32_t OTM8009A_Init(OTM8009A_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
    0xE0,0xF0,0x00,OTM8009A_COLMOD_RGB565,OTM8009A_COLMOD_RGB888,0x7F,0x2C,0x02,0xFF,0x00,
    0x00,0x00,0x66,0xB6,0x06,0xB1,0x06};
  
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */ 
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f103 0010 	add.w	r0, r3, #16
 80031c6:	2300      	movs	r3, #0
 80031c8:	4abf      	ldr	r2, [pc, #764]	; (80034c8 <OTM8009A_Init+0x314>)
 80031ca:	2100      	movs	r1, #0
 80031cc:	f001 f804 	bl	80041d8 <otm8009a_write_reg>
 80031d0:	6178      	str	r0, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f103 0010 	add.w	r0, r3, #16
 80031d8:	2303      	movs	r3, #3
 80031da:	4abc      	ldr	r2, [pc, #752]	; (80034cc <OTM8009A_Init+0x318>)
 80031dc:	21ff      	movs	r1, #255	; 0xff
 80031de:	f000 fffb 	bl	80041d8 <otm8009a_write_reg>
 80031e2:	4602      	mov	r2, r0
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	4413      	add	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]
  
  /* Enter ORISE Command 2 */
  /* Shift address to 0x80 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f103 0010 	add.w	r0, r3, #16
 80031f0:	2300      	movs	r3, #0
 80031f2:	4ab7      	ldr	r2, [pc, #732]	; (80034d0 <OTM8009A_Init+0x31c>)
 80031f4:	2100      	movs	r1, #0
 80031f6:	f000 ffef 	bl	80041d8 <otm8009a_write_reg>
 80031fa:	4602      	mov	r2, r0
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	4413      	add	r3, r2
 8003200:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f103 0010 	add.w	r0, r3, #16
 8003208:	2302      	movs	r3, #2
 800320a:	4ab2      	ldr	r2, [pc, #712]	; (80034d4 <OTM8009A_Init+0x320>)
 800320c:	21ff      	movs	r1, #255	; 0xff
 800320e:	f000 ffe3 	bl	80041d8 <otm8009a_write_reg>
 8003212:	4602      	mov	r2, r0
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	4413      	add	r3, r2
 8003218:	617b      	str	r3, [r7, #20]
  
  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f103 0010 	add.w	r0, r3, #16
 8003220:	2300      	movs	r3, #0
 8003222:	4aab      	ldr	r2, [pc, #684]	; (80034d0 <OTM8009A_Init+0x31c>)
 8003224:	2100      	movs	r1, #0
 8003226:	f000 ffd7 	bl	80041d8 <otm8009a_write_reg>
 800322a:	4602      	mov	r2, r0
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	4413      	add	r3, r2
 8003230:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f103 0010 	add.w	r0, r3, #16
 8003238:	2300      	movs	r3, #0
 800323a:	4aa7      	ldr	r2, [pc, #668]	; (80034d8 <OTM8009A_Init+0x324>)
 800323c:	21c4      	movs	r1, #196	; 0xc4
 800323e:	f000 ffcb 	bl	80041d8 <otm8009a_write_reg>
 8003242:	4602      	mov	r2, r0
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	4413      	add	r3, r2
 8003248:	617b      	str	r3, [r7, #20]
  
  (void)OTM8009A_IO_Delay(pObj, 10);
 800324a:	210a      	movs	r1, #10
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 ff92 	bl	8004176 <OTM8009A_IO_Delay>
  /* Not documented */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f103 0010 	add.w	r0, r3, #16
 8003258:	2300      	movs	r3, #0
 800325a:	4aa0      	ldr	r2, [pc, #640]	; (80034dc <OTM8009A_Init+0x328>)
 800325c:	2100      	movs	r1, #0
 800325e:	f000 ffbb 	bl	80041d8 <otm8009a_write_reg>
 8003262:	4602      	mov	r2, r0
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	4413      	add	r3, r2
 8003268:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f103 0010 	add.w	r0, r3, #16
 8003270:	2300      	movs	r3, #0
 8003272:	4a9b      	ldr	r2, [pc, #620]	; (80034e0 <OTM8009A_Init+0x32c>)
 8003274:	21c4      	movs	r1, #196	; 0xc4
 8003276:	f000 ffaf 	bl	80041d8 <otm8009a_write_reg>
 800327a:	4602      	mov	r2, r0
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	4413      	add	r3, r2
 8003280:	617b      	str	r3, [r7, #20]
  (void)OTM8009A_IO_Delay(pObj, 10);
 8003282:	210a      	movs	r1, #10
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 ff76 	bl	8004176 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////
  
  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f103 0010 	add.w	r0, r3, #16
 8003290:	2300      	movs	r3, #0
 8003292:	4a94      	ldr	r2, [pc, #592]	; (80034e4 <OTM8009A_Init+0x330>)
 8003294:	2100      	movs	r1, #0
 8003296:	f000 ff9f 	bl	80041d8 <otm8009a_write_reg>
 800329a:	4602      	mov	r2, r0
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	4413      	add	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f103 0010 	add.w	r0, r3, #16
 80032a8:	2300      	movs	r3, #0
 80032aa:	4a8f      	ldr	r2, [pc, #572]	; (80034e8 <OTM8009A_Init+0x334>)
 80032ac:	21c5      	movs	r1, #197	; 0xc5
 80032ae:	f000 ff93 	bl	80041d8 <otm8009a_write_reg>
 80032b2:	4602      	mov	r2, r0
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	4413      	add	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f103 0010 	add.w	r0, r3, #16
 80032c0:	2300      	movs	r3, #0
 80032c2:	4a8a      	ldr	r2, [pc, #552]	; (80034ec <OTM8009A_Init+0x338>)
 80032c4:	2100      	movs	r1, #0
 80032c6:	f000 ff87 	bl	80041d8 <otm8009a_write_reg>
 80032ca:	4602      	mov	r2, r0
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	4413      	add	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f103 0010 	add.w	r0, r3, #16
 80032d8:	2300      	movs	r3, #0
 80032da:	4a85      	ldr	r2, [pc, #532]	; (80034f0 <OTM8009A_Init+0x33c>)
 80032dc:	21c5      	movs	r1, #197	; 0xc5
 80032de:	f000 ff7b 	bl	80041d8 <otm8009a_write_reg>
 80032e2:	4602      	mov	r2, r0
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	4413      	add	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]
  
  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f103 0010 	add.w	r0, r3, #16
 80032f0:	2300      	movs	r3, #0
 80032f2:	4a80      	ldr	r2, [pc, #512]	; (80034f4 <OTM8009A_Init+0x340>)
 80032f4:	2100      	movs	r1, #0
 80032f6:	f000 ff6f 	bl	80041d8 <otm8009a_write_reg>
 80032fa:	4602      	mov	r2, r0
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	4413      	add	r3, r2
 8003300:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f103 0010 	add.w	r0, r3, #16
 8003308:	2300      	movs	r3, #0
 800330a:	4a7b      	ldr	r2, [pc, #492]	; (80034f8 <OTM8009A_Init+0x344>)
 800330c:	21c0      	movs	r1, #192	; 0xc0
 800330e:	f000 ff63 	bl	80041d8 <otm8009a_write_reg>
 8003312:	4602      	mov	r2, r0
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	4413      	add	r3, r2
 8003318:	617b      	str	r3, [r7, #20]
  
  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f103 0010 	add.w	r0, r3, #16
 8003320:	2300      	movs	r3, #0
 8003322:	4a69      	ldr	r2, [pc, #420]	; (80034c8 <OTM8009A_Init+0x314>)
 8003324:	2100      	movs	r1, #0
 8003326:	f000 ff57 	bl	80041d8 <otm8009a_write_reg>
 800332a:	4602      	mov	r2, r0
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	4413      	add	r3, r2
 8003330:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f103 0010 	add.w	r0, r3, #16
 8003338:	2300      	movs	r3, #0
 800333a:	4a70      	ldr	r2, [pc, #448]	; (80034fc <OTM8009A_Init+0x348>)
 800333c:	21d9      	movs	r1, #217	; 0xd9
 800333e:	f000 ff4b 	bl	80041d8 <otm8009a_write_reg>
 8003342:	4602      	mov	r2, r0
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	4413      	add	r3, r2
 8003348:	617b      	str	r3, [r7, #20]
  
  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f103 0010 	add.w	r0, r3, #16
 8003350:	2300      	movs	r3, #0
 8003352:	4a6b      	ldr	r2, [pc, #428]	; (8003500 <OTM8009A_Init+0x34c>)
 8003354:	2100      	movs	r1, #0
 8003356:	f000 ff3f 	bl	80041d8 <otm8009a_write_reg>
 800335a:	4602      	mov	r2, r0
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	4413      	add	r3, r2
 8003360:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f103 0010 	add.w	r0, r3, #16
 8003368:	2300      	movs	r3, #0
 800336a:	4a66      	ldr	r2, [pc, #408]	; (8003504 <OTM8009A_Init+0x350>)
 800336c:	21c1      	movs	r1, #193	; 0xc1
 800336e:	f000 ff33 	bl	80041d8 <otm8009a_write_reg>
 8003372:	4602      	mov	r2, r0
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	4413      	add	r3, r2
 8003378:	617b      	str	r3, [r7, #20]
  
  /* Video mode internal */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f103 0010 	add.w	r0, r3, #16
 8003380:	2300      	movs	r3, #0
 8003382:	4a61      	ldr	r2, [pc, #388]	; (8003508 <OTM8009A_Init+0x354>)
 8003384:	2100      	movs	r1, #0
 8003386:	f000 ff27 	bl	80041d8 <otm8009a_write_reg>
 800338a:	4602      	mov	r2, r0
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	4413      	add	r3, r2
 8003390:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f103 0010 	add.w	r0, r3, #16
 8003398:	2300      	movs	r3, #0
 800339a:	4a5c      	ldr	r2, [pc, #368]	; (800350c <OTM8009A_Init+0x358>)
 800339c:	21c1      	movs	r1, #193	; 0xc1
 800339e:	f000 ff1b 	bl	80041d8 <otm8009a_write_reg>
 80033a2:	4602      	mov	r2, r0
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	4413      	add	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f103 0010 	add.w	r0, r3, #16
 80033b0:	2300      	movs	r3, #0
 80033b2:	4a57      	ldr	r2, [pc, #348]	; (8003510 <OTM8009A_Init+0x35c>)
 80033b4:	2100      	movs	r1, #0
 80033b6:	f000 ff0f 	bl	80041d8 <otm8009a_write_reg>
 80033ba:	4602      	mov	r2, r0
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	4413      	add	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f103 0010 	add.w	r0, r3, #16
 80033c8:	2300      	movs	r3, #0
 80033ca:	4a52      	ldr	r2, [pc, #328]	; (8003514 <OTM8009A_Init+0x360>)
 80033cc:	21c5      	movs	r1, #197	; 0xc5
 80033ce:	f000 ff03 	bl	80041d8 <otm8009a_write_reg>
 80033d2:	4602      	mov	r2, r0
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	4413      	add	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f103 0010 	add.w	r0, r3, #16
 80033e0:	2300      	movs	r3, #0
 80033e2:	4a4d      	ldr	r2, [pc, #308]	; (8003518 <OTM8009A_Init+0x364>)
 80033e4:	2100      	movs	r1, #0
 80033e6:	f000 fef7 	bl	80041d8 <otm8009a_write_reg>
 80033ea:	4602      	mov	r2, r0
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	4413      	add	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f103 0010 	add.w	r0, r3, #16
 80033f8:	2300      	movs	r3, #0
 80033fa:	4a3d      	ldr	r2, [pc, #244]	; (80034f0 <OTM8009A_Init+0x33c>)
 80033fc:	21c5      	movs	r1, #197	; 0xc5
 80033fe:	f000 feeb 	bl	80041d8 <otm8009a_write_reg>
 8003402:	4602      	mov	r2, r0
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	4413      	add	r3, r2
 8003408:	617b      	str	r3, [r7, #20]
  
  /* GVDD/NGVDD settings */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f103 0010 	add.w	r0, r3, #16
 8003410:	2300      	movs	r3, #0
 8003412:	4a2d      	ldr	r2, [pc, #180]	; (80034c8 <OTM8009A_Init+0x314>)
 8003414:	2100      	movs	r1, #0
 8003416:	f000 fedf 	bl	80041d8 <otm8009a_write_reg>
 800341a:	4602      	mov	r2, r0
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	4413      	add	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f103 0010 	add.w	r0, r3, #16
 8003428:	2302      	movs	r3, #2
 800342a:	4a3c      	ldr	r2, [pc, #240]	; (800351c <OTM8009A_Init+0x368>)
 800342c:	21d8      	movs	r1, #216	; 0xd8
 800342e:	f000 fed3 	bl	80041d8 <otm8009a_write_reg>
 8003432:	4602      	mov	r2, r0
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	4413      	add	r3, r2
 8003438:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f103 0010 	add.w	r0, r3, #16
 8003440:	2300      	movs	r3, #0
 8003442:	4a37      	ldr	r2, [pc, #220]	; (8003520 <OTM8009A_Init+0x36c>)
 8003444:	2100      	movs	r1, #0
 8003446:	f000 fec7 	bl	80041d8 <otm8009a_write_reg>
 800344a:	4602      	mov	r2, r0
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	4413      	add	r3, r2
 8003450:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f103 0010 	add.w	r0, r3, #16
 8003458:	2300      	movs	r3, #0
 800345a:	4a32      	ldr	r2, [pc, #200]	; (8003524 <OTM8009A_Init+0x370>)
 800345c:	21c5      	movs	r1, #197	; 0xc5
 800345e:	f000 febb 	bl	80041d8 <otm8009a_write_reg>
 8003462:	4602      	mov	r2, r0
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	4413      	add	r3, r2
 8003468:	617b      	str	r3, [r7, #20]
  
  /* Panel display timing Setting 3 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f103 0010 	add.w	r0, r3, #16
 8003470:	2300      	movs	r3, #0
 8003472:	4a2d      	ldr	r2, [pc, #180]	; (8003528 <OTM8009A_Init+0x374>)
 8003474:	2100      	movs	r1, #0
 8003476:	f000 feaf 	bl	80041d8 <otm8009a_write_reg>
 800347a:	4602      	mov	r2, r0
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	4413      	add	r3, r2
 8003480:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f103 0010 	add.w	r0, r3, #16
 8003488:	2300      	movs	r3, #0
 800348a:	4a28      	ldr	r2, [pc, #160]	; (800352c <OTM8009A_Init+0x378>)
 800348c:	21c0      	movs	r1, #192	; 0xc0
 800348e:	f000 fea3 	bl	80041d8 <otm8009a_write_reg>
 8003492:	4602      	mov	r2, r0
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	4413      	add	r3, r2
 8003498:	617b      	str	r3, [r7, #20]
  
  /* Power control 1 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f103 0010 	add.w	r0, r3, #16
 80034a0:	2300      	movs	r3, #0
 80034a2:	4a23      	ldr	r2, [pc, #140]	; (8003530 <OTM8009A_Init+0x37c>)
 80034a4:	2100      	movs	r1, #0
 80034a6:	f000 fe97 	bl	80041d8 <otm8009a_write_reg>
 80034aa:	4602      	mov	r2, r0
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	4413      	add	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f103 0010 	add.w	r0, r3, #16
 80034b8:	2300      	movs	r3, #0
 80034ba:	4a1e      	ldr	r2, [pc, #120]	; (8003534 <OTM8009A_Init+0x380>)
 80034bc:	21c5      	movs	r1, #197	; 0xc5
 80034be:	f000 fe8b 	bl	80041d8 <otm8009a_write_reg>
 80034c2:	4602      	mov	r2, r0
 80034c4:	e038      	b.n	8003538 <OTM8009A_Init+0x384>
 80034c6:	bf00      	nop
 80034c8:	0801300d 	.word	0x0801300d
 80034cc:	08013040 	.word	0x08013040
 80034d0:	0801300e 	.word	0x0801300e
 80034d4:	08013044 	.word	0x08013044
 80034d8:	0801300f 	.word	0x0801300f
 80034dc:	08013010 	.word	0x08013010
 80034e0:	08013011 	.word	0x08013011
 80034e4:	08013012 	.word	0x08013012
 80034e8:	08013013 	.word	0x08013013
 80034ec:	08013014 	.word	0x08013014
 80034f0:	08013015 	.word	0x08013015
 80034f4:	08013016 	.word	0x08013016
 80034f8:	08013017 	.word	0x08013017
 80034fc:	08013018 	.word	0x08013018
 8003500:	08013019 	.word	0x08013019
 8003504:	0801301a 	.word	0x0801301a
 8003508:	0801301b 	.word	0x0801301b
 800350c:	0801301c 	.word	0x0801301c
 8003510:	0801301d 	.word	0x0801301d
 8003514:	0801301e 	.word	0x0801301e
 8003518:	0801301f 	.word	0x0801301f
 800351c:	08013048 	.word	0x08013048
 8003520:	08013020 	.word	0x08013020
 8003524:	08013021 	.word	0x08013021
 8003528:	08013022 	.word	0x08013022
 800352c:	08013023 	.word	0x08013023
 8003530:	08013024 	.word	0x08013024
 8003534:	08013025 	.word	0x08013025
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	4413      	add	r3, r2
 800353c:	617b      	str	r3, [r7, #20]
  
  /* Source driver precharge */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f103 0010 	add.w	r0, r3, #16
 8003544:	2300      	movs	r3, #0
 8003546:	4abe      	ldr	r2, [pc, #760]	; (8003840 <OTM8009A_Init+0x68c>)
 8003548:	2100      	movs	r1, #0
 800354a:	f000 fe45 	bl	80041d8 <otm8009a_write_reg>
 800354e:	4602      	mov	r2, r0
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	4413      	add	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f103 0010 	add.w	r0, r3, #16
 800355c:	2300      	movs	r3, #0
 800355e:	4ab9      	ldr	r2, [pc, #740]	; (8003844 <OTM8009A_Init+0x690>)
 8003560:	21c4      	movs	r1, #196	; 0xc4
 8003562:	f000 fe39 	bl	80041d8 <otm8009a_write_reg>
 8003566:	4602      	mov	r2, r0
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	4413      	add	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f103 0010 	add.w	r0, r3, #16
 8003574:	2300      	movs	r3, #0
 8003576:	4ab4      	ldr	r2, [pc, #720]	; (8003848 <OTM8009A_Init+0x694>)
 8003578:	2100      	movs	r1, #0
 800357a:	f000 fe2d 	bl	80041d8 <otm8009a_write_reg>
 800357e:	4602      	mov	r2, r0
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	4413      	add	r3, r2
 8003584:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f103 0010 	add.w	r0, r3, #16
 800358c:	2300      	movs	r3, #0
 800358e:	4aaf      	ldr	r2, [pc, #700]	; (800384c <OTM8009A_Init+0x698>)
 8003590:	21c1      	movs	r1, #193	; 0xc1
 8003592:	f000 fe21 	bl	80041d8 <otm8009a_write_reg>
 8003596:	4602      	mov	r2, r0
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	4413      	add	r3, r2
 800359c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f103 0010 	add.w	r0, r3, #16
 80035a4:	2300      	movs	r3, #0
 80035a6:	4aaa      	ldr	r2, [pc, #680]	; (8003850 <OTM8009A_Init+0x69c>)
 80035a8:	2100      	movs	r1, #0
 80035aa:	f000 fe15 	bl	80041d8 <otm8009a_write_reg>
 80035ae:	4602      	mov	r2, r0
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	4413      	add	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f103 0010 	add.w	r0, r3, #16
 80035bc:	2302      	movs	r3, #2
 80035be:	4aa5      	ldr	r2, [pc, #660]	; (8003854 <OTM8009A_Init+0x6a0>)
 80035c0:	21b3      	movs	r1, #179	; 0xb3
 80035c2:	f000 fe09 	bl	80041d8 <otm8009a_write_reg>
 80035c6:	4602      	mov	r2, r0
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	4413      	add	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]
  
  /* GOAVST */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f103 0010 	add.w	r0, r3, #16
 80035d4:	2300      	movs	r3, #0
 80035d6:	4aa0      	ldr	r2, [pc, #640]	; (8003858 <OTM8009A_Init+0x6a4>)
 80035d8:	2100      	movs	r1, #0
 80035da:	f000 fdfd 	bl	80041d8 <otm8009a_write_reg>
 80035de:	4602      	mov	r2, r0
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	4413      	add	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f103 0010 	add.w	r0, r3, #16
 80035ec:	2306      	movs	r3, #6
 80035ee:	4a9b      	ldr	r2, [pc, #620]	; (800385c <OTM8009A_Init+0x6a8>)
 80035f0:	21ce      	movs	r1, #206	; 0xce
 80035f2:	f000 fdf1 	bl	80041d8 <otm8009a_write_reg>
 80035f6:	4602      	mov	r2, r0
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	4413      	add	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f103 0010 	add.w	r0, r3, #16
 8003604:	2300      	movs	r3, #0
 8003606:	4a96      	ldr	r2, [pc, #600]	; (8003860 <OTM8009A_Init+0x6ac>)
 8003608:	2100      	movs	r1, #0
 800360a:	f000 fde5 	bl	80041d8 <otm8009a_write_reg>
 800360e:	4602      	mov	r2, r0
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	4413      	add	r3, r2
 8003614:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f103 0010 	add.w	r0, r3, #16
 800361c:	230e      	movs	r3, #14
 800361e:	4a91      	ldr	r2, [pc, #580]	; (8003864 <OTM8009A_Init+0x6b0>)
 8003620:	21ce      	movs	r1, #206	; 0xce
 8003622:	f000 fdd9 	bl	80041d8 <otm8009a_write_reg>
 8003626:	4602      	mov	r2, r0
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	4413      	add	r3, r2
 800362c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f103 0010 	add.w	r0, r3, #16
 8003634:	2300      	movs	r3, #0
 8003636:	4a8c      	ldr	r2, [pc, #560]	; (8003868 <OTM8009A_Init+0x6b4>)
 8003638:	2100      	movs	r1, #0
 800363a:	f000 fdcd 	bl	80041d8 <otm8009a_write_reg>
 800363e:	4602      	mov	r2, r0
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	4413      	add	r3, r2
 8003644:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f103 0010 	add.w	r0, r3, #16
 800364c:	230e      	movs	r3, #14
 800364e:	4a87      	ldr	r2, [pc, #540]	; (800386c <OTM8009A_Init+0x6b8>)
 8003650:	21ce      	movs	r1, #206	; 0xce
 8003652:	f000 fdc1 	bl	80041d8 <otm8009a_write_reg>
 8003656:	4602      	mov	r2, r0
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	4413      	add	r3, r2
 800365c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f103 0010 	add.w	r0, r3, #16
 8003664:	2300      	movs	r3, #0
 8003666:	4a82      	ldr	r2, [pc, #520]	; (8003870 <OTM8009A_Init+0x6bc>)
 8003668:	2100      	movs	r1, #0
 800366a:	f000 fdb5 	bl	80041d8 <otm8009a_write_reg>
 800366e:	4602      	mov	r2, r0
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	4413      	add	r3, r2
 8003674:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f103 0010 	add.w	r0, r3, #16
 800367c:	230a      	movs	r3, #10
 800367e:	4a7d      	ldr	r2, [pc, #500]	; (8003874 <OTM8009A_Init+0x6c0>)
 8003680:	21cf      	movs	r1, #207	; 0xcf
 8003682:	f000 fda9 	bl	80041d8 <otm8009a_write_reg>
 8003686:	4602      	mov	r2, r0
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	4413      	add	r3, r2
 800368c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f103 0010 	add.w	r0, r3, #16
 8003694:	2300      	movs	r3, #0
 8003696:	4a78      	ldr	r2, [pc, #480]	; (8003878 <OTM8009A_Init+0x6c4>)
 8003698:	2100      	movs	r1, #0
 800369a:	f000 fd9d 	bl	80041d8 <otm8009a_write_reg>
 800369e:	4602      	mov	r2, r0
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	4413      	add	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f103 0010 	add.w	r0, r3, #16
 80036ac:	2300      	movs	r3, #0
 80036ae:	4a73      	ldr	r2, [pc, #460]	; (800387c <OTM8009A_Init+0x6c8>)
 80036b0:	21cf      	movs	r1, #207	; 0xcf
 80036b2:	f000 fd91 	bl	80041d8 <otm8009a_write_reg>
 80036b6:	4602      	mov	r2, r0
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	4413      	add	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f103 0010 	add.w	r0, r3, #16
 80036c4:	2300      	movs	r3, #0
 80036c6:	4a64      	ldr	r2, [pc, #400]	; (8003858 <OTM8009A_Init+0x6a4>)
 80036c8:	2100      	movs	r1, #0
 80036ca:	f000 fd85 	bl	80041d8 <otm8009a_write_reg>
 80036ce:	4602      	mov	r2, r0
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	4413      	add	r3, r2
 80036d4:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f103 0010 	add.w	r0, r3, #16
 80036dc:	230a      	movs	r3, #10
 80036de:	4a68      	ldr	r2, [pc, #416]	; (8003880 <OTM8009A_Init+0x6cc>)
 80036e0:	21cb      	movs	r1, #203	; 0xcb
 80036e2:	f000 fd79 	bl	80041d8 <otm8009a_write_reg>
 80036e6:	4602      	mov	r2, r0
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	4413      	add	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f103 0010 	add.w	r0, r3, #16
 80036f4:	2300      	movs	r3, #0
 80036f6:	4a63      	ldr	r2, [pc, #396]	; (8003884 <OTM8009A_Init+0x6d0>)
 80036f8:	2100      	movs	r1, #0
 80036fa:	f000 fd6d 	bl	80041d8 <otm8009a_write_reg>
 80036fe:	4602      	mov	r2, r0
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	4413      	add	r3, r2
 8003704:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f103 0010 	add.w	r0, r3, #16
 800370c:	230f      	movs	r3, #15
 800370e:	4a5e      	ldr	r2, [pc, #376]	; (8003888 <OTM8009A_Init+0x6d4>)
 8003710:	21cb      	movs	r1, #203	; 0xcb
 8003712:	f000 fd61 	bl	80041d8 <otm8009a_write_reg>
 8003716:	4602      	mov	r2, r0
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	4413      	add	r3, r2
 800371c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f103 0010 	add.w	r0, r3, #16
 8003724:	2300      	movs	r3, #0
 8003726:	4a4e      	ldr	r2, [pc, #312]	; (8003860 <OTM8009A_Init+0x6ac>)
 8003728:	2100      	movs	r1, #0
 800372a:	f000 fd55 	bl	80041d8 <otm8009a_write_reg>
 800372e:	4602      	mov	r2, r0
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	4413      	add	r3, r2
 8003734:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f103 0010 	add.w	r0, r3, #16
 800373c:	230f      	movs	r3, #15
 800373e:	4a53      	ldr	r2, [pc, #332]	; (800388c <OTM8009A_Init+0x6d8>)
 8003740:	21cb      	movs	r1, #203	; 0xcb
 8003742:	f000 fd49 	bl	80041d8 <otm8009a_write_reg>
 8003746:	4602      	mov	r2, r0
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	4413      	add	r3, r2
 800374c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f103 0010 	add.w	r0, r3, #16
 8003754:	2300      	movs	r3, #0
 8003756:	4a44      	ldr	r2, [pc, #272]	; (8003868 <OTM8009A_Init+0x6b4>)
 8003758:	2100      	movs	r1, #0
 800375a:	f000 fd3d 	bl	80041d8 <otm8009a_write_reg>
 800375e:	4602      	mov	r2, r0
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	4413      	add	r3, r2
 8003764:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f103 0010 	add.w	r0, r3, #16
 800376c:	230a      	movs	r3, #10
 800376e:	4a48      	ldr	r2, [pc, #288]	; (8003890 <OTM8009A_Init+0x6dc>)
 8003770:	21cb      	movs	r1, #203	; 0xcb
 8003772:	f000 fd31 	bl	80041d8 <otm8009a_write_reg>
 8003776:	4602      	mov	r2, r0
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	4413      	add	r3, r2
 800377c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f103 0010 	add.w	r0, r3, #16
 8003784:	2300      	movs	r3, #0
 8003786:	4a3a      	ldr	r2, [pc, #232]	; (8003870 <OTM8009A_Init+0x6bc>)
 8003788:	2100      	movs	r1, #0
 800378a:	f000 fd25 	bl	80041d8 <otm8009a_write_reg>
 800378e:	4602      	mov	r2, r0
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	4413      	add	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f103 0010 	add.w	r0, r3, #16
 800379c:	230f      	movs	r3, #15
 800379e:	4a3d      	ldr	r2, [pc, #244]	; (8003894 <OTM8009A_Init+0x6e0>)
 80037a0:	21cb      	movs	r1, #203	; 0xcb
 80037a2:	f000 fd19 	bl	80041d8 <otm8009a_write_reg>
 80037a6:	4602      	mov	r2, r0
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	4413      	add	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f103 0010 	add.w	r0, r3, #16
 80037b4:	2300      	movs	r3, #0
 80037b6:	4a30      	ldr	r2, [pc, #192]	; (8003878 <OTM8009A_Init+0x6c4>)
 80037b8:	2100      	movs	r1, #0
 80037ba:	f000 fd0d 	bl	80041d8 <otm8009a_write_reg>
 80037be:	4602      	mov	r2, r0
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	4413      	add	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f103 0010 	add.w	r0, r3, #16
 80037cc:	230f      	movs	r3, #15
 80037ce:	4a32      	ldr	r2, [pc, #200]	; (8003898 <OTM8009A_Init+0x6e4>)
 80037d0:	21cb      	movs	r1, #203	; 0xcb
 80037d2:	f000 fd01 	bl	80041d8 <otm8009a_write_reg>
 80037d6:	4602      	mov	r2, r0
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	4413      	add	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f103 0010 	add.w	r0, r3, #16
 80037e4:	2300      	movs	r3, #0
 80037e6:	4a2d      	ldr	r2, [pc, #180]	; (800389c <OTM8009A_Init+0x6e8>)
 80037e8:	2100      	movs	r1, #0
 80037ea:	f000 fcf5 	bl	80041d8 <otm8009a_write_reg>
 80037ee:	4602      	mov	r2, r0
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	4413      	add	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f103 0010 	add.w	r0, r3, #16
 80037fc:	230a      	movs	r3, #10
 80037fe:	4a28      	ldr	r2, [pc, #160]	; (80038a0 <OTM8009A_Init+0x6ec>)
 8003800:	21cb      	movs	r1, #203	; 0xcb
 8003802:	f000 fce9 	bl	80041d8 <otm8009a_write_reg>
 8003806:	4602      	mov	r2, r0
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	4413      	add	r3, r2
 800380c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f103 0010 	add.w	r0, r3, #16
 8003814:	2300      	movs	r3, #0
 8003816:	4a23      	ldr	r2, [pc, #140]	; (80038a4 <OTM8009A_Init+0x6f0>)
 8003818:	2100      	movs	r1, #0
 800381a:	f000 fcdd 	bl	80041d8 <otm8009a_write_reg>
 800381e:	4602      	mov	r2, r0
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	4413      	add	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f103 0010 	add.w	r0, r3, #16
 800382c:	230a      	movs	r3, #10
 800382e:	4a1e      	ldr	r2, [pc, #120]	; (80038a8 <OTM8009A_Init+0x6f4>)
 8003830:	21cb      	movs	r1, #203	; 0xcb
 8003832:	f000 fcd1 	bl	80041d8 <otm8009a_write_reg>
 8003836:	4602      	mov	r2, r0
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	4413      	add	r3, r2
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	e035      	b.n	80038ac <OTM8009A_Init+0x6f8>
 8003840:	08013019 	.word	0x08013019
 8003844:	08013026 	.word	0x08013026
 8003848:	0801301b 	.word	0x0801301b
 800384c:	08013027 	.word	0x08013027
 8003850:	08013028 	.word	0x08013028
 8003854:	0801304c 	.word	0x0801304c
 8003858:	0801300e 	.word	0x0801300e
 800385c:	08013050 	.word	0x08013050
 8003860:	08013029 	.word	0x08013029
 8003864:	08013058 	.word	0x08013058
 8003868:	0801302a 	.word	0x0801302a
 800386c:	08013068 	.word	0x08013068
 8003870:	0801302b 	.word	0x0801302b
 8003874:	08013078 	.word	0x08013078
 8003878:	0801302c 	.word	0x0801302c
 800387c:	08013039 	.word	0x08013039
 8003880:	08013084 	.word	0x08013084
 8003884:	0801302d 	.word	0x0801302d
 8003888:	08013090 	.word	0x08013090
 800388c:	080130a0 	.word	0x080130a0
 8003890:	080130b0 	.word	0x080130b0
 8003894:	080130bc 	.word	0x080130bc
 8003898:	080130cc 	.word	0x080130cc
 800389c:	0801302e 	.word	0x0801302e
 80038a0:	080130dc 	.word	0x080130dc
 80038a4:	0801302f 	.word	0x0801302f
 80038a8:	080130e8 	.word	0x080130e8
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f103 0010 	add.w	r0, r3, #16
 80038b2:	2300      	movs	r3, #0
 80038b4:	4aae      	ldr	r2, [pc, #696]	; (8003b70 <OTM8009A_Init+0x9bc>)
 80038b6:	2100      	movs	r1, #0
 80038b8:	f000 fc8e 	bl	80041d8 <otm8009a_write_reg>
 80038bc:	4602      	mov	r2, r0
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	4413      	add	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f103 0010 	add.w	r0, r3, #16
 80038ca:	230a      	movs	r3, #10
 80038cc:	4aa9      	ldr	r2, [pc, #676]	; (8003b74 <OTM8009A_Init+0x9c0>)
 80038ce:	21cc      	movs	r1, #204	; 0xcc
 80038d0:	f000 fc82 	bl	80041d8 <otm8009a_write_reg>
 80038d4:	4602      	mov	r2, r0
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	4413      	add	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f103 0010 	add.w	r0, r3, #16
 80038e2:	2300      	movs	r3, #0
 80038e4:	4aa4      	ldr	r2, [pc, #656]	; (8003b78 <OTM8009A_Init+0x9c4>)
 80038e6:	2100      	movs	r1, #0
 80038e8:	f000 fc76 	bl	80041d8 <otm8009a_write_reg>
 80038ec:	4602      	mov	r2, r0
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	4413      	add	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f103 0010 	add.w	r0, r3, #16
 80038fa:	230f      	movs	r3, #15
 80038fc:	4a9f      	ldr	r2, [pc, #636]	; (8003b7c <OTM8009A_Init+0x9c8>)
 80038fe:	21cc      	movs	r1, #204	; 0xcc
 8003900:	f000 fc6a 	bl	80041d8 <otm8009a_write_reg>
 8003904:	4602      	mov	r2, r0
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	4413      	add	r3, r2
 800390a:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f103 0010 	add.w	r0, r3, #16
 8003912:	2300      	movs	r3, #0
 8003914:	4a9a      	ldr	r2, [pc, #616]	; (8003b80 <OTM8009A_Init+0x9cc>)
 8003916:	2100      	movs	r1, #0
 8003918:	f000 fc5e 	bl	80041d8 <otm8009a_write_reg>
 800391c:	4602      	mov	r2, r0
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	4413      	add	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f103 0010 	add.w	r0, r3, #16
 800392a:	230f      	movs	r3, #15
 800392c:	4a95      	ldr	r2, [pc, #596]	; (8003b84 <OTM8009A_Init+0x9d0>)
 800392e:	21cc      	movs	r1, #204	; 0xcc
 8003930:	f000 fc52 	bl	80041d8 <otm8009a_write_reg>
 8003934:	4602      	mov	r2, r0
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	4413      	add	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f103 0010 	add.w	r0, r3, #16
 8003942:	2300      	movs	r3, #0
 8003944:	4a90      	ldr	r2, [pc, #576]	; (8003b88 <OTM8009A_Init+0x9d4>)
 8003946:	2100      	movs	r1, #0
 8003948:	f000 fc46 	bl	80041d8 <otm8009a_write_reg>
 800394c:	4602      	mov	r2, r0
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	4413      	add	r3, r2
 8003952:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f103 0010 	add.w	r0, r3, #16
 800395a:	230a      	movs	r3, #10
 800395c:	4a8b      	ldr	r2, [pc, #556]	; (8003b8c <OTM8009A_Init+0x9d8>)
 800395e:	21cc      	movs	r1, #204	; 0xcc
 8003960:	f000 fc3a 	bl	80041d8 <otm8009a_write_reg>
 8003964:	4602      	mov	r2, r0
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	4413      	add	r3, r2
 800396a:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f103 0010 	add.w	r0, r3, #16
 8003972:	2300      	movs	r3, #0
 8003974:	4a86      	ldr	r2, [pc, #536]	; (8003b90 <OTM8009A_Init+0x9dc>)
 8003976:	2100      	movs	r1, #0
 8003978:	f000 fc2e 	bl	80041d8 <otm8009a_write_reg>
 800397c:	4602      	mov	r2, r0
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	4413      	add	r3, r2
 8003982:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f103 0010 	add.w	r0, r3, #16
 800398a:	230f      	movs	r3, #15
 800398c:	4a81      	ldr	r2, [pc, #516]	; (8003b94 <OTM8009A_Init+0x9e0>)
 800398e:	21cc      	movs	r1, #204	; 0xcc
 8003990:	f000 fc22 	bl	80041d8 <otm8009a_write_reg>
 8003994:	4602      	mov	r2, r0
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	4413      	add	r3, r2
 800399a:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f103 0010 	add.w	r0, r3, #16
 80039a2:	2300      	movs	r3, #0
 80039a4:	4a7c      	ldr	r2, [pc, #496]	; (8003b98 <OTM8009A_Init+0x9e4>)
 80039a6:	2100      	movs	r1, #0
 80039a8:	f000 fc16 	bl	80041d8 <otm8009a_write_reg>
 80039ac:	4602      	mov	r2, r0
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	4413      	add	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f103 0010 	add.w	r0, r3, #16
 80039ba:	230f      	movs	r3, #15
 80039bc:	4a77      	ldr	r2, [pc, #476]	; (8003b9c <OTM8009A_Init+0x9e8>)
 80039be:	21cc      	movs	r1, #204	; 0xcc
 80039c0:	f000 fc0a 	bl	80041d8 <otm8009a_write_reg>
 80039c4:	4602      	mov	r2, r0
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	4413      	add	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
  
  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f103 0010 	add.w	r0, r3, #16
 80039d2:	2300      	movs	r3, #0
 80039d4:	4a72      	ldr	r2, [pc, #456]	; (8003ba0 <OTM8009A_Init+0x9ec>)
 80039d6:	2100      	movs	r1, #0
 80039d8:	f000 fbfe 	bl	80041d8 <otm8009a_write_reg>
 80039dc:	4602      	mov	r2, r0
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	4413      	add	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f103 0010 	add.w	r0, r3, #16
 80039ea:	2300      	movs	r3, #0
 80039ec:	4a6d      	ldr	r2, [pc, #436]	; (8003ba4 <OTM8009A_Init+0x9f0>)
 80039ee:	21c5      	movs	r1, #197	; 0xc5
 80039f0:	f000 fbf2 	bl	80041d8 <otm8009a_write_reg>
 80039f4:	4602      	mov	r2, r0
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	4413      	add	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f103 0010 	add.w	r0, r3, #16
 8003a02:	2300      	movs	r3, #0
 8003a04:	4a68      	ldr	r2, [pc, #416]	; (8003ba8 <OTM8009A_Init+0x9f4>)
 8003a06:	2100      	movs	r1, #0
 8003a08:	f000 fbe6 	bl	80041d8 <otm8009a_write_reg>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	4413      	add	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f103 0010 	add.w	r0, r3, #16
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	4a63      	ldr	r2, [pc, #396]	; (8003bac <OTM8009A_Init+0x9f8>)
 8003a1e:	21f5      	movs	r1, #245	; 0xf5
 8003a20:	f000 fbda 	bl	80041d8 <otm8009a_write_reg>
 8003a24:	4602      	mov	r2, r0
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	4413      	add	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
  /////////////////////////////////////////////////////////////////////////////
  
  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f103 0010 	add.w	r0, r3, #16
 8003a32:	2300      	movs	r3, #0
 8003a34:	4a5e      	ldr	r2, [pc, #376]	; (8003bb0 <OTM8009A_Init+0x9fc>)
 8003a36:	2100      	movs	r1, #0
 8003a38:	f000 fbce 	bl	80041d8 <otm8009a_write_reg>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	4413      	add	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f103 0010 	add.w	r0, r3, #16
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	4a59      	ldr	r2, [pc, #356]	; (8003bb4 <OTM8009A_Init+0xa00>)
 8003a4e:	21c6      	movs	r1, #198	; 0xc6
 8003a50:	f000 fbc2 	bl	80041d8 <otm8009a_write_reg>
 8003a54:	4602      	mov	r2, r0
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	4413      	add	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
  
  /* Exit CMD2 mode */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f103 0010 	add.w	r0, r3, #16
 8003a62:	2300      	movs	r3, #0
 8003a64:	4a54      	ldr	r2, [pc, #336]	; (8003bb8 <OTM8009A_Init+0xa04>)
 8003a66:	2100      	movs	r1, #0
 8003a68:	f000 fbb6 	bl	80041d8 <otm8009a_write_reg>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	4413      	add	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f103 0010 	add.w	r0, r3, #16
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	4a4f      	ldr	r2, [pc, #316]	; (8003bbc <OTM8009A_Init+0xa08>)
 8003a7e:	21ff      	movs	r1, #255	; 0xff
 8003a80:	f000 fbaa 	bl	80041d8 <otm8009a_write_reg>
 8003a84:	4602      	mov	r2, r0
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	4413      	add	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */
  
  /* NOP - goes back to DCS std command ? */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f103 0010 	add.w	r0, r3, #16
 8003a92:	2300      	movs	r3, #0
 8003a94:	4a48      	ldr	r2, [pc, #288]	; (8003bb8 <OTM8009A_Init+0xa04>)
 8003a96:	2100      	movs	r1, #0
 8003a98:	f000 fb9e 	bl	80041d8 <otm8009a_write_reg>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
  
  /* Gamma correction 2.2+ table (HSDT possible) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f103 0010 	add.w	r0, r3, #16
 8003aaa:	2300      	movs	r3, #0
 8003aac:	4a42      	ldr	r2, [pc, #264]	; (8003bb8 <OTM8009A_Init+0xa04>)
 8003aae:	2100      	movs	r1, #0
 8003ab0:	f000 fb92 	bl	80041d8 <otm8009a_write_reg>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	4413      	add	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f103 0010 	add.w	r0, r3, #16
 8003ac2:	2310      	movs	r3, #16
 8003ac4:	4a3e      	ldr	r2, [pc, #248]	; (8003bc0 <OTM8009A_Init+0xa0c>)
 8003ac6:	21e1      	movs	r1, #225	; 0xe1
 8003ac8:	f000 fb86 	bl	80041d8 <otm8009a_write_reg>
 8003acc:	4602      	mov	r2, r0
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]
  
  /* Gamma correction 2.2- table (HSDT possible) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f103 0010 	add.w	r0, r3, #16
 8003ada:	2300      	movs	r3, #0
 8003adc:	4a36      	ldr	r2, [pc, #216]	; (8003bb8 <OTM8009A_Init+0xa04>)
 8003ade:	2100      	movs	r1, #0
 8003ae0:	f000 fb7a 	bl	80041d8 <otm8009a_write_reg>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	4413      	add	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f103 0010 	add.w	r0, r3, #16
 8003af2:	2310      	movs	r3, #16
 8003af4:	4a33      	ldr	r2, [pc, #204]	; (8003bc4 <OTM8009A_Init+0xa10>)
 8003af6:	21e2      	movs	r1, #226	; 0xe2
 8003af8:	f000 fb6e 	bl	80041d8 <otm8009a_write_reg>
 8003afc:	4602      	mov	r2, r0
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	4413      	add	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
  
  /* Send Sleep Out command to display : no parameter */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f103 0010 	add.w	r0, r3, #16
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	4a2e      	ldr	r2, [pc, #184]	; (8003bc8 <OTM8009A_Init+0xa14>)
 8003b0e:	2111      	movs	r1, #17
 8003b10:	f000 fb62 	bl	80041d8 <otm8009a_write_reg>
 8003b14:	4602      	mov	r2, r0
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	4413      	add	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
  
  /* Wait for sleep out exit */
  (void)OTM8009A_IO_Delay(pObj, 120);
 8003b1c:	2178      	movs	r1, #120	; 0x78
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fb29 	bl	8004176 <OTM8009A_IO_Delay>
  
  switch(ColorCoding)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d012      	beq.n	8003b50 <OTM8009A_Init+0x99c>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d153      	bne.n	8003bd8 <OTM8009A_Init+0xa24>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f103 0010 	add.w	r0, r3, #16
 8003b36:	2300      	movs	r3, #0
 8003b38:	4a24      	ldr	r2, [pc, #144]	; (8003bcc <OTM8009A_Init+0xa18>)
 8003b3a:	213a      	movs	r1, #58	; 0x3a
 8003b3c:	f000 fb4c 	bl	80041d8 <otm8009a_write_reg>
 8003b40:	4602      	mov	r2, r0
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	4413      	add	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RBG565;
 8003b48:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <OTM8009A_Init+0xa1c>)
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	605a      	str	r2, [r3, #4]
    break;
 8003b4e:	e044      	b.n	8003bda <OTM8009A_Init+0xa26>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f103 0010 	add.w	r0, r3, #16
 8003b56:	2300      	movs	r3, #0
 8003b58:	4a1e      	ldr	r2, [pc, #120]	; (8003bd4 <OTM8009A_Init+0xa20>)
 8003b5a:	213a      	movs	r1, #58	; 0x3a
 8003b5c:	f000 fb3c 	bl	80041d8 <otm8009a_write_reg>
 8003b60:	4602      	mov	r2, r0
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	4413      	add	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8003b68:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <OTM8009A_Init+0xa1c>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	605a      	str	r2, [r3, #4]
    break;
 8003b6e:	e034      	b.n	8003bda <OTM8009A_Init+0xa26>
 8003b70:	0801300e 	.word	0x0801300e
 8003b74:	080130f4 	.word	0x080130f4
 8003b78:	0801302d 	.word	0x0801302d
 8003b7c:	08013100 	.word	0x08013100
 8003b80:	08013029 	.word	0x08013029
 8003b84:	08013110 	.word	0x08013110
 8003b88:	0801302a 	.word	0x0801302a
 8003b8c:	08013120 	.word	0x08013120
 8003b90:	0801302b 	.word	0x0801302b
 8003b94:	0801312c 	.word	0x0801312c
 8003b98:	0801302c 	.word	0x0801302c
 8003b9c:	0801313c 	.word	0x0801313c
 8003ba0:	08013019 	.word	0x08013019
 8003ba4:	0801303a 	.word	0x0801303a
 8003ba8:	0801303b 	.word	0x0801303b
 8003bac:	0801303c 	.word	0x0801303c
 8003bb0:	0801303d 	.word	0x0801303d
 8003bb4:	0801303e 	.word	0x0801303e
 8003bb8:	0801300d 	.word	0x0801300d
 8003bbc:	0801314c 	.word	0x0801314c
 8003bc0:	08013150 	.word	0x08013150
 8003bc4:	08013160 	.word	0x08013160
 8003bc8:	08013030 	.word	0x08013030
 8003bcc:	08013031 	.word	0x08013031
 8003bd0:	24000dfc 	.word	0x24000dfc
 8003bd4:	08013032 	.word	0x08013032
  default :
    break;
 8003bd8:	bf00      	nop
  }
  
  /* Send command to configure display in landscape orientation mode. By default
  the orientation mode is portrait  */
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d12a      	bne.n	8003c36 <OTM8009A_Init+0xa82>
  {
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8003be0:	2360      	movs	r3, #96	; 0x60
 8003be2:	74fb      	strb	r3, [r7, #19]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f103 0010 	add.w	r0, r3, #16
 8003bea:	f107 0213 	add.w	r2, r7, #19
 8003bee:	2300      	movs	r3, #0
 8003bf0:	2136      	movs	r1, #54	; 0x36
 8003bf2:	f000 faf1 	bl	80041d8 <otm8009a_write_reg>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f103 0010 	add.w	r0, r3, #16
 8003c04:	2304      	movs	r3, #4
 8003c06:	4a44      	ldr	r2, [pc, #272]	; (8003d18 <OTM8009A_Init+0xb64>)
 8003c08:	212a      	movs	r1, #42	; 0x2a
 8003c0a:	f000 fae5 	bl	80041d8 <otm8009a_write_reg>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	4413      	add	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f103 0010 	add.w	r0, r3, #16
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	4a3f      	ldr	r2, [pc, #252]	; (8003d1c <OTM8009A_Init+0xb68>)
 8003c20:	212b      	movs	r1, #43	; 0x2b
 8003c22:	f000 fad9 	bl	80041d8 <otm8009a_write_reg>
 8003c26:	4602      	mov	r2, r0
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8003c2e:	4b3c      	ldr	r3, [pc, #240]	; (8003d20 <OTM8009A_Init+0xb6c>)
 8003c30:	2201      	movs	r2, #1
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	e002      	b.n	8003c3c <OTM8009A_Init+0xa88>
  }
  else
  {
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8003c36:	4b3a      	ldr	r3, [pc, #232]	; (8003d20 <OTM8009A_Init+0xb6c>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
  }
  
  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness], 0xFF is highest Brightness, try 0x7F : intermediate value */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f103 0010 	add.w	r0, r3, #16
 8003c42:	2300      	movs	r3, #0
 8003c44:	4a37      	ldr	r2, [pc, #220]	; (8003d24 <OTM8009A_Init+0xb70>)
 8003c46:	2151      	movs	r1, #81	; 0x51
 8003c48:	f000 fac6 	bl	80041d8 <otm8009a_write_reg>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	4413      	add	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
  /* Store default brightness */
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8003c54:	4b34      	ldr	r3, [pc, #208]	; (8003d28 <OTM8009A_Init+0xb74>)
 8003c56:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003c5a:	4a34      	ldr	r2, [pc, #208]	; (8003d2c <OTM8009A_Init+0xb78>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	09db      	lsrs	r3, r3, #7
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	2364      	movs	r3, #100	; 0x64
 8003c68:	fb02 f303 	mul.w	r3, r2, r3
 8003c6c:	4a2c      	ldr	r2, [pc, #176]	; (8003d20 <OTM8009A_Init+0xb6c>)
 8003c6e:	6093      	str	r3, [r2, #8]
  
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f103 0010 	add.w	r0, r3, #16
 8003c76:	2300      	movs	r3, #0
 8003c78:	4a2d      	ldr	r2, [pc, #180]	; (8003d30 <OTM8009A_Init+0xb7c>)
 8003c7a:	2153      	movs	r1, #83	; 0x53
 8003c7c:	f000 faac 	bl	80041d8 <otm8009a_write_reg>
 8003c80:	4602      	mov	r2, r0
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	4413      	add	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
  
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f103 0010 	add.w	r0, r3, #16
 8003c8e:	2300      	movs	r3, #0
 8003c90:	4a28      	ldr	r2, [pc, #160]	; (8003d34 <OTM8009A_Init+0xb80>)
 8003c92:	2155      	movs	r1, #85	; 0x55
 8003c94:	f000 faa0 	bl	80041d8 <otm8009a_write_reg>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]
  
  /* defaut is 0 (lowest Brightness], 0xFF is highest Brightness */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f103 0010 	add.w	r0, r3, #16
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	4a23      	ldr	r2, [pc, #140]	; (8003d38 <OTM8009A_Init+0xb84>)
 8003caa:	215e      	movs	r1, #94	; 0x5e
 8003cac:	f000 fa94 	bl	80041d8 <otm8009a_write_reg>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
  
  /** CABC : Content Adaptive Backlight Control section end << */
  
  /* Send Command Display On */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f103 0010 	add.w	r0, r3, #16
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	4a1e      	ldr	r2, [pc, #120]	; (8003d3c <OTM8009A_Init+0xb88>)
 8003cc2:	2129      	movs	r1, #41	; 0x29
 8003cc4:	f000 fa88 	bl	80041d8 <otm8009a_write_reg>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	4413      	add	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]
  
  /* NOP command */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f103 0010 	add.w	r0, r3, #16
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	4a19      	ldr	r2, [pc, #100]	; (8003d40 <OTM8009A_Init+0xb8c>)
 8003cda:	2100      	movs	r1, #0
 8003cdc:	f000 fa7c 	bl	80041d8 <otm8009a_write_reg>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]
  
  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f103 0010 	add.w	r0, r3, #16
 8003cee:	2300      	movs	r3, #0
 8003cf0:	4a14      	ldr	r2, [pc, #80]	; (8003d44 <OTM8009A_Init+0xb90>)
 8003cf2:	212c      	movs	r1, #44	; 0x2c
 8003cf4:	f000 fa70 	bl	80041d8 <otm8009a_write_reg>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
  
  if(ret != OTM8009A_OK)
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <OTM8009A_Init+0xb58>
  {
    ret = OTM8009A_ERROR;
 8003d06:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0a:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8003d0c:	697b      	ldr	r3, [r7, #20]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	08013004 	.word	0x08013004
 8003d1c:	08013008 	.word	0x08013008
 8003d20:	24000dfc 	.word	0x24000dfc
 8003d24:	08013033 	.word	0x08013033
 8003d28:	0801300c 	.word	0x0801300c
 8003d2c:	80808081 	.word	0x80808081
 8003d30:	08013034 	.word	0x08013034
 8003d34:	08013035 	.word	0x08013035
 8003d38:	08013036 	.word	0x08013036
 8003d3c:	08013037 	.word	0x08013037
 8003d40:	0801300d 	.word	0x0801300d
 8003d44:	08013038 	.word	0x08013038

08003d48 <OTM8009A_DeInit>:
  * @brief  De-Initializes the component
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  return OTM8009A_ERROR;
 8003d50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <OTM8009A_ReadID>:
  * @param  pObj Component object
  * @param  Id   Component ID
  * @retval Component status
  */
int32_t OTM8009A_ReadID(OTM8009A_Object_t *pObj, uint32_t *Id)
{ 
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f103 0010 	add.w	r0, r3, #16
 8003d70:	2300      	movs	r3, #0
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	21da      	movs	r1, #218	; 0xda
 8003d76:	f000 fa18 	bl	80041aa <otm8009a_read_reg>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <OTM8009A_ReadID+0x28>
  {
    ret = OTM8009A_ERROR;
 8003d80:	f04f 33ff 	mov.w	r3, #4294967295
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	e001      	b.n	8003d8c <OTM8009A_ReadID+0x2c>
  }
  else
  {
    ret = OTM8009A_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8003d8c:	68fb      	ldr	r3, [r7, #12]
}  
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <OTM8009A_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t OTM8009A_SetBrightness(OTM8009A_Object_t *pObj, uint32_t Brightness)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	4613      	mov	r3, r2
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	4a10      	ldr	r2, [pc, #64]	; (8003dec <OTM8009A_SetBrightness+0x54>)
 8003dac:	fba2 2303 	umull	r2, r3, r2, r3
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f103 0010 	add.w	r0, r3, #16
 8003dbc:	f107 020b 	add.w	r2, r7, #11
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	2151      	movs	r1, #81	; 0x51
 8003dc4:	f000 fa08 	bl	80041d8 <otm8009a_write_reg>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <OTM8009A_SetBrightness+0x3e>
  {
    ret = OTM8009A_ERROR;
 8003dce:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	e004      	b.n	8003de0 <OTM8009A_SetBrightness+0x48>
  }
  else
  {
    OTM8009ACtx.Brightness = Brightness;
 8003dd6:	4a06      	ldr	r2, [pc, #24]	; (8003df0 <OTM8009A_SetBrightness+0x58>)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	6093      	str	r3, [r2, #8]
    ret = OTM8009A_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8003de0:	68fb      	ldr	r3, [r7, #12]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	51eb851f 	.word	0x51eb851f
 8003df0:	24000dfc 	.word	0x24000dfc

08003df4 <OTM8009A_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  *Brightness = OTM8009ACtx.Brightness;
 8003dfe:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <OTM8009A_GetBrightness+0x20>)
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	601a      	str	r2, [r3, #0]
  return OTM8009A_OK;  
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	24000dfc 	.word	0x24000dfc

08003e18 <OTM8009A_DisplayOn>:
  * @brief  Set the display On.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DisplayOn(OTM8009A_Object_t *pObj)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f103 0010 	add.w	r0, r3, #16
 8003e2a:	f107 020b 	add.w	r2, r7, #11
 8003e2e:	2300      	movs	r3, #0
 8003e30:	2129      	movs	r1, #41	; 0x29
 8003e32:	f000 f9d1 	bl	80041d8 <otm8009a_write_reg>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <OTM8009A_DisplayOn+0x2c>
  {
    ret = OTM8009A_ERROR;
 8003e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	e001      	b.n	8003e48 <OTM8009A_DisplayOn+0x30>
  }
  else
  {
    ret = OTM8009A_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8003e48:	68fb      	ldr	r3, [r7, #12]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <OTM8009A_DisplayOff>:
  * @brief  Set the display Off.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DisplayOff(OTM8009A_Object_t *pObj)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f103 0010 	add.w	r0, r3, #16
 8003e64:	f107 020b 	add.w	r2, r7, #11
 8003e68:	2300      	movs	r3, #0
 8003e6a:	2128      	movs	r1, #40	; 0x28
 8003e6c:	f000 f9b4 	bl	80041d8 <otm8009a_write_reg>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <OTM8009A_DisplayOff+0x2c>
  {
    ret = OTM8009A_ERROR;
 8003e76:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	e001      	b.n	8003e82 <OTM8009A_DisplayOff+0x30>
  }
  else
  {
    ret = OTM8009A_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8003e82:	68fb      	ldr	r3, [r7, #12]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <OTM8009A_SetOrientation>:
* @param  pObj Component object
* @param  Orientation   display Orientation to be set
* @retval Component status
*/
int32_t OTM8009A_SetOrientation(OTM8009A_Object_t *pObj, uint32_t Orientation)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8003e96:	2360      	movs	r3, #96	; 0x60
 8003e98:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	72bb      	strb	r3, [r7, #10]
  
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d006      	beq.n	8003eb2 <OTM8009A_SetOrientation+0x26>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <OTM8009A_SetOrientation+0x26>
  {
    ret = OTM8009A_ERROR;
 8003eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	e04d      	b.n	8003f4e <OTM8009A_SetOrientation+0xc2>
  }/* Send command to configure display orientation mode  */
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d125      	bne.n	8003f04 <OTM8009A_SetOrientation+0x78>
  {
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f103 0010 	add.w	r0, r3, #16
 8003ebe:	f107 020b 	add.w	r2, r7, #11
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	2136      	movs	r1, #54	; 0x36
 8003ec6:	f000 f987 	bl	80041d8 <otm8009a_write_reg>
 8003eca:	60f8      	str	r0, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f103 0010 	add.w	r0, r3, #16
 8003ed2:	2304      	movs	r3, #4
 8003ed4:	4a23      	ldr	r2, [pc, #140]	; (8003f64 <OTM8009A_SetOrientation+0xd8>)
 8003ed6:	212a      	movs	r1, #42	; 0x2a
 8003ed8:	f000 f97e 	bl	80041d8 <otm8009a_write_reg>
 8003edc:	4602      	mov	r2, r0
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f103 0010 	add.w	r0, r3, #16
 8003eea:	2304      	movs	r3, #4
 8003eec:	4a1e      	ldr	r2, [pc, #120]	; (8003f68 <OTM8009A_SetOrientation+0xdc>)
 8003eee:	212b      	movs	r1, #43	; 0x2b
 8003ef0:	f000 f972 	bl	80041d8 <otm8009a_write_reg>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4413      	add	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8003efc:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <OTM8009A_SetOrientation+0xe0>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	e024      	b.n	8003f4e <OTM8009A_SetOrientation+0xc2>
  }
  else
  {
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f103 0010 	add.w	r0, r3, #16
 8003f0a:	f107 020a 	add.w	r2, r7, #10
 8003f0e:	2300      	movs	r3, #0
 8003f10:	2136      	movs	r1, #54	; 0x36
 8003f12:	f000 f961 	bl	80041d8 <otm8009a_write_reg>
 8003f16:	60f8      	str	r0, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f103 0010 	add.w	r0, r3, #16
 8003f1e:	2304      	movs	r3, #4
 8003f20:	4a10      	ldr	r2, [pc, #64]	; (8003f64 <OTM8009A_SetOrientation+0xd8>)
 8003f22:	212a      	movs	r1, #42	; 0x2a
 8003f24:	f000 f958 	bl	80041d8 <otm8009a_write_reg>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f103 0010 	add.w	r0, r3, #16
 8003f36:	2304      	movs	r3, #4
 8003f38:	4a0b      	ldr	r2, [pc, #44]	; (8003f68 <OTM8009A_SetOrientation+0xdc>)
 8003f3a:	212b      	movs	r1, #43	; 0x2b
 8003f3c:	f000 f94c 	bl	80041d8 <otm8009a_write_reg>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4413      	add	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8003f48:	4b08      	ldr	r3, [pc, #32]	; (8003f6c <OTM8009A_SetOrientation+0xe0>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
  }
  
  if(ret != OTM8009A_OK)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <OTM8009A_SetOrientation+0xce>
  {
    ret = OTM8009A_ERROR;
 8003f54:	f04f 33ff 	mov.w	r3, #4294967295
 8003f58:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	08013004 	.word	0x08013004
 8003f68:	08013008 	.word	0x08013008
 8003f6c:	24000dfc 	.word	0x24000dfc

08003f70 <OTM8009A_GetOrientation>:
  * @param  pObj Component object
  * @param  Orientation   display Orientation to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8003f7a:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <OTM8009A_GetOrientation+0x20>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	601a      	str	r2, [r3, #0]
  
  return OTM8009A_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	24000dfc 	.word	0x24000dfc

08003f94 <OTM8009A_GetXSize>:
  * @param  pObj Component object
  * @param  Xsize   display Width to be set
  * @retval Component status
  */
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8003f9e:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <OTM8009A_GetXSize+0x44>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <OTM8009A_GetXSize+0x18>
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d005      	beq.n	8003fb6 <OTM8009A_GetXSize+0x22>
 8003faa:	e009      	b.n	8003fc0 <OTM8009A_GetXSize+0x2c>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003fb2:	601a      	str	r2, [r3, #0]
    break;
 8003fb4:	e009      	b.n	8003fca <OTM8009A_GetXSize+0x36>
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003fbc:	601a      	str	r2, [r3, #0]
    break;
 8003fbe:	e004      	b.n	8003fca <OTM8009A_GetXSize+0x36>
  default:
    *Xsize = OTM8009A_800X480_WIDTH;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003fc6:	601a      	str	r2, [r3, #0]
    break;
 8003fc8:	bf00      	nop
  }
  
  return OTM8009A_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	24000dfc 	.word	0x24000dfc

08003fdc <OTM8009A_GetYSize>:
  * @param  pObj Component object
  * @param  Ysize   display Height to be set
  * @retval Component status
  */
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8003fe6:	4b0e      	ldr	r3, [pc, #56]	; (8004020 <OTM8009A_GetYSize+0x44>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <OTM8009A_GetYSize+0x18>
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d005      	beq.n	8003ffe <OTM8009A_GetYSize+0x22>
 8003ff2:	e009      	b.n	8004008 <OTM8009A_GetYSize+0x2c>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003ffa:	601a      	str	r2, [r3, #0]
    break;
 8003ffc:	e009      	b.n	8004012 <OTM8009A_GetYSize+0x36>
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004004:	601a      	str	r2, [r3, #0]
    break;
 8004006:	e004      	b.n	8004012 <OTM8009A_GetYSize+0x36>
  default:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800400e:	601a      	str	r2, [r3, #0]
    break;
 8004010:	bf00      	nop
  }
  
  return OTM8009A_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	24000dfc 	.word	0x24000dfc

08004024 <OTM8009A_SetCursor>:
  * @param  Xpos X position
  * @param  Ypos Y position
  * @retval Component status
  */
int32_t OTM8009A_SetCursor(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8004030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <OTM8009A_DrawBitmap>:
  * @param  Ypos Y position
  * @param  pBmp pointer to bmp data
  * @retval Component status
  */
int32_t OTM8009A_DrawBitmap(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 800404e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <OTM8009A_FillRGBRect>:

int32_t OTM8009A_FillRGBRect(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800405e:	b480      	push	{r7}
 8004060:	b085      	sub	sp, #20
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 800406c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <OTM8009A_DrawHLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_DrawHLine(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 800408a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <OTM8009A_DrawVLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_DrawVLine(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800409a:	b480      	push	{r7}
 800409c:	b085      	sub	sp, #20
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 80040a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <OTM8009A_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_FillRect(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 80040c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <OTM8009A_GetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetPixel(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 80040e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <OTM8009A_SetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t OTM8009A_SetPixel(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8004102:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8004112:	b590      	push	{r4, r7, lr}
 8004114:	b087      	sub	sp, #28
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	461a      	mov	r2, r3
 800411e:	460b      	mov	r3, r1
 8004120:	817b      	strh	r3, [r7, #10]
 8004122:	4613      	mov	r3, r2
 8004124:	813b      	strh	r3, [r7, #8]
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	689c      	ldr	r4, [r3, #8]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	8818      	ldrh	r0, [r3, #0]
 8004132:	893b      	ldrh	r3, [r7, #8]
 8004134:	8979      	ldrh	r1, [r7, #10]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	47a0      	blx	r4
 800413a:	4603      	mov	r3, r0
}
 800413c:	4618      	mov	r0, r3
 800413e:	371c      	adds	r7, #28
 8004140:	46bd      	mov	sp, r7
 8004142:	bd90      	pop	{r4, r7, pc}

08004144 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004144:	b590      	push	{r4, r7, lr}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	461a      	mov	r2, r3
 8004150:	460b      	mov	r3, r1
 8004152:	817b      	strh	r3, [r7, #10]
 8004154:	4613      	mov	r3, r2
 8004156:	813b      	strh	r3, [r7, #8]
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	685c      	ldr	r4, [r3, #4]
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	8818      	ldrh	r0, [r3, #0]
 8004164:	893b      	ldrh	r3, [r7, #8]
 8004166:	8979      	ldrh	r1, [r7, #10]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	47a0      	blx	r4
 800416c:	4603      	mov	r3, r0
}
 800416e:	4618      	mov	r0, r3
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	bd90      	pop	{r4, r7, pc}

08004176 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4798      	blx	r3
 8004186:	4603      	mov	r3, r0
 8004188:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800418a:	bf00      	nop
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	4798      	blx	r3
 8004192:	4603      	mov	r3, r0
 8004194:	461a      	mov	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d8f5      	bhi.n	800418c <OTM8009A_IO_Delay+0x16>
  {
  }
  return OTM8009A_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 80041aa:	b590      	push	{r4, r7, lr}
 80041ac:	b085      	sub	sp, #20
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	461a      	mov	r2, r3
 80041b6:	460b      	mov	r3, r1
 80041b8:	817b      	strh	r3, [r7, #10]
 80041ba:	4613      	mov	r3, r2
 80041bc:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685c      	ldr	r4, [r3, #4]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6898      	ldr	r0, [r3, #8]
 80041c6:	893b      	ldrh	r3, [r7, #8]
 80041c8:	8979      	ldrh	r1, [r7, #10]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	47a0      	blx	r4
 80041ce:	4603      	mov	r3, r0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd90      	pop	{r4, r7, pc}

080041d8 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 80041d8:	b590      	push	{r4, r7, lr}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	607a      	str	r2, [r7, #4]
 80041e2:	461a      	mov	r2, r3
 80041e4:	460b      	mov	r3, r1
 80041e6:	817b      	strh	r3, [r7, #10]
 80041e8:	4613      	mov	r3, r2
 80041ea:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681c      	ldr	r4, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6898      	ldr	r0, [r3, #8]
 80041f4:	893b      	ldrh	r3, [r7, #8]
 80041f6:	8979      	ldrh	r1, [r7, #10]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	47a0      	blx	r4
 80041fc:	4603      	mov	r3, r0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	bd90      	pop	{r4, r7, pc}
	...

08004208 <BSP_LED_Init>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08a      	sub	sp, #40	; 0x28
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004212:	2300      	movs	r3, #0
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 8004216:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <BSP_LED_Init+0x7c>)
 8004218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800421c:	4a19      	ldr	r2, [pc, #100]	; (8004284 <BSP_LED_Init+0x7c>)
 800421e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004222:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004226:	4b17      	ldr	r3, [pc, #92]	; (8004284 <BSP_LED_Init+0x7c>)
 8004228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800422c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	4a14      	ldr	r2, [pc, #80]	; (8004288 <BSP_LED_Init+0x80>)
 8004238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800423e:	2301      	movs	r3, #1
 8004240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004242:	2301      	movs	r3, #1
 8004244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004246:	2303      	movs	r3, #3
 8004248:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	4a0f      	ldr	r2, [pc, #60]	; (800428c <BSP_LED_Init+0x84>)
 800424e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004252:	f107 0210 	add.w	r2, r7, #16
 8004256:	4611      	mov	r1, r2
 8004258:	4618      	mov	r0, r3
 800425a:	f004 f96b 	bl	8008534 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800425e:	79fb      	ldrb	r3, [r7, #7]
 8004260:	4a0a      	ldr	r2, [pc, #40]	; (800428c <BSP_LED_Init+0x84>)
 8004262:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	4a07      	ldr	r2, [pc, #28]	; (8004288 <BSP_LED_Init+0x80>)
 800426a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800426e:	b29b      	uxth	r3, r3
 8004270:	2201      	movs	r2, #1
 8004272:	4619      	mov	r1, r3
 8004274:	f004 fc18 	bl	8008aa8 <HAL_GPIO_WritePin>
 return ret;
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800427a:	4618      	mov	r0, r3
 800427c:	3728      	adds	r7, #40	; 0x28
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	58024400 	.word	0x58024400
 8004288:	08013170 	.word	0x08013170
 800428c:	24000084 	.word	0x24000084

08004290 <BSP_LED_Toggle>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Toggle(Led_TypeDef Led)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <BSP_LED_Toggle+0x34>)
 80042a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	4907      	ldr	r1, [pc, #28]	; (80042c8 <BSP_LED_Toggle+0x38>)
 80042aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	4619      	mov	r1, r3
 80042b2:	4610      	mov	r0, r2
 80042b4:	f004 fc11 	bl	8008ada <HAL_GPIO_TogglePin>
  return ret;
 80042b8:	68fb      	ldr	r3, [r7, #12]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	24000084 	.word	0x24000084
 80042c8:	08013170 	.word	0x08013170

080042cc <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t  BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	460a      	mov	r2, r1
 80042d6:	71fb      	strb	r3, [r7, #7]
 80042d8:	4613      	mov	r3, r2
 80042da:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_WAKEUP_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_WAKEUP_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_WAKEUP_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 80042dc:	4b2e      	ldr	r3, [pc, #184]	; (8004398 <BSP_PB_Init+0xcc>)
 80042de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e2:	4a2d      	ldr	r2, [pc, #180]	; (8004398 <BSP_PB_Init+0xcc>)
 80042e4:	f043 0304 	orr.w	r3, r3, #4
 80042e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042ec:	4b2a      	ldr	r3, [pc, #168]	; (8004398 <BSP_PB_Init+0xcc>)
 80042ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	60bb      	str	r3, [r7, #8]
 80042f8:	68bb      	ldr	r3, [r7, #8]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80042fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042fe:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004304:	2302      	movs	r3, #2
 8004306:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8004308:	79bb      	ldrb	r3, [r7, #6]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10c      	bne.n	8004328 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800430e:	2300      	movs	r3, #0
 8004310:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	4a21      	ldr	r2, [pc, #132]	; (800439c <BSP_PB_Init+0xd0>)
 8004316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431a:	f107 020c 	add.w	r2, r7, #12
 800431e:	4611      	mov	r1, r2
 8004320:	4618      	mov	r0, r3
 8004322:	f004 f907 	bl	8008534 <HAL_GPIO_Init>
 8004326:	e031      	b.n	800438c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8004328:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800432c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	4a1a      	ldr	r2, [pc, #104]	; (800439c <BSP_PB_Init+0xd0>)
 8004332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004336:	f107 020c 	add.w	r2, r7, #12
 800433a:	4611      	mov	r1, r2
 800433c:	4618      	mov	r0, r3
 800433e:	f004 f8f9 	bl	8008534 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <BSP_PB_Init+0xd4>)
 8004348:	441a      	add	r2, r3
 800434a:	79fb      	ldrb	r3, [r7, #7]
 800434c:	4915      	ldr	r1, [pc, #84]	; (80043a4 <BSP_PB_Init+0xd8>)
 800434e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004352:	4619      	mov	r1, r3
 8004354:	4610      	mov	r0, r2
 8004356:	f004 f8d8 	bl	800850a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	4a10      	ldr	r2, [pc, #64]	; (80043a0 <BSP_PB_Init+0xd4>)
 8004360:	1898      	adds	r0, r3, r2
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	4a10      	ldr	r2, [pc, #64]	; (80043a8 <BSP_PB_Init+0xdc>)
 8004366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800436a:	461a      	mov	r2, r3
 800436c:	2100      	movs	r1, #0
 800436e:	f004 f8ad 	bl	80084cc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8004372:	2028      	movs	r0, #40	; 0x28
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	4a0d      	ldr	r2, [pc, #52]	; (80043ac <BSP_PB_Init+0xe0>)
 8004378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437c:	2200      	movs	r2, #0
 800437e:	4619      	mov	r1, r3
 8004380:	f003 f849 	bl	8007416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8004384:	2328      	movs	r3, #40	; 0x28
 8004386:	4618      	mov	r0, r3
 8004388:	f003 f85f 	bl	800744a <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	58024400 	.word	0x58024400
 800439c:	24000094 	.word	0x24000094
 80043a0:	24000e08 	.word	0x24000e08
 80043a4:	08013180 	.word	0x08013180
 80043a8:	24000098 	.word	0x24000098
 80043ac:	2400009c 	.word	0x2400009c

080043b0 <BUTTON_WAKEUP_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_WAKEUP_EXTI_Callback(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_WAKEUP);
 80043b4:	2000      	movs	r0, #0
 80043b6:	f000 f802 	bl	80043be <BSP_PB_Callback>
}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}

080043be <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	4603      	mov	r3, r0
 80043c6:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);
  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80043da:	2300      	movs	r3, #0
 80043dc:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 80043de:	4b16      	ldr	r3, [pc, #88]	; (8004438 <BSP_I2C4_Init+0x64>)
 80043e0:	4a16      	ldr	r2, [pc, #88]	; (800443c <BSP_I2C4_Init+0x68>)
 80043e2:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 80043e4:	4b16      	ldr	r3, [pc, #88]	; (8004440 <BSP_I2C4_Init+0x6c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d11f      	bne.n	800442c <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 80043ec:	4b14      	ldr	r3, [pc, #80]	; (8004440 <BSP_I2C4_Init+0x6c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3301      	adds	r3, #1
 80043f2:	4a13      	ldr	r2, [pc, #76]	; (8004440 <BSP_I2C4_Init+0x6c>)
 80043f4:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80043f6:	4810      	ldr	r0, [pc, #64]	; (8004438 <BSP_I2C4_Init+0x64>)
 80043f8:	f004 feba 	bl	8009170 <HAL_I2C_GetState>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d114      	bne.n	800442c <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8004402:	480d      	ldr	r0, [pc, #52]	; (8004438 <BSP_I2C4_Init+0x64>)
 8004404:	f000 fb60 	bl	8004ac8 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8004408:	f007 faae 	bl	800b968 <HAL_RCC_GetPCLK2Freq>
 800440c:	4603      	mov	r3, r0
 800440e:	490d      	ldr	r1, [pc, #52]	; (8004444 <BSP_I2C4_Init+0x70>)
 8004410:	4618      	mov	r0, r3
 8004412:	f000 f8e3 	bl	80045dc <I2C_GetTiming>
 8004416:	4603      	mov	r3, r0
 8004418:	4619      	mov	r1, r3
 800441a:	4807      	ldr	r0, [pc, #28]	; (8004438 <BSP_I2C4_Init+0x64>)
 800441c:	f000 f838 	bl	8004490 <MX_I2C4_Init>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8004426:	f06f 0307 	mvn.w	r3, #7
 800442a:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800442c:	687b      	ldr	r3, [r7, #4]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	24001818 	.word	0x24001818
 800443c:	58001c00 	.word	0x58001c00
 8004440:	24000e10 	.word	0x24000e10
 8004444:	000186a0 	.word	0x000186a0

08004448 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800444e:	2300      	movs	r3, #0
 8004450:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 8004452:	4b0d      	ldr	r3, [pc, #52]	; (8004488 <BSP_I2C4_DeInit+0x40>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3b01      	subs	r3, #1
 8004458:	4a0b      	ldr	r2, [pc, #44]	; (8004488 <BSP_I2C4_DeInit+0x40>)
 800445a:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <BSP_I2C4_DeInit+0x40>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10b      	bne.n	800447c <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8004464:	4809      	ldr	r0, [pc, #36]	; (800448c <BSP_I2C4_DeInit+0x44>)
 8004466:	f000 fb9b 	bl	8004ba0 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800446a:	4808      	ldr	r0, [pc, #32]	; (800448c <BSP_I2C4_DeInit+0x44>)
 800446c:	f004 fc0e 	bl	8008c8c <HAL_I2C_DeInit>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004476:	f06f 0307 	mvn.w	r3, #7
 800447a:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800447c:	687b      	ldr	r3, [r7, #4]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	24000e10 	.word	0x24000e10
 800448c:	24001818 	.word	0x24001818

08004490 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f004 fb4c 	bl	8008b6c <HAL_I2C_Init>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	73fb      	strb	r3, [r7, #15]
 80044de:	e014      	b.n	800450a <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f005 f902 	bl	80096f0 <HAL_I2CEx_ConfigAnalogFilter>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	73fb      	strb	r3, [r7, #15]
 80044f6:	e008      	b.n	800450a <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80044f8:	2100      	movs	r1, #0
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f005 f943 	bl	8009786 <HAL_I2CEx_ConfigDigitalFilter>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800450a:	7bfb      	ldrb	r3, [r7, #15]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af02      	add	r7, sp, #8
 800451a:	60ba      	str	r2, [r7, #8]
 800451c:	461a      	mov	r2, r3
 800451e:	4603      	mov	r3, r0
 8004520:	81fb      	strh	r3, [r7, #14]
 8004522:	460b      	mov	r3, r1
 8004524:	81bb      	strh	r3, [r7, #12]
 8004526:	4613      	mov	r3, r2
 8004528:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800452a:	89b9      	ldrh	r1, [r7, #12]
 800452c:	89f8      	ldrh	r0, [r7, #14]
 800452e:	88fb      	ldrh	r3, [r7, #6]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2201      	movs	r2, #1
 8004536:	f000 fb57 	bl	8004be8 <I2C4_WriteReg>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d102      	bne.n	8004546 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	e00c      	b.n	8004560 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8004546:	4809      	ldr	r0, [pc, #36]	; (800456c <BSP_I2C4_WriteReg+0x58>)
 8004548:	f004 fe20 	bl	800918c <HAL_I2C_GetError>
 800454c:	4603      	mov	r3, r0
 800454e:	2b04      	cmp	r3, #4
 8004550:	d103      	bne.n	800455a <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004552:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	e002      	b.n	8004560 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800455a:	f06f 0303 	mvn.w	r3, #3
 800455e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8004560:	697b      	ldr	r3, [r7, #20]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	24001818 	.word	0x24001818

08004570 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af02      	add	r7, sp, #8
 8004576:	60ba      	str	r2, [r7, #8]
 8004578:	461a      	mov	r2, r3
 800457a:	4603      	mov	r3, r0
 800457c:	81fb      	strh	r3, [r7, #14]
 800457e:	460b      	mov	r3, r1
 8004580:	81bb      	strh	r3, [r7, #12]
 8004582:	4613      	mov	r3, r2
 8004584:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8004586:	89b9      	ldrh	r1, [r7, #12]
 8004588:	89f8      	ldrh	r0, [r7, #14]
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2201      	movs	r2, #1
 8004592:	f000 fb4f 	bl	8004c34 <I2C4_ReadReg>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d102      	bne.n	80045a2 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e00c      	b.n	80045bc <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80045a2:	4809      	ldr	r0, [pc, #36]	; (80045c8 <BSP_I2C4_ReadReg+0x58>)
 80045a4:	f004 fdf2 	bl	800918c <HAL_I2C_GetError>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d103      	bne.n	80045b6 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80045ae:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	e002      	b.n	80045bc <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80045b6:	f06f 0303 	mvn.w	r3, #3
 80045ba:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80045bc:	697b      	ldr	r3, [r7, #20]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	24001818 	.word	0x24001818

080045cc <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 80045d0:	f002 fe0a 	bl	80071e8 <HAL_GetTick>
 80045d4:	4603      	mov	r3, r0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d06b      	beq.n	80046c8 <I2C_GetTiming+0xec>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d068      	beq.n	80046c8 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80045f6:	2300      	movs	r3, #0
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	e060      	b.n	80046be <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80045fc:	4a35      	ldr	r2, [pc, #212]	; (80046d4 <I2C_GetTiming+0xf8>)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	212c      	movs	r1, #44	; 0x2c
 8004602:	fb01 f303 	mul.w	r3, r1, r3
 8004606:	4413      	add	r3, r2
 8004608:	3304      	adds	r3, #4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d352      	bcc.n	80046b8 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8004612:	4a30      	ldr	r2, [pc, #192]	; (80046d4 <I2C_GetTiming+0xf8>)
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	212c      	movs	r1, #44	; 0x2c
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	4413      	add	r3, r2
 800461e:	3308      	adds	r3, #8
 8004620:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d847      	bhi.n	80046b8 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8004628:	6939      	ldr	r1, [r7, #16]
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f856 	bl	80046dc <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8004630:	6939      	ldr	r1, [r7, #16]
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f940 	bl	80048b8 <I2C_Compute_SCLL_SCLH>
 8004638:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b7f      	cmp	r3, #127	; 0x7f
 800463e:	d842      	bhi.n	80046c6 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004640:	4925      	ldr	r1, [pc, #148]	; (80046d8 <I2C_GetTiming+0xfc>)
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8004652:	4821      	ldr	r0, [pc, #132]	; (80046d8 <I2C_GetTiming+0xfc>)
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4403      	add	r3, r0
 8004660:	3304      	adds	r3, #4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	051b      	lsls	r3, r3, #20
 8004666:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800466a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800466c:	481a      	ldr	r0, [pc, #104]	; (80046d8 <I2C_GetTiming+0xfc>)
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4403      	add	r3, r0
 800467a:	3308      	adds	r3, #8
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	041b      	lsls	r3, r3, #16
 8004680:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8004684:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8004686:	4814      	ldr	r0, [pc, #80]	; (80046d8 <I2C_GetTiming+0xfc>)
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4613      	mov	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4403      	add	r3, r0
 8004694:	330c      	adds	r3, #12
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	021b      	lsls	r3, r3, #8
 800469a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800469c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800469e:	480e      	ldr	r0, [pc, #56]	; (80046d8 <I2C_GetTiming+0xfc>)
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4403      	add	r3, r0
 80046ac:	3310      	adds	r3, #16
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80046b2:	430b      	orrs	r3, r1
 80046b4:	617b      	str	r3, [r7, #20]
        }
        break;
 80046b6:	e006      	b.n	80046c6 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	3301      	adds	r3, #1
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d99b      	bls.n	80045fc <I2C_GetTiming+0x20>
 80046c4:	e000      	b.n	80046c8 <I2C_GetTiming+0xec>
        break;
 80046c6:	bf00      	nop
      }
    }
  }

  return ret;
 80046c8:	697b      	ldr	r3, [r7, #20]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	08013184 	.word	0x08013184
 80046d8:	24000e14 	.word	0x24000e14

080046dc <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80046dc:	b480      	push	{r7}
 80046de:	b08f      	sub	sp, #60	; 0x3c
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 80046e6:	2310      	movs	r3, #16
 80046e8:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	085a      	lsrs	r2, r3, #1
 80046ee:	4b6e      	ldr	r3, [pc, #440]	; (80048a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80046f0:	4413      	add	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80046f8:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80046fa:	2332      	movs	r3, #50	; 0x32
 80046fc:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80046fe:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004702:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004704:	4a69      	ldr	r2, [pc, #420]	; (80048ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	212c      	movs	r1, #44	; 0x2c
 800470a:	fb01 f303 	mul.w	r3, r1, r3
 800470e:	4413      	add	r3, r2
 8004710:	3324      	adds	r3, #36	; 0x24
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	4a65      	ldr	r2, [pc, #404]	; (80048ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	212c      	movs	r1, #44	; 0x2c
 800471c:	fb01 f303 	mul.w	r3, r1, r3
 8004720:	4413      	add	r3, r2
 8004722:	330c      	adds	r3, #12
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8004728:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800472a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800472c:	495f      	ldr	r1, [pc, #380]	; (80048ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	202c      	movs	r0, #44	; 0x2c
 8004732:	fb00 f303 	mul.w	r3, r0, r3
 8004736:	440b      	add	r3, r1
 8004738:	3328      	adds	r3, #40	; 0x28
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3303      	adds	r3, #3
 800473e:	69f9      	ldr	r1, [r7, #28]
 8004740:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004748:	4a58      	ldr	r2, [pc, #352]	; (80048ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	212c      	movs	r1, #44	; 0x2c
 800474e:	fb01 f303 	mul.w	r3, r1, r3
 8004752:	4413      	add	r3, r2
 8004754:	3310      	adds	r3, #16
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	4a54      	ldr	r2, [pc, #336]	; (80048ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	212c      	movs	r1, #44	; 0x2c
 8004760:	fb01 f303 	mul.w	r3, r1, r3
 8004764:	4413      	add	r3, r2
 8004766:	3320      	adds	r3, #32
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800476c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800476e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8004770:	494e      	ldr	r1, [pc, #312]	; (80048ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	202c      	movs	r0, #44	; 0x2c
 8004776:	fb00 f303 	mul.w	r3, r0, r3
 800477a:	440b      	add	r3, r1
 800477c:	3328      	adds	r3, #40	; 0x28
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3304      	adds	r3, #4
 8004782:	69f9      	ldr	r1, [r7, #28]
 8004784:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800478c:	4a47      	ldr	r2, [pc, #284]	; (80048ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	212c      	movs	r1, #44	; 0x2c
 8004792:	fb01 f303 	mul.w	r3, r1, r3
 8004796:	4413      	add	r3, r2
 8004798:	3320      	adds	r3, #32
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	4a43      	ldr	r2, [pc, #268]	; (80048ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	212c      	movs	r1, #44	; 0x2c
 80047a4:	fb01 f303 	mul.w	r3, r1, r3
 80047a8:	4413      	add	r3, r2
 80047aa:	3314      	adds	r3, #20
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4403      	add	r3, r0
 80047b0:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	dc01      	bgt.n	80047bc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	2b00      	cmp	r3, #0
 80047c0:	dc01      	bgt.n	80047c6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80047c6:	2300      	movs	r3, #0
 80047c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ca:	e062      	b.n	8004892 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80047cc:	2300      	movs	r3, #0
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
 80047d0:	e059      	b.n	8004886 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	3301      	adds	r3, #1
 80047d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047d8:	3201      	adds	r2, #1
 80047da:	fb03 f202 	mul.w	r2, r3, r2
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	fb02 f303 	mul.w	r3, r2, r3
 80047e4:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d348      	bcc.n	8004880 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80047ee:	2300      	movs	r3, #0
 80047f0:	623b      	str	r3, [r7, #32]
 80047f2:	e042      	b.n	800487a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	3301      	adds	r3, #1
 80047f8:	6a3a      	ldr	r2, [r7, #32]
 80047fa:	fb03 f202 	mul.w	r2, r3, r2
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	fb02 f303 	mul.w	r3, r2, r3
 8004804:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	429a      	cmp	r2, r3
 800480c:	d332      	bcc.n	8004874 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800480e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	429a      	cmp	r2, r3
 8004814:	d82e      	bhi.n	8004874 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8004816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481a:	429a      	cmp	r2, r3
 800481c:	d02a      	beq.n	8004874 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800481e:	4b24      	ldr	r3, [pc, #144]	; (80048b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4924      	ldr	r1, [pc, #144]	; (80048b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004830:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8004832:	4b1f      	ldr	r3, [pc, #124]	; (80048b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	491f      	ldr	r1, [pc, #124]	; (80048b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004838:	4613      	mov	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	3304      	adds	r3, #4
 8004844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004846:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8004848:	4b19      	ldr	r3, [pc, #100]	; (80048b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	4919      	ldr	r1, [pc, #100]	; (80048b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	440b      	add	r3, r1
 8004858:	3308      	adds	r3, #8
 800485a:	6a3a      	ldr	r2, [r7, #32]
 800485c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004860:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8004862:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3301      	adds	r3, #1
 8004868:	4a11      	ldr	r2, [pc, #68]	; (80048b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800486a:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800486c:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b7f      	cmp	r3, #127	; 0x7f
 8004872:	d812      	bhi.n	800489a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	3301      	adds	r3, #1
 8004878:	623b      	str	r3, [r7, #32]
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	2b0f      	cmp	r3, #15
 800487e:	d9b9      	bls.n	80047f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	3301      	adds	r3, #1
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	2b0f      	cmp	r3, #15
 800488a:	d9a2      	bls.n	80047d2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	3301      	adds	r3, #1
 8004890:	62bb      	str	r3, [r7, #40]	; 0x28
 8004892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004894:	2b0f      	cmp	r3, #15
 8004896:	d999      	bls.n	80047cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8004898:	e000      	b.n	800489c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800489a:	bf00      	nop
          }
        }
      }
    }
  }
}
 800489c:	373c      	adds	r7, #60	; 0x3c
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	3b9aca00 	.word	0x3b9aca00
 80048ac:	08013184 	.word	0x08013184
 80048b0:	24001814 	.word	0x24001814
 80048b4:	24000e14 	.word	0x24000e14

080048b8 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b093      	sub	sp, #76	; 0x4c
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 80048c2:	f04f 33ff 	mov.w	r3, #4294967295
 80048c6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	085a      	lsrs	r2, r3, #1
 80048cc:	4b7a      	ldr	r3, [pc, #488]	; (8004ab8 <I2C_Compute_SCLL_SCLH+0x200>)
 80048ce:	4413      	add	r3, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80048d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 80048d8:	4a78      	ldr	r2, [pc, #480]	; (8004abc <I2C_Compute_SCLL_SCLH+0x204>)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	212c      	movs	r1, #44	; 0x2c
 80048de:	fb01 f303 	mul.w	r3, r1, r3
 80048e2:	4413      	add	r3, r2
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	085a      	lsrs	r2, r3, #1
 80048e8:	4b73      	ldr	r3, [pc, #460]	; (8004ab8 <I2C_Compute_SCLL_SCLH+0x200>)
 80048ea:	4413      	add	r3, r2
 80048ec:	4973      	ldr	r1, [pc, #460]	; (8004abc <I2C_Compute_SCLL_SCLH+0x204>)
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	202c      	movs	r0, #44	; 0x2c
 80048f2:	fb00 f202 	mul.w	r2, r0, r2
 80048f6:	440a      	add	r2, r1
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8004900:	2332      	movs	r3, #50	; 0x32
 8004902:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8004904:	4a6d      	ldr	r2, [pc, #436]	; (8004abc <I2C_Compute_SCLL_SCLH+0x204>)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	212c      	movs	r1, #44	; 0x2c
 800490a:	fb01 f303 	mul.w	r3, r1, r3
 800490e:	4413      	add	r3, r2
 8004910:	3328      	adds	r3, #40	; 0x28
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004916:	fb02 f303 	mul.w	r3, r2, r3
 800491a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800491c:	4a67      	ldr	r2, [pc, #412]	; (8004abc <I2C_Compute_SCLL_SCLH+0x204>)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	212c      	movs	r1, #44	; 0x2c
 8004922:	fb01 f303 	mul.w	r3, r1, r3
 8004926:	4413      	add	r3, r2
 8004928:	3304      	adds	r3, #4
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a62      	ldr	r2, [pc, #392]	; (8004ab8 <I2C_Compute_SCLL_SCLH+0x200>)
 800492e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004932:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8004934:	4a61      	ldr	r2, [pc, #388]	; (8004abc <I2C_Compute_SCLL_SCLH+0x204>)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	212c      	movs	r1, #44	; 0x2c
 800493a:	fb01 f303 	mul.w	r3, r1, r3
 800493e:	4413      	add	r3, r2
 8004940:	3308      	adds	r3, #8
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a5c      	ldr	r2, [pc, #368]	; (8004ab8 <I2C_Compute_SCLL_SCLH+0x200>)
 8004946:	fbb2 f3f3 	udiv	r3, r2, r3
 800494a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004950:	2300      	movs	r3, #0
 8004952:	637b      	str	r3, [r7, #52]	; 0x34
 8004954:	e0a3      	b.n	8004a9e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8004956:	495a      	ldr	r1, [pc, #360]	; (8004ac0 <I2C_Compute_SCLL_SCLH+0x208>)
 8004958:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800495a:	4613      	mov	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496a:	fb02 f303 	mul.w	r3, r2, r3
 800496e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8004970:	2300      	movs	r3, #0
 8004972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004974:	e08c      	b.n	8004a90 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8004976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	441a      	add	r2, r3
 800497c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800497e:	3301      	adds	r3, #1
 8004980:	6979      	ldr	r1, [r7, #20]
 8004982:	fb03 f101 	mul.w	r1, r3, r1
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	440b      	add	r3, r1
 800498c:	4413      	add	r3, r2
 800498e:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8004990:	4a4a      	ldr	r2, [pc, #296]	; (8004abc <I2C_Compute_SCLL_SCLH+0x204>)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	212c      	movs	r1, #44	; 0x2c
 8004996:	fb01 f303 	mul.w	r3, r1, r3
 800499a:	4413      	add	r3, r2
 800499c:	3318      	adds	r3, #24
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d971      	bls.n	8004a8a <I2C_Compute_SCLL_SCLH+0x1d2>
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	1ad2      	subs	r2, r2, r3
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	089b      	lsrs	r3, r3, #2
 80049b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d268      	bcs.n	8004a8a <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80049b8:	2300      	movs	r3, #0
 80049ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80049bc:	e062      	b.n	8004a84 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80049be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	441a      	add	r2, r3
 80049c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c6:	3301      	adds	r3, #1
 80049c8:	6979      	ldr	r1, [r7, #20]
 80049ca:	fb03 f101 	mul.w	r1, r3, r1
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	440b      	add	r3, r1
 80049d4:	4413      	add	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	441a      	add	r2, r3
 80049de:	4937      	ldr	r1, [pc, #220]	; (8004abc <I2C_Compute_SCLL_SCLH+0x204>)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	202c      	movs	r0, #44	; 0x2c
 80049e4:	fb00 f303 	mul.w	r3, r0, r3
 80049e8:	440b      	add	r3, r1
 80049ea:	3320      	adds	r3, #32
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	441a      	add	r2, r3
 80049f0:	4932      	ldr	r1, [pc, #200]	; (8004abc <I2C_Compute_SCLL_SCLH+0x204>)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	202c      	movs	r0, #44	; 0x2c
 80049f6:	fb00 f303 	mul.w	r3, r0, r3
 80049fa:	440b      	add	r3, r1
 80049fc:	3324      	adds	r3, #36	; 0x24
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4413      	add	r3, r2
 8004a02:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d338      	bcc.n	8004a7e <I2C_Compute_SCLL_SCLH+0x1c6>
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d834      	bhi.n	8004a7e <I2C_Compute_SCLL_SCLH+0x1c6>
 8004a14:	4a29      	ldr	r2, [pc, #164]	; (8004abc <I2C_Compute_SCLL_SCLH+0x204>)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	212c      	movs	r1, #44	; 0x2c
 8004a1a:	fb01 f303 	mul.w	r3, r1, r3
 8004a1e:	4413      	add	r3, r2
 8004a20:	331c      	adds	r3, #28
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d329      	bcc.n	8004a7e <I2C_Compute_SCLL_SCLH+0x1c6>
 8004a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d225      	bcs.n	8004a7e <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	da02      	bge.n	8004a46 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	425b      	negs	r3, r3
 8004a44:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d917      	bls.n	8004a7e <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8004a52:	491b      	ldr	r1, [pc, #108]	; (8004ac0 <I2C_Compute_SCLL_SCLH+0x208>)
 8004a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	440b      	add	r3, r1
 8004a60:	3310      	adds	r3, #16
 8004a62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a64:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8004a66:	4916      	ldr	r1, [pc, #88]	; (8004ac0 <I2C_Compute_SCLL_SCLH+0x208>)
 8004a68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	440b      	add	r3, r1
 8004a74:	330c      	adds	r3, #12
 8004a76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a78:	601a      	str	r2, [r3, #0]
              ret = count;
 8004a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7c:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a80:	3301      	adds	r3, #1
 8004a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a86:	2bff      	cmp	r3, #255	; 0xff
 8004a88:	d999      	bls.n	80049be <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8004a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a92:	2bff      	cmp	r3, #255	; 0xff
 8004a94:	f67f af6f 	bls.w	8004976 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a9e:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <I2C_Compute_SCLL_SCLH+0x20c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	f4ff af56 	bcc.w	8004956 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8004aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	374c      	adds	r7, #76	; 0x4c
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	3b9aca00 	.word	0x3b9aca00
 8004abc:	08013184 	.word	0x08013184
 8004ac0:	24000e14 	.word	0x24000e14
 8004ac4:	24001814 	.word	0x24001814

08004ac8 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	; 0x28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8004ad0:	4b31      	ldr	r3, [pc, #196]	; (8004b98 <I2C4_MspInit+0xd0>)
 8004ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ad6:	4a30      	ldr	r2, [pc, #192]	; (8004b98 <I2C4_MspInit+0xd0>)
 8004ad8:	f043 0308 	orr.w	r3, r3, #8
 8004adc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ae0:	4b2d      	ldr	r3, [pc, #180]	; (8004b98 <I2C4_MspInit+0xd0>)
 8004ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	613b      	str	r3, [r7, #16]
 8004aec:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8004aee:	4b2a      	ldr	r3, [pc, #168]	; (8004b98 <I2C4_MspInit+0xd0>)
 8004af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004af4:	4a28      	ldr	r2, [pc, #160]	; (8004b98 <I2C4_MspInit+0xd0>)
 8004af6:	f043 0308 	orr.w	r3, r3, #8
 8004afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004afe:	4b26      	ldr	r3, [pc, #152]	; (8004b98 <I2C4_MspInit+0xd0>)
 8004b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8004b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b10:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8004b12:	2312      	movs	r3, #18
 8004b14:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8004b1e:	2304      	movs	r3, #4
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8004b22:	f107 0314 	add.w	r3, r7, #20
 8004b26:	4619      	mov	r1, r3
 8004b28:	481c      	ldr	r0, [pc, #112]	; (8004b9c <I2C4_MspInit+0xd4>)
 8004b2a:	f003 fd03 	bl	8008534 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8004b2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b32:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8004b34:	2312      	movs	r3, #18
 8004b36:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8004b40:	2304      	movs	r3, #4
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8004b44:	f107 0314 	add.w	r3, r7, #20
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4814      	ldr	r0, [pc, #80]	; (8004b9c <I2C4_MspInit+0xd4>)
 8004b4c:	f003 fcf2 	bl	8008534 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8004b50:	4b11      	ldr	r3, [pc, #68]	; (8004b98 <I2C4_MspInit+0xd0>)
 8004b52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b56:	4a10      	ldr	r2, [pc, #64]	; (8004b98 <I2C4_MspInit+0xd0>)
 8004b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004b60:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <I2C4_MspInit+0xd0>)
 8004b62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6a:	60bb      	str	r3, [r7, #8]
 8004b6c:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <I2C4_MspInit+0xd0>)
 8004b70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b74:	4a08      	ldr	r2, [pc, #32]	; (8004b98 <I2C4_MspInit+0xd0>)
 8004b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8004b7e:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <I2C4_MspInit+0xd0>)
 8004b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b84:	4a04      	ldr	r2, [pc, #16]	; (8004b98 <I2C4_MspInit+0xd0>)
 8004b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b8a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8004b8e:	bf00      	nop
 8004b90:	3728      	adds	r7, #40	; 0x28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	58024400 	.word	0x58024400
 8004b9c:	58020c00 	.word	0x58020c00

08004ba0 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8004ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	480b      	ldr	r0, [pc, #44]	; (8004be0 <I2C4_MspDeInit+0x40>)
 8004bb4:	f003 fe6e 	bl	8008894 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8004bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bbc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4807      	ldr	r0, [pc, #28]	; (8004be0 <I2C4_MspDeInit+0x40>)
 8004bc4:	f003 fe66 	bl	8008894 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8004bc8:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <I2C4_MspDeInit+0x44>)
 8004bca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bce:	4a05      	ldr	r2, [pc, #20]	; (8004be4 <I2C4_MspDeInit+0x44>)
 8004bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 8004bd8:	bf00      	nop
 8004bda:	3720      	adds	r7, #32
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	58020c00 	.word	0x58020c00
 8004be4:	58024400 	.word	0x58024400

08004be8 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b088      	sub	sp, #32
 8004bec:	af04      	add	r7, sp, #16
 8004bee:	607b      	str	r3, [r7, #4]
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	81fb      	strh	r3, [r7, #14]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	81bb      	strh	r3, [r7, #12]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8004bfc:	8978      	ldrh	r0, [r7, #10]
 8004bfe:	89ba      	ldrh	r2, [r7, #12]
 8004c00:	89f9      	ldrh	r1, [r7, #14]
 8004c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c06:	9302      	str	r3, [sp, #8]
 8004c08:	8b3b      	ldrh	r3, [r7, #24]
 8004c0a:	9301      	str	r3, [sp, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	4603      	mov	r3, r0
 8004c12:	4807      	ldr	r0, [pc, #28]	; (8004c30 <I2C4_WriteReg+0x48>)
 8004c14:	f004 f87e 	bl	8008d14 <HAL_I2C_Mem_Write>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	e001      	b.n	8004c26 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8004c22:	f06f 0307 	mvn.w	r3, #7
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	24001818 	.word	0x24001818

08004c34 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af04      	add	r7, sp, #16
 8004c3a:	607b      	str	r3, [r7, #4]
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	81fb      	strh	r3, [r7, #14]
 8004c40:	460b      	mov	r3, r1
 8004c42:	81bb      	strh	r3, [r7, #12]
 8004c44:	4613      	mov	r3, r2
 8004c46:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8004c48:	8978      	ldrh	r0, [r7, #10]
 8004c4a:	89ba      	ldrh	r2, [r7, #12]
 8004c4c:	89f9      	ldrh	r1, [r7, #14]
 8004c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c52:	9302      	str	r3, [sp, #8]
 8004c54:	8b3b      	ldrh	r3, [r7, #24]
 8004c56:	9301      	str	r3, [sp, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	4807      	ldr	r0, [pc, #28]	; (8004c7c <I2C4_ReadReg+0x48>)
 8004c60:	f004 f96c 	bl	8008f3c <HAL_I2C_Mem_Read>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	e001      	b.n	8004c72 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8004c6e:	f06f 0307 	mvn.w	r3, #7
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	24001818 	.word	0x24001818

08004c80 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8004c8a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004c94:	2201      	movs	r2, #1
 8004c96:	6839      	ldr	r1, [r7, #0]
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f805 	bl	8004ca8 <BSP_LCD_InitEx>
 8004c9e:	4603      	mov	r3, r0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08e      	sub	sp, #56	; 0x38
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t ctrl_pixel_format, ltdc_pixel_format, dsi_pixel_format;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d808      	bhi.n	8004cd2 <BSP_LCD_InitEx+0x2a>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d105      	bne.n	8004cd2 <BSP_LCD_InitEx+0x2a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d006      	beq.n	8004cda <BSP_LCD_InitEx+0x32>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d003      	beq.n	8004cda <BSP_LCD_InitEx+0x32>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004cd2:	f06f 0301 	mvn.w	r3, #1
 8004cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd8:	e0bf      	b.n	8004e5a <BSP_LCD_InitEx+0x1b2>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d110      	bne.n	8004d02 <BSP_LCD_InitEx+0x5a>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dsi_pixel_format = DSI_RGB565;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	62bb      	str	r3, [r7, #40]	; 0x28
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	633b      	str	r3, [r7, #48]	; 0x30
      Lcd_Ctx[Instance].BppFactor = 2U;
 8004cec:	495d      	ldr	r1, [pc, #372]	; (8004e64 <BSP_LCD_InitEx+0x1bc>)
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	3310      	adds	r3, #16
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	e00f      	b.n	8004d22 <BSP_LCD_InitEx+0x7a>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 8004d02:	2300      	movs	r3, #0
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
      dsi_pixel_format = DSI_RGB888;
 8004d06:	2305      	movs	r3, #5
 8004d08:	62bb      	str	r3, [r7, #40]	; 0x28
      ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	633b      	str	r3, [r7, #48]	; 0x30
      Lcd_Ctx[Instance].BppFactor = 4U;
 8004d0e:	4955      	ldr	r1, [pc, #340]	; (8004e64 <BSP_LCD_InitEx+0x1bc>)
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4613      	mov	r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	3310      	adds	r3, #16
 8004d1e:	2204      	movs	r2, #4
 8004d20:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8004d22:	4950      	ldr	r1, [pc, #320]	; (8004e64 <BSP_LCD_InitEx+0x1bc>)
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4613      	mov	r3, r2
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	1a9b      	subs	r3, r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	440b      	add	r3, r1
 8004d30:	330c      	adds	r3, #12
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 8004d36:	494b      	ldr	r1, [pc, #300]	; (8004e64 <BSP_LCD_InitEx+0x1bc>)
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8004d48:	4946      	ldr	r1, [pc, #280]	; (8004e64 <BSP_LCD_InitEx+0x1bc>)
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	1a9b      	subs	r3, r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	3304      	adds	r3, #4
 8004d58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d5a:	601a      	str	r2, [r3, #0]

    /* Toggle Hardware Reset of the LCD using its XRES signal (active low) */
    BSP_LCD_Reset(Instance);
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 f88d 	bl	8004e7c <BSP_LCD_Reset>


    /* Initialize LCD special pins GPIOs */
    LCD_InitSequence();
 8004d62:	f000 f8c5 	bl	8004ef0 <LCD_InitSequence>

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 8004d66:	4b40      	ldr	r3, [pc, #256]	; (8004e68 <BSP_LCD_InitEx+0x1c0>)
 8004d68:	4a40      	ldr	r2, [pc, #256]	; (8004e6c <BSP_LCD_InitEx+0x1c4>)
 8004d6a:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8004d6c:	4b40      	ldr	r3, [pc, #256]	; (8004e70 <BSP_LCD_InitEx+0x1c8>)
 8004d6e:	4a41      	ldr	r2, [pc, #260]	; (8004e74 <BSP_LCD_InitEx+0x1cc>)
 8004d70:	601a      	str	r2, [r3, #0]
    hlcd_dsi.Instance = DSI;
 8004d72:	4b41      	ldr	r3, [pc, #260]	; (8004e78 <BSP_LCD_InitEx+0x1d0>)
 8004d74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004d78:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8004d7a:	483b      	ldr	r0, [pc, #236]	; (8004e68 <BSP_LCD_InitEx+0x1c0>)
 8004d7c:	f000 fee0 	bl	8005b40 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 8004d80:	483b      	ldr	r0, [pc, #236]	; (8004e70 <BSP_LCD_InitEx+0x1c8>)
 8004d82:	f000 ff0f 	bl	8005ba4 <DMA2D_MspInit>
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    DSI_MspInit(&hlcd_dsi);
 8004d86:	483c      	ldr	r0, [pc, #240]	; (8004e78 <BSP_LCD_InitEx+0x1d0>)
 8004d88:	f000 ff3a 	bl	8005c00 <DSI_MspInit>
#endif
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d90:	6839      	ldr	r1, [r7, #0]
 8004d92:	4839      	ldr	r0, [pc, #228]	; (8004e78 <BSP_LCD_InitEx+0x1d0>)
 8004d94:	f000 f914 	bl	8004fc0 <MX_DSIHOST_DSI_Init>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <BSP_LCD_InitEx+0xfe>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004d9e:	f06f 0303 	mvn.w	r3, #3
 8004da2:	637b      	str	r3, [r7, #52]	; 0x34
 8004da4:	e014      	b.n	8004dd0 <BSP_LCD_InitEx+0x128>
    }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8004da6:	4830      	ldr	r0, [pc, #192]	; (8004e68 <BSP_LCD_InitEx+0x1c0>)
 8004da8:	f000 fa1c 	bl	80051e4 <MX_LTDC_ClockConfig>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <BSP_LCD_InitEx+0x112>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004db2:	f06f 0303 	mvn.w	r3, #3
 8004db6:	637b      	str	r3, [r7, #52]	; 0x34
 8004db8:	e00a      	b.n	8004dd0 <BSP_LCD_InitEx+0x128>
    }
    else
    {
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8004dba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dbc:	6839      	ldr	r1, [r7, #0]
 8004dbe:	482a      	ldr	r0, [pc, #168]	; (8004e68 <BSP_LCD_InitEx+0x1c0>)
 8004dc0:	f000 f982 	bl	80050c8 <MX_LTDC_Init>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <BSP_LCD_InitEx+0x128>
     {
       ret = BSP_ERROR_PERIPH_FAILURE;
 8004dca:	f06f 0303 	mvn.w	r3, #3
 8004dce:	637b      	str	r3, [r7, #52]	; 0x34
     }
    }

    if(ret == BSP_ERROR_NONE)
 8004dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d141      	bne.n	8004e5a <BSP_LCD_InitEx+0x1b2>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	f001 fd40 	bl	800685c <BSP_SDRAM_Init>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <BSP_LCD_InitEx+0x140>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8004de2:	f06f 0303 	mvn.w	r3, #3
 8004de6:	e039      	b.n	8004e5c <BSP_LCD_InitEx+0x1b4>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	613b      	str	r3, [r7, #16]
      config.X1          = Width;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	617b      	str	r3, [r7, #20]
      config.Y0          = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	61bb      	str	r3, [r7, #24]
      config.Y1          = Height;
 8004df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df6:	61fb      	str	r3, [r7, #28]
      config.PixelFormat = ltdc_pixel_format;
 8004df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfa:	623b      	str	r3, [r7, #32]
      config.Address     = LCD_LAYER_0_ADDRESS;
 8004dfc:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8004e02:	f107 0310 	add.w	r3, r7, #16
 8004e06:	461a      	mov	r2, r3
 8004e08:	2100      	movs	r1, #0
 8004e0a:	4817      	ldr	r0, [pc, #92]	; (8004e68 <BSP_LCD_InitEx+0x1c0>)
 8004e0c:	f000 f9a8 	bl	8005160 <MX_LTDC_ConfigLayer>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <BSP_LCD_InitEx+0x176>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8004e16:	f06f 0303 	mvn.w	r3, #3
 8004e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e1c:	e013      	b.n	8004e46 <BSP_LCD_InitEx+0x19e>
      }
      else
      {
        /* Enable the DSI host and wrapper after the LTDC initialization
        To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
        (void)HAL_DSI_Start(&hlcd_dsi);
 8004e1e:	4816      	ldr	r0, [pc, #88]	; (8004e78 <BSP_LCD_InitEx+0x1d0>)
 8004e20:	f003 f99a 	bl	8008158 <HAL_DSI_Start>

        /* Enable the DSI BTW for read operations */
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 8004e24:	2104      	movs	r1, #4
 8004e26:	4814      	ldr	r0, [pc, #80]	; (8004e78 <BSP_LCD_InitEx+0x1d0>)
 8004e28:	f003 f96e 	bl	8008108 <HAL_DSI_ConfigFlowControl>

#if (USE_LCD_CTRL_OTM8009A == 1)
        /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
        depending on configuration of DSI */
        if(OTM8009A_Probe(ctrl_pixel_format, Orientation) != BSP_ERROR_NONE)
 8004e2c:	68b9      	ldr	r1, [r7, #8]
 8004e2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e30:	f000 ff7a 	bl	8005d28 <OTM8009A_Probe>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <BSP_LCD_InitEx+0x19a>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004e3a:	f06f 0306 	mvn.w	r3, #6
 8004e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e40:	e001      	b.n	8004e46 <BSP_LCD_InitEx+0x19e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8004e42:	2300      	movs	r3, #0
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34
        }
#endif
      }
    /* By default the reload is activated and executed immediately */
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 8004e46:	4907      	ldr	r1, [pc, #28]	; (8004e64 <BSP_LCD_InitEx+0x1bc>)
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	3318      	adds	r3, #24
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
   }
  }

  return ret;
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3738      	adds	r7, #56	; 0x38
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	24001998 	.word	0x24001998
 8004e68:	240018f0 	.word	0x240018f0
 8004e6c:	50001000 	.word	0x50001000
 8004e70:	24001888 	.word	0x24001888
 8004e74:	52001000 	.word	0x52001000
 8004e78:	2400186c 	.word	0x2400186c

08004e7c <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and deactivating it later.
  * @param  Instance LCD Instance
  */
void BSP_LCD_Reset(uint32_t Instance)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  LCD_RESET_GPIO_CLK_ENABLE();
 8004e84:	4b18      	ldr	r3, [pc, #96]	; (8004ee8 <BSP_LCD_Reset+0x6c>)
 8004e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e8a:	4a17      	ldr	r2, [pc, #92]	; (8004ee8 <BSP_LCD_Reset+0x6c>)
 8004e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e94:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <BSP_LCD_Reset+0x6c>)
 8004e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9e:	60bb      	str	r3, [r7, #8]
 8004ea0:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO Reset pin */
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8004eb2:	f107 030c 	add.w	r3, r7, #12
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	480c      	ldr	r0, [pc, #48]	; (8004eec <BSP_LCD_Reset+0x70>)
 8004eba:	f003 fb3b 	bl	8008534 <HAL_GPIO_Init>

  /* Activate XRES active low */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2108      	movs	r1, #8
 8004ec2:	480a      	ldr	r0, [pc, #40]	; (8004eec <BSP_LCD_Reset+0x70>)
 8004ec4:	f003 fdf0 	bl	8008aa8 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8004ec8:	2014      	movs	r0, #20
 8004eca:	f002 f999 	bl	8007200 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 8004ece:	2201      	movs	r2, #1
 8004ed0:	2108      	movs	r1, #8
 8004ed2:	4806      	ldr	r0, [pc, #24]	; (8004eec <BSP_LCD_Reset+0x70>)
 8004ed4:	f003 fde8 	bl	8008aa8 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8004ed8:	200a      	movs	r0, #10
 8004eda:	f002 f991 	bl	8007200 <HAL_Delay>
}
 8004ede:	bf00      	nop
 8004ee0:	3720      	adds	r7, #32
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	58024400 	.word	0x58024400
 8004eec:	58021800 	.word	0x58021800

08004ef0 <LCD_InitSequence>:
/**
  * @brief  Configure LCD control pins (Back-light, Display Enable and TE)
  * @retval None
  */
static void LCD_InitSequence(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  /* LCD_BL_CTRL GPIO configuration */
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8004ef6:	4b30      	ldr	r3, [pc, #192]	; (8004fb8 <LCD_InitSequence+0xc8>)
 8004ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004efc:	4a2e      	ldr	r2, [pc, #184]	; (8004fb8 <LCD_InitSequence+0xc8>)
 8004efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f06:	4b2c      	ldr	r3, [pc, #176]	; (8004fb8 <LCD_InitSequence+0xc8>)
 8004f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f10:	60bb      	str	r3, [r7, #8]
 8004f12:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8004f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f18:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004f1e:	2302      	movs	r3, #2
 8004f20:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8004f26:	f107 030c 	add.w	r3, r7, #12
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4823      	ldr	r0, [pc, #140]	; (8004fbc <LCD_InitSequence+0xcc>)
 8004f2e:	f003 fb01 	bl	8008534 <HAL_GPIO_Init>
  /* Assert back-light LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8004f32:	2201      	movs	r2, #1
 8004f34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f38:	4820      	ldr	r0, [pc, #128]	; (8004fbc <LCD_InitSequence+0xcc>)
 8004f3a:	f003 fdb5 	bl	8008aa8 <HAL_GPIO_WritePin>

  /* LCD_TE_CTRL GPIO configuration */
  LCD_TE_GPIO_CLK_ENABLE();
 8004f3e:	4b1e      	ldr	r3, [pc, #120]	; (8004fb8 <LCD_InitSequence+0xc8>)
 8004f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f44:	4a1c      	ldr	r2, [pc, #112]	; (8004fb8 <LCD_InitSequence+0xc8>)
 8004f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f4e:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <LCD_InitSequence+0xc8>)
 8004f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f58:	607b      	str	r3, [r7, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]

  gpio_init_structure.Pin       = LCD_TE_PIN;
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8004f60:	2300      	movs	r3, #0
 8004f62:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004f64:	2302      	movs	r3, #2
 8004f66:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8004f68:	f107 030c 	add.w	r3, r7, #12
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4813      	ldr	r0, [pc, #76]	; (8004fbc <LCD_InitSequence+0xcc>)
 8004f70:	f003 fae0 	bl	8008534 <HAL_GPIO_Init>
  /* Assert back-light LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 8004f74:	2201      	movs	r2, #1
 8004f76:	2104      	movs	r1, #4
 8004f78:	4810      	ldr	r0, [pc, #64]	; (8004fbc <LCD_InitSequence+0xcc>)
 8004f7a:	f003 fd95 	bl	8008aa8 <HAL_GPIO_WritePin>

      /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 8004f7e:	2200      	movs	r2, #0
 8004f80:	210f      	movs	r1, #15
 8004f82:	2058      	movs	r0, #88	; 0x58
 8004f84:	f002 fa47 	bl	8007416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004f88:	2058      	movs	r0, #88	; 0x58
 8004f8a:	f002 fa5e 	bl	800744a <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 8004f8e:	2200      	movs	r2, #0
 8004f90:	210f      	movs	r1, #15
 8004f92:	205a      	movs	r0, #90	; 0x5a
 8004f94:	f002 fa3f 	bl	8007416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004f98:	205a      	movs	r0, #90	; 0x5a
 8004f9a:	f002 fa56 	bl	800744a <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	210f      	movs	r1, #15
 8004fa2:	207b      	movs	r0, #123	; 0x7b
 8004fa4:	f002 fa37 	bl	8007416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8004fa8:	207b      	movs	r0, #123	; 0x7b
 8004faa:	f002 fa4e 	bl	800744a <HAL_NVIC_EnableIRQ>
}
 8004fae:	bf00      	nop
 8004fb0:	3720      	adds	r7, #32
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	58024400 	.word	0x58024400
 8004fbc:	58022400 	.word	0x58022400

08004fc0 <MX_DSIHOST_DSI_Init>:
  * @param  Height Vertical active height
  * @param  PixelFormat DSI color coding RGB888 or RGB565
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_DSIHOST_DSI_Init(DSI_HandleTypeDef *hdsi, uint32_t Width, uint32_t Height, uint32_t PixelFormat)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b0a2      	sub	sp, #136	; 0x88
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  DSI_PLLInitTypeDef PLLInit;
  DSI_VidCfgTypeDef VidCfg;

  hdsi->Instance = DSI;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004fd4:	601a      	str	r2, [r3, #0]
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	605a      	str	r2, [r3, #4]
  hdsi->Init.TXEscapeCkdiv = 4;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2204      	movs	r2, #4
 8004fe0:	609a      	str	r2, [r3, #8]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 100;
 8004fe8:	2364      	movs	r3, #100	; 0x64
 8004fea:	67fb      	str	r3, [r7, #124]	; 0x7c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8004fec:	2305      	movs	r3, #5
 8004fee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8004ff8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f002 fd5c 	bl	8007abc <HAL_DSI_Init>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <MX_DSIHOST_DSI_Init+0x4e>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e053      	b.n	80050b6 <MX_DSIHOST_DSI_Init+0xf6>
  /* Timing parameters for all Video modes */
  /*
  The lane byte clock is set 62500 Khz
  The pixel clock is set to 27429 Khz
  */
  VidCfg.VirtualChannelID = 0;
 800500e:	2300      	movs	r3, #0
 8005010:	613b      	str	r3, [r7, #16]
  VidCfg.ColorCoding = PixelFormat;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	617b      	str	r3, [r7, #20]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8005016:	2300      	movs	r3, #0
 8005018:	61bb      	str	r3, [r7, #24]
  VidCfg.Mode = DSI_VID_MODE_BURST;
 800501a:	2302      	movs	r3, #2
 800501c:	61fb      	str	r3, [r7, #28]
  VidCfg.PacketSize = Width;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	623b      	str	r3, [r7, #32]
  VidCfg.NumberOfChunks = 0;
 8005022:	2300      	movs	r3, #0
 8005024:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.NullPacketSize = 0xFFFU;
 8005026:	f640 73ff 	movw	r3, #4095	; 0xfff
 800502a:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800502c:	2300      	movs	r3, #0
 800502e:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8005030:	2300      	movs	r3, #0
 8005032:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8005034:	2300      	movs	r3, #0
 8005036:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 8005038:	2304      	movs	r3, #4
 800503a:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 800503c:	234d      	movs	r3, #77	; 0x4d
 800503e:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f24f 4224 	movw	r2, #62500	; 0xf424
 8005046:	fb03 f202 	mul.w	r2, r3, r2
 800504a:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <MX_DSIHOST_DSI_Init+0x100>)
 800504c:	4413      	add	r3, r2
 800504e:	4a1d      	ldr	r2, [pc, #116]	; (80050c4 <MX_DSIHOST_DSI_Init+0x104>)
 8005050:	fba2 2303 	umull	r2, r3, r2, r3
 8005054:	0b5b      	lsrs	r3, r3, #13
 8005056:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 8005058:	2301      	movs	r3, #1
 800505a:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 800505c:	230f      	movs	r3, #15
 800505e:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8005060:	2310      	movs	r3, #16
 8005062:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.VerticalActive = Height;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8005068:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800506c:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPLargestPacketSize = 4;
 800506e:	2304      	movs	r3, #4
 8005070:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVACTLargestPacketSize = 4;
 8005072:	2304      	movs	r3, #4
 8005074:	65fb      	str	r3, [r7, #92]	; 0x5c

  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 8005076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800507a:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 800507c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005080:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8005082:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005086:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8005088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800508c:	66fb      	str	r3, [r7, #108]	; 0x6c
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 800508e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005092:	673b      	str	r3, [r7, #112]	; 0x70
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8005094:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005098:	677b      	str	r3, [r7, #116]	; 0x74
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 800509a:	2300      	movs	r3, #0
 800509c:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800509e:	f107 0310 	add.w	r3, r7, #16
 80050a2:	4619      	mov	r1, r3
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f002 fe2f 	bl	8007d08 <HAL_DSI_ConfigVideoMode>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <MX_DSIHOST_DSI_Init+0xf4>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e000      	b.n	80050b6 <MX_DSIHOST_DSI_Init+0xf6>
  }

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3788      	adds	r7, #136	; 0x88
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	0042c1d8 	.word	0x0042c1d8
 80050c4:	4c751ce3 	.word	0x4c751ce3

080050c8 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4a21      	ldr	r2, [pc, #132]	; (800515c <MX_LTDC_Init+0x94>)
 80050d8:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2223      	movs	r2, #35	; 0x23
 80050fc:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f103 0223 	add.w	r2, r3, #35	; 0x23
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f103 0245 	add.w	r2, r3, #69	; 0x45
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	220f      	movs	r2, #15
 800511c:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f103 020f 	add.w	r2, r3, #15
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f103 021f 	add.w	r2, r3, #31
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0x00;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0x00;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0x00;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f004 fb68 	bl	8009820 <HAL_LTDC_Init>
 8005150:	4603      	mov	r3, r0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	50001000 	.word	0x50001000

08005160 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b092      	sub	sp, #72	; 0x48
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 800518a:	23ff      	movs	r3, #255	; 0xff
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005192:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005196:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005198:	2307      	movs	r3, #7
 800519a:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 80051c6:	2300      	movs	r3, #0
 80051c8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80051cc:	f107 0314 	add.w	r3, r7, #20
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	4619      	mov	r1, r3
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f004 fbfd 	bl	80099d4 <HAL_LTDC_ConfigLayer>
 80051da:	4603      	mov	r3, r0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3748      	adds	r7, #72	; 0x48
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b0b2      	sub	sp, #200	; 0xc8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 80051ec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80051f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 80051f2:	2305      	movs	r3, #5
 80051f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 80051f6:	2384      	movs	r3, #132	; 0x84
 80051f8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 80051fa:	2302      	movs	r3, #2
 80051fc:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3Q      = 2U;
 80051fe:	2302      	movs	r3, #2
 8005200:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8005202:	2318      	movs	r3, #24
 8005204:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 8005206:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800520a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800520c:	2300      	movs	r3, #0
 800520e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	64bb      	str	r3, [r7, #72]	; 0x48
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005214:	f107 0308 	add.w	r3, r7, #8
 8005218:	4618      	mov	r0, r3
 800521a:	f006 fbbb 	bl	800b994 <HAL_RCCEx_PeriphCLKConfig>
 800521e:	4603      	mov	r3, r0
}
 8005220:	4618      	mov	r0, r3
 8005222:	37c8      	adds	r7, #200	; 0xc8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800523c:	f06f 0301 	mvn.w	r3, #1
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	e009      	b.n	8005258 <BSP_LCD_SetActiveLayer+0x30>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8005244:	4908      	ldr	r1, [pc, #32]	; (8005268 <BSP_LCD_SetActiveLayer+0x40>)
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	4613      	mov	r3, r2
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	1a9b      	subs	r3, r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	440b      	add	r3, r1
 8005252:	3308      	adds	r3, #8
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8005258:	68fb      	ldr	r3, [r7, #12]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	24001998 	.word	0x24001998

0800526c <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005280:	f06f 0301 	mvn.w	r3, #1
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	e00a      	b.n	800529e <BSP_LCD_GetPixelFormat+0x32>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8005288:	4908      	ldr	r1, [pc, #32]	; (80052ac <BSP_LCD_GetPixelFormat+0x40>)
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	4613      	mov	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	330c      	adds	r3, #12
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800529e:	68fb      	ldr	r3, [r7, #12]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	24001998 	.word	0x24001998

080052b0 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80052c4:	f06f 0301 	mvn.w	r3, #1
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	e00e      	b.n	80052ea <BSP_LCD_GetXSize+0x3a>
  }
  else if(Lcd_Drv->GetXSize != NULL)
 80052cc:	4b0a      	ldr	r3, [pc, #40]	; (80052f8 <BSP_LCD_GetXSize+0x48>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <BSP_LCD_GetXSize+0x3a>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 80052d6:	4909      	ldr	r1, [pc, #36]	; (80052fc <BSP_LCD_GetXSize+0x4c>)
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	4613      	mov	r3, r2
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	1a9b      	subs	r3, r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	440b      	add	r3, r1
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80052ea:	68fb      	ldr	r3, [r7, #12]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	24001864 	.word	0x24001864
 80052fc:	24001998 	.word	0x24001998

08005300 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005314:	f06f 0301 	mvn.w	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	e00f      	b.n	800533c <BSP_LCD_GetYSize+0x3c>
  }
  else if(Lcd_Drv->GetYSize != NULL)
 800531c:	4b0b      	ldr	r3, [pc, #44]	; (800534c <BSP_LCD_GetYSize+0x4c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <BSP_LCD_GetYSize+0x3c>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8005326:	490a      	ldr	r1, [pc, #40]	; (8005350 <BSP_LCD_GetYSize+0x50>)
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	1a9b      	subs	r3, r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	440b      	add	r3, r1
 8005334:	3304      	adds	r3, #4
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800533c:	68fb      	ldr	r3, [r7, #12]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	24001864 	.word	0x24001864
 8005350:	24001998 	.word	0x24001998

08005354 <BSP_LCD_SetBrightness>:
  * @param  Instance    LCD Instance
  * @param  Brightness [00: Min (black), 100 Max]
  * @retval BSP status
  */
int32_t BSP_LCD_SetBrightness(uint32_t Instance, uint32_t Brightness)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <BSP_LCD_SetBrightness+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005368:	f06f 0301 	mvn.w	r3, #1
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	e00d      	b.n	800538c <BSP_LCD_SetBrightness+0x38>
  }
  else
  {
    if(Lcd_Drv->SetBrightness(Lcd_CompObj, Brightness) != BSP_ERROR_NONE)
 8005370:	4b09      	ldr	r3, [pc, #36]	; (8005398 <BSP_LCD_SetBrightness+0x44>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	4a09      	ldr	r2, [pc, #36]	; (800539c <BSP_LCD_SetBrightness+0x48>)
 8005378:	6812      	ldr	r2, [r2, #0]
 800537a:	6839      	ldr	r1, [r7, #0]
 800537c:	4610      	mov	r0, r2
 800537e:	4798      	blx	r3
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <BSP_LCD_SetBrightness+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005386:	f06f 0303 	mvn.w	r3, #3
 800538a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800538c:	68fb      	ldr	r3, [r7, #12]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	24001864 	.word	0x24001864
 800539c:	24001868 	.word	0x24001868

080053a0 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 80053a0:	b590      	push	{r4, r7, lr}
 80053a2:	b08f      	sub	sp, #60	; 0x3c
 80053a4:	af02      	add	r7, sp, #8
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80053ae:	2300      	movs	r3, #0
 80053b0:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	330a      	adds	r3, #10
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	330b      	adds	r3, #11
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	441a      	add	r2, r3
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	330c      	adds	r3, #12
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	041b      	lsls	r3, r3, #16
 80053cc:	441a      	add	r2, r3
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	330d      	adds	r3, #13
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	061b      	lsls	r3, r3, #24
 80053d6:	4413      	add	r3, r2
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	3312      	adds	r3, #18
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	461a      	mov	r2, r3
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	3313      	adds	r3, #19
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	021b      	lsls	r3, r3, #8
 80053ea:	441a      	add	r2, r3
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	3314      	adds	r3, #20
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	041b      	lsls	r3, r3, #16
 80053f4:	441a      	add	r2, r3
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	3315      	adds	r3, #21
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	061b      	lsls	r3, r3, #24
 80053fe:	4413      	add	r3, r2
 8005400:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	3316      	adds	r3, #22
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	3317      	adds	r3, #23
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	021b      	lsls	r3, r3, #8
 8005412:	441a      	add	r2, r3
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	3318      	adds	r3, #24
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	041b      	lsls	r3, r3, #16
 800541c:	441a      	add	r2, r3
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	3319      	adds	r3, #25
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	061b      	lsls	r3, r3, #24
 8005426:	4413      	add	r3, r2
 8005428:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	331c      	adds	r3, #28
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	331d      	adds	r3, #29
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	4413      	add	r3, r2
 800543c:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800543e:	493f      	ldr	r1, [pc, #252]	; (800553c <BSP_LCD_DrawBitmap+0x19c>)
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4613      	mov	r3, r2
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	1a9b      	subs	r3, r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	440b      	add	r3, r1
 800544c:	3308      	adds	r3, #8
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a3b      	ldr	r2, [pc, #236]	; (8005540 <BSP_LCD_DrawBitmap+0x1a0>)
 8005452:	2134      	movs	r1, #52	; 0x34
 8005454:	fb01 f303 	mul.w	r3, r1, r3
 8005458:	4413      	add	r3, r2
 800545a:	335c      	adds	r3, #92	; 0x5c
 800545c:	6819      	ldr	r1, [r3, #0]
 800545e:	4837      	ldr	r0, [pc, #220]	; (800553c <BSP_LCD_DrawBitmap+0x19c>)
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4613      	mov	r3, r2
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	1a9b      	subs	r3, r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4403      	add	r3, r0
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	fb03 f202 	mul.w	r2, r3, r2
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	18d0      	adds	r0, r2, r3
 8005478:	4c30      	ldr	r4, [pc, #192]	; (800553c <BSP_LCD_DrawBitmap+0x19c>)
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4613      	mov	r3, r2
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4423      	add	r3, r4
 8005486:	3310      	adds	r3, #16
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	fb00 f303 	mul.w	r3, r0, r3
 800548e:	440b      	add	r3, r1
 8005490:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	3b20      	subs	r3, #32
 8005496:	2b07      	cmp	r3, #7
 8005498:	d802      	bhi.n	80054a0 <BSP_LCD_DrawBitmap+0x100>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 800549a:	2300      	movs	r3, #0
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
 800549e:	e008      	b.n	80054b2 <BSP_LCD_DrawBitmap+0x112>
  }
  else if ((bit_pixel/8U) == 2U)
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	3b10      	subs	r3, #16
 80054a4:	2b07      	cmp	r3, #7
 80054a6:	d802      	bhi.n	80054ae <BSP_LCD_DrawBitmap+0x10e>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 80054a8:	2302      	movs	r3, #2
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
 80054ac:	e001      	b.n	80054b2 <BSP_LCD_DrawBitmap+0x112>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 80054ae:	2301      	movs	r3, #1
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	3b01      	subs	r3, #1
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	fb02 f303 	mul.w	r3, r2, r3
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	08d2      	lsrs	r2, r2, #3
 80054c0:	fb03 f202 	mul.w	r2, r3, r2
 80054c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c6:	4413      	add	r3, r2
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	4413      	add	r3, r2
 80054cc:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80054ce:	2300      	movs	r3, #0
 80054d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054d2:	e029      	b.n	8005528 <BSP_LCD_DrawBitmap+0x188>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 80054d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	6a39      	ldr	r1, [r7, #32]
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 fad6 	bl	8005a90 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 80054e4:	4915      	ldr	r1, [pc, #84]	; (800553c <BSP_LCD_DrawBitmap+0x19c>)
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4613      	mov	r3, r2
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	1a9b      	subs	r3, r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	6819      	ldr	r1, [r3, #0]
 80054f4:	4811      	ldr	r0, [pc, #68]	; (800553c <BSP_LCD_DrawBitmap+0x19c>)
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4613      	mov	r3, r2
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	1a9b      	subs	r3, r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4403      	add	r3, r0
 8005502:	3310      	adds	r3, #16
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	fb01 f303 	mul.w	r3, r1, r3
 800550a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800550c:	4413      	add	r3, r2
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	08db      	lsrs	r3, r3, #3
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	fb02 f303 	mul.w	r3, r2, r3
 800551a:	425b      	negs	r3, r3
 800551c:	6a3a      	ldr	r2, [r7, #32]
 800551e:	4413      	add	r3, r2
 8005520:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	3301      	adds	r3, #1
 8005526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	429a      	cmp	r2, r3
 800552e:	d3d1      	bcc.n	80054d4 <BSP_LCD_DrawBitmap+0x134>
  }

  return ret;
 8005530:	69fb      	ldr	r3, [r7, #28]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3734      	adds	r7, #52	; 0x34
 8005536:	46bd      	mov	sp, r7
 8005538:	bd90      	pop	{r4, r7, pc}
 800553a:	bf00      	nop
 800553c:	24001998 	.word	0x24001998
 8005540:	240018f0 	.word	0x240018f0

08005544 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8005552:	2300      	movs	r3, #0
 8005554:	61fb      	str	r3, [r7, #28]
 8005556:	e035      	b.n	80055c4 <BSP_LCD_FillRGBRect+0x80>
  {
    for(j = 0; j < Width; j++)
 8005558:	2300      	movs	r3, #0
 800555a:	61bb      	str	r3, [r7, #24]
 800555c:	e02b      	b.n	80055b6 <BSP_LCD_FillRGBRect+0x72>
    {
      color = *pData | (*(pData + 1) << 8) | (*(pData + 2) << 16) | (*(pData + 3) << 24);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	3301      	adds	r3, #1
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	021b      	lsls	r3, r3, #8
 800556c:	431a      	orrs	r2, r3
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	3302      	adds	r3, #2
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	041b      	lsls	r3, r3, #16
 8005576:	431a      	orrs	r2, r3
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	3303      	adds	r3, #3
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	061b      	lsls	r3, r3, #24
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]
      BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	18d1      	adds	r1, r2, r3
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	441a      	add	r2, r3
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 f99e 	bl	80058d4 <BSP_LCD_WritePixel>
      pData += Lcd_Ctx[Instance].BppFactor;
 8005598:	490f      	ldr	r1, [pc, #60]	; (80055d8 <BSP_LCD_FillRGBRect+0x94>)
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	4613      	mov	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	3310      	adds	r3, #16
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	4413      	add	r3, r2
 80055ae:	603b      	str	r3, [r7, #0]
    for(j = 0; j < Width; j++)
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	3301      	adds	r3, #1
 80055b4:	61bb      	str	r3, [r7, #24]
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d3cf      	bcc.n	800555e <BSP_LCD_FillRGBRect+0x1a>
  for(i = 0; i < Height; i++)
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	3301      	adds	r3, #1
 80055c2:	61fb      	str	r3, [r7, #28]
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d3c5      	bcc.n	8005558 <BSP_LCD_FillRGBRect+0x14>
    }
  }
#endif
  return BSP_ERROR_NONE;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3720      	adds	r7, #32
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	24001998 	.word	0x24001998

080055dc <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80055dc:	b590      	push	{r4, r7, lr}
 80055de:	b089      	sub	sp, #36	; 0x24
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80055ea:	4928      	ldr	r1, [pc, #160]	; (800568c <BSP_LCD_DrawHLine+0xb0>)
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4613      	mov	r3, r2
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	1a9b      	subs	r3, r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	440b      	add	r3, r1
 80055f8:	3308      	adds	r3, #8
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a24      	ldr	r2, [pc, #144]	; (8005690 <BSP_LCD_DrawHLine+0xb4>)
 80055fe:	2134      	movs	r1, #52	; 0x34
 8005600:	fb01 f303 	mul.w	r3, r1, r3
 8005604:	4413      	add	r3, r2
 8005606:	335c      	adds	r3, #92	; 0x5c
 8005608:	6819      	ldr	r1, [r3, #0]
 800560a:	4820      	ldr	r0, [pc, #128]	; (800568c <BSP_LCD_DrawHLine+0xb0>)
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4613      	mov	r3, r2
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	1a9b      	subs	r3, r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4403      	add	r3, r0
 8005618:	3310      	adds	r3, #16
 800561a:	6818      	ldr	r0, [r3, #0]
 800561c:	4c1b      	ldr	r4, [pc, #108]	; (800568c <BSP_LCD_DrawHLine+0xb0>)
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4613      	mov	r3, r2
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	1a9b      	subs	r3, r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4423      	add	r3, r4
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	fb03 f202 	mul.w	r2, r3, r2
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	4413      	add	r3, r2
 8005636:	fb00 f303 	mul.w	r3, r0, r3
 800563a:	440b      	add	r3, r1
 800563c:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	18d1      	adds	r1, r2, r3
 8005644:	4811      	ldr	r0, [pc, #68]	; (800568c <BSP_LCD_DrawHLine+0xb0>)
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4613      	mov	r3, r2
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	1a9b      	subs	r3, r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4403      	add	r3, r0
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4299      	cmp	r1, r3
 8005656:	d90a      	bls.n	800566e <BSP_LCD_DrawHLine+0x92>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8005658:	490c      	ldr	r1, [pc, #48]	; (800568c <BSP_LCD_DrawHLine+0xb0>)
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4613      	mov	r3, r2
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 800566e:	6979      	ldr	r1, [r7, #20]
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	2300      	movs	r3, #0
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	2301      	movs	r3, #1
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f993 	bl	80059a8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	371c      	adds	r7, #28
 8005688:	46bd      	mov	sp, r7
 800568a:	bd90      	pop	{r4, r7, pc}
 800568c:	24001998 	.word	0x24001998
 8005690:	240018f0 	.word	0x240018f0

08005694 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8005694:	b590      	push	{r4, r7, lr}
 8005696:	b089      	sub	sp, #36	; 0x24
 8005698:	af02      	add	r7, sp, #8
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80056a2:	492d      	ldr	r1, [pc, #180]	; (8005758 <BSP_LCD_DrawVLine+0xc4>)
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4613      	mov	r3, r2
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	1a9b      	subs	r3, r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	3308      	adds	r3, #8
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a29      	ldr	r2, [pc, #164]	; (800575c <BSP_LCD_DrawVLine+0xc8>)
 80056b6:	2134      	movs	r1, #52	; 0x34
 80056b8:	fb01 f303 	mul.w	r3, r1, r3
 80056bc:	4413      	add	r3, r2
 80056be:	335c      	adds	r3, #92	; 0x5c
 80056c0:	6819      	ldr	r1, [r3, #0]
 80056c2:	4825      	ldr	r0, [pc, #148]	; (8005758 <BSP_LCD_DrawVLine+0xc4>)
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4613      	mov	r3, r2
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	1a9b      	subs	r3, r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4403      	add	r3, r0
 80056d0:	3310      	adds	r3, #16
 80056d2:	6818      	ldr	r0, [r3, #0]
 80056d4:	4c20      	ldr	r4, [pc, #128]	; (8005758 <BSP_LCD_DrawVLine+0xc4>)
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4613      	mov	r3, r2
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	1a9b      	subs	r3, r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4423      	add	r3, r4
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	fb03 f202 	mul.w	r2, r3, r2
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	4413      	add	r3, r2
 80056ee:	fb00 f303 	mul.w	r3, r0, r3
 80056f2:	440b      	add	r3, r1
 80056f4:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	18d1      	adds	r1, r2, r3
 80056fc:	4816      	ldr	r0, [pc, #88]	; (8005758 <BSP_LCD_DrawVLine+0xc4>)
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	4613      	mov	r3, r2
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4403      	add	r3, r0
 800570a:	3304      	adds	r3, #4
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4299      	cmp	r1, r3
 8005710:	d90b      	bls.n	800572a <BSP_LCD_DrawVLine+0x96>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8005712:	4911      	ldr	r1, [pc, #68]	; (8005758 <BSP_LCD_DrawVLine+0xc4>)
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4613      	mov	r3, r2
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	1a9b      	subs	r3, r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	440b      	add	r3, r1
 8005720:	3304      	adds	r3, #4
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	603b      	str	r3, [r7, #0]
  }
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 800572a:	6979      	ldr	r1, [r7, #20]
 800572c:	480a      	ldr	r0, [pc, #40]	; (8005758 <BSP_LCD_DrawVLine+0xc4>)
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	4613      	mov	r3, r2
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	1a9b      	subs	r3, r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4403      	add	r3, r0
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3b01      	subs	r3, #1
 800573e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005740:	9201      	str	r2, [sp, #4]
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2201      	movs	r2, #1
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f92d 	bl	80059a8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	371c      	adds	r7, #28
 8005754:	46bd      	mov	sp, r7
 8005756:	bd90      	pop	{r4, r7, pc}
 8005758:	24001998 	.word	0x24001998
 800575c:	240018f0 	.word	0x240018f0

08005760 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8005760:	b590      	push	{r4, r7, lr}
 8005762:	b089      	sub	sp, #36	; 0x24
 8005764:	af02      	add	r7, sp, #8
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800576e:	4921      	ldr	r1, [pc, #132]	; (80057f4 <BSP_LCD_FillRect+0x94>)
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4613      	mov	r3, r2
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	1a9b      	subs	r3, r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	440b      	add	r3, r1
 800577c:	3308      	adds	r3, #8
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1d      	ldr	r2, [pc, #116]	; (80057f8 <BSP_LCD_FillRect+0x98>)
 8005782:	2134      	movs	r1, #52	; 0x34
 8005784:	fb01 f303 	mul.w	r3, r1, r3
 8005788:	4413      	add	r3, r2
 800578a:	335c      	adds	r3, #92	; 0x5c
 800578c:	6819      	ldr	r1, [r3, #0]
 800578e:	4819      	ldr	r0, [pc, #100]	; (80057f4 <BSP_LCD_FillRect+0x94>)
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4613      	mov	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	1a9b      	subs	r3, r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4403      	add	r3, r0
 800579c:	3310      	adds	r3, #16
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	4c14      	ldr	r4, [pc, #80]	; (80057f4 <BSP_LCD_FillRect+0x94>)
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4613      	mov	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	1a9b      	subs	r3, r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4423      	add	r3, r4
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	fb03 f202 	mul.w	r2, r3, r2
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	4413      	add	r3, r2
 80057ba:	fb00 f303 	mul.w	r3, r0, r3
 80057be:	440b      	add	r3, r1
 80057c0:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80057c2:	6979      	ldr	r1, [r7, #20]
 80057c4:	480b      	ldr	r0, [pc, #44]	; (80057f4 <BSP_LCD_FillRect+0x94>)
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4613      	mov	r3, r2
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4403      	add	r3, r0
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057da:	9201      	str	r2, [sp, #4]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 f8e0 	bl	80059a8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd90      	pop	{r4, r7, pc}
 80057f2:	bf00      	nop
 80057f4:	24001998 	.word	0x24001998
 80057f8:	240018f0 	.word	0x240018f0

080057fc <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800580a:	4930      	ldr	r1, [pc, #192]	; (80058cc <BSP_LCD_ReadPixel+0xd0>)
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4613      	mov	r3, r2
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	1a9b      	subs	r3, r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	3308      	adds	r3, #8
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a2c      	ldr	r2, [pc, #176]	; (80058d0 <BSP_LCD_ReadPixel+0xd4>)
 800581e:	2134      	movs	r1, #52	; 0x34
 8005820:	fb01 f303 	mul.w	r3, r1, r3
 8005824:	4413      	add	r3, r2
 8005826:	3348      	adds	r3, #72	; 0x48
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d122      	bne.n	8005874 <BSP_LCD_ReadPixel+0x78>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800582e:	4927      	ldr	r1, [pc, #156]	; (80058cc <BSP_LCD_ReadPixel+0xd0>)
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4613      	mov	r3, r2
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	1a9b      	subs	r3, r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	440b      	add	r3, r1
 800583c:	3308      	adds	r3, #8
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a23      	ldr	r2, [pc, #140]	; (80058d0 <BSP_LCD_ReadPixel+0xd4>)
 8005842:	2134      	movs	r1, #52	; 0x34
 8005844:	fb01 f303 	mul.w	r3, r1, r3
 8005848:	4413      	add	r3, r2
 800584a:	335c      	adds	r3, #92	; 0x5c
 800584c:	6819      	ldr	r1, [r3, #0]
 800584e:	481f      	ldr	r0, [pc, #124]	; (80058cc <BSP_LCD_ReadPixel+0xd0>)
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4613      	mov	r3, r2
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	1a9b      	subs	r3, r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4403      	add	r3, r0
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	fb03 f202 	mul.w	r2, r3, r2
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	440b      	add	r3, r1
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	e023      	b.n	80058bc <BSP_LCD_ReadPixel+0xc0>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8005874:	4915      	ldr	r1, [pc, #84]	; (80058cc <BSP_LCD_ReadPixel+0xd0>)
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4613      	mov	r3, r2
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	1a9b      	subs	r3, r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	3308      	adds	r3, #8
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a12      	ldr	r2, [pc, #72]	; (80058d0 <BSP_LCD_ReadPixel+0xd4>)
 8005888:	2134      	movs	r1, #52	; 0x34
 800588a:	fb01 f303 	mul.w	r3, r1, r3
 800588e:	4413      	add	r3, r2
 8005890:	335c      	adds	r3, #92	; 0x5c
 8005892:	6819      	ldr	r1, [r3, #0]
 8005894:	480d      	ldr	r0, [pc, #52]	; (80058cc <BSP_LCD_ReadPixel+0xd0>)
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4613      	mov	r3, r2
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	1a9b      	subs	r3, r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4403      	add	r3, r0
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	fb03 f202 	mul.w	r2, r3, r2
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	4413      	add	r3, r2
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	440b      	add	r3, r1
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	461a      	mov	r2, r3
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	24001998 	.word	0x24001998
 80058d0:	240018f0 	.word	0x240018f0

080058d4 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80058e2:	492f      	ldr	r1, [pc, #188]	; (80059a0 <BSP_LCD_WritePixel+0xcc>)
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4613      	mov	r3, r2
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	1a9b      	subs	r3, r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	440b      	add	r3, r1
 80058f0:	3308      	adds	r3, #8
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a2b      	ldr	r2, [pc, #172]	; (80059a4 <BSP_LCD_WritePixel+0xd0>)
 80058f6:	2134      	movs	r1, #52	; 0x34
 80058f8:	fb01 f303 	mul.w	r3, r1, r3
 80058fc:	4413      	add	r3, r2
 80058fe:	3348      	adds	r3, #72	; 0x48
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d122      	bne.n	800594c <BSP_LCD_WritePixel+0x78>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8005906:	4926      	ldr	r1, [pc, #152]	; (80059a0 <BSP_LCD_WritePixel+0xcc>)
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4613      	mov	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	1a9b      	subs	r3, r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	440b      	add	r3, r1
 8005914:	3308      	adds	r3, #8
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a22      	ldr	r2, [pc, #136]	; (80059a4 <BSP_LCD_WritePixel+0xd0>)
 800591a:	2134      	movs	r1, #52	; 0x34
 800591c:	fb01 f303 	mul.w	r3, r1, r3
 8005920:	4413      	add	r3, r2
 8005922:	335c      	adds	r3, #92	; 0x5c
 8005924:	6819      	ldr	r1, [r3, #0]
 8005926:	481e      	ldr	r0, [pc, #120]	; (80059a0 <BSP_LCD_WritePixel+0xcc>)
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	4613      	mov	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4403      	add	r3, r0
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	fb03 f202 	mul.w	r2, r3, r2
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4413      	add	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	440b      	add	r3, r1
 8005944:	461a      	mov	r2, r3
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	e021      	b.n	8005990 <BSP_LCD_WritePixel+0xbc>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800594c:	4914      	ldr	r1, [pc, #80]	; (80059a0 <BSP_LCD_WritePixel+0xcc>)
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4613      	mov	r3, r2
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	1a9b      	subs	r3, r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	440b      	add	r3, r1
 800595a:	3308      	adds	r3, #8
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a11      	ldr	r2, [pc, #68]	; (80059a4 <BSP_LCD_WritePixel+0xd0>)
 8005960:	2134      	movs	r1, #52	; 0x34
 8005962:	fb01 f303 	mul.w	r3, r1, r3
 8005966:	4413      	add	r3, r2
 8005968:	335c      	adds	r3, #92	; 0x5c
 800596a:	6819      	ldr	r1, [r3, #0]
 800596c:	480c      	ldr	r0, [pc, #48]	; (80059a0 <BSP_LCD_WritePixel+0xcc>)
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4613      	mov	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4403      	add	r3, r0
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	fb03 f202 	mul.w	r2, r3, r2
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4413      	add	r3, r2
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	440b      	add	r3, r1
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	b292      	uxth	r2, r2
 800598e:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	24001998 	.word	0x24001998
 80059a4:	240018f0 	.word	0x240018f0

080059a8 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 80059ba:	4932      	ldr	r1, [pc, #200]	; (8005a84 <LL_FillBuffer+0xdc>)
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4613      	mov	r3, r2
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	1a9b      	subs	r3, r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	440b      	add	r3, r1
 80059c8:	330c      	adds	r3, #12
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d129      	bne.n	8005a24 <LL_FillBuffer+0x7c>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 80059d0:	2302      	movs	r3, #2
 80059d2:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	0adb      	lsrs	r3, r3, #11
 80059d8:	f003 021f 	and.w	r2, r3, #31
 80059dc:	4613      	mov	r3, r2
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	4413      	add	r3, r2
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	3317      	adds	r3, #23
 80059e8:	099b      	lsrs	r3, r3, #6
 80059ea:	0419      	lsls	r1, r3, #16
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059f4:	4613      	mov	r3, r2
 80059f6:	01db      	lsls	r3, r3, #7
 80059f8:	4413      	add	r3, r2
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4413      	add	r3, r2
 80059fe:	3321      	adds	r3, #33	; 0x21
 8005a00:	099b      	lsrs	r3, r3, #6
 8005a02:	021b      	lsls	r3, r3, #8
 8005a04:	4319      	orrs	r1, r3
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	f003 021f 	and.w	r2, r3, #31
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	4413      	add	r3, r2
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	3317      	adds	r3, #23
 8005a18:	099b      	lsrs	r3, r3, #6
 8005a1a:	430b      	orrs	r3, r1
 8005a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a20:	613b      	str	r3, [r7, #16]
    break;
 8005a22:	e002      	b.n	8005a2a <LL_FillBuffer+0x82>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8005a24:	2300      	movs	r3, #0
 8005a26:	617b      	str	r3, [r7, #20]
    break;
 8005a28:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8005a2a:	4b17      	ldr	r3, [pc, #92]	; (8005a88 <LL_FillBuffer+0xe0>)
 8005a2c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005a30:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8005a32:	4a15      	ldr	r2, [pc, #84]	; (8005a88 <LL_FillBuffer+0xe0>)
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8005a38:	4a13      	ldr	r2, [pc, #76]	; (8005a88 <LL_FillBuffer+0xe0>)
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 8005a3e:	4b12      	ldr	r3, [pc, #72]	; (8005a88 <LL_FillBuffer+0xe0>)
 8005a40:	4a12      	ldr	r2, [pc, #72]	; (8005a8c <LL_FillBuffer+0xe4>)
 8005a42:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8005a44:	4810      	ldr	r0, [pc, #64]	; (8005a88 <LL_FillBuffer+0xe0>)
 8005a46:	f001 fd1b 	bl	8007480 <HAL_DMA2D_Init>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d115      	bne.n	8005a7c <LL_FillBuffer+0xd4>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8005a50:	2101      	movs	r1, #1
 8005a52:	480d      	ldr	r0, [pc, #52]	; (8005a88 <LL_FillBuffer+0xe0>)
 8005a54:	f001 fe96 	bl	8007784 <HAL_DMA2D_ConfigLayer>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10e      	bne.n	8005a7c <LL_FillBuffer+0xd4>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6939      	ldr	r1, [r7, #16]
 8005a68:	4807      	ldr	r0, [pc, #28]	; (8005a88 <LL_FillBuffer+0xe0>)
 8005a6a:	f001 fd77 	bl	800755c <HAL_DMA2D_Start>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d103      	bne.n	8005a7c <LL_FillBuffer+0xd4>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8005a74:	2119      	movs	r1, #25
 8005a76:	4804      	ldr	r0, [pc, #16]	; (8005a88 <LL_FillBuffer+0xe0>)
 8005a78:	f001 fd9b 	bl	80075b2 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8005a7c:	bf00      	nop
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	24001998 	.word	0x24001998
 8005a88:	24001888 	.word	0x24001888
 8005a8c:	52001000 	.word	0x52001000

08005a90 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 8005a9e:	4925      	ldr	r1, [pc, #148]	; (8005b34 <LL_ConvertLineToRGB+0xa4>)
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	1a9b      	subs	r3, r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	440b      	add	r3, r1
 8005aac:	330c      	adds	r3, #12
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d102      	bne.n	8005aba <LL_ConvertLineToRGB+0x2a>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	617b      	str	r3, [r7, #20]
    break;
 8005ab8:	e002      	b.n	8005ac0 <LL_ConvertLineToRGB+0x30>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8005aba:	2300      	movs	r3, #0
 8005abc:	617b      	str	r3, [r7, #20]
    break;
 8005abe:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8005ac0:	4b1d      	ldr	r3, [pc, #116]	; (8005b38 <LL_ConvertLineToRGB+0xa8>)
 8005ac2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005ac6:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8005ac8:	4a1b      	ldr	r2, [pc, #108]	; (8005b38 <LL_ConvertLineToRGB+0xa8>)
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8005ace:	4b1a      	ldr	r3, [pc, #104]	; (8005b38 <LL_ConvertLineToRGB+0xa8>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005ad4:	4b18      	ldr	r3, [pc, #96]	; (8005b38 <LL_ConvertLineToRGB+0xa8>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8005ada:	4b17      	ldr	r3, [pc, #92]	; (8005b38 <LL_ConvertLineToRGB+0xa8>)
 8005adc:	22ff      	movs	r2, #255	; 0xff
 8005ade:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8005ae0:	4a15      	ldr	r2, [pc, #84]	; (8005b38 <LL_ConvertLineToRGB+0xa8>)
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8005ae6:	4b14      	ldr	r3, [pc, #80]	; (8005b38 <LL_ConvertLineToRGB+0xa8>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 8005aec:	4b12      	ldr	r3, [pc, #72]	; (8005b38 <LL_ConvertLineToRGB+0xa8>)
 8005aee:	4a13      	ldr	r2, [pc, #76]	; (8005b3c <LL_ConvertLineToRGB+0xac>)
 8005af0:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8005af2:	4811      	ldr	r0, [pc, #68]	; (8005b38 <LL_ConvertLineToRGB+0xa8>)
 8005af4:	f001 fcc4 	bl	8007480 <HAL_DMA2D_Init>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d115      	bne.n	8005b2a <LL_ConvertLineToRGB+0x9a>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8005afe:	2101      	movs	r1, #1
 8005b00:	480d      	ldr	r0, [pc, #52]	; (8005b38 <LL_ConvertLineToRGB+0xa8>)
 8005b02:	f001 fe3f 	bl	8007784 <HAL_DMA2D_ConfigLayer>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10e      	bne.n	8005b2a <LL_ConvertLineToRGB+0x9a>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8005b0c:	68b9      	ldr	r1, [r7, #8]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	2301      	movs	r3, #1
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	4808      	ldr	r0, [pc, #32]	; (8005b38 <LL_ConvertLineToRGB+0xa8>)
 8005b18:	f001 fd20 	bl	800755c <HAL_DMA2D_Start>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d103      	bne.n	8005b2a <LL_ConvertLineToRGB+0x9a>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8005b22:	2132      	movs	r1, #50	; 0x32
 8005b24:	4804      	ldr	r0, [pc, #16]	; (8005b38 <LL_ConvertLineToRGB+0xa8>)
 8005b26:	f001 fd44 	bl	80075b2 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8005b2a:	bf00      	nop
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	24001998 	.word	0x24001998
 8005b38:	24001888 	.word	0x24001888
 8005b3c:	52001000 	.word	0x52001000

08005b40 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance == LTDC)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a13      	ldr	r2, [pc, #76]	; (8005b9c <LTDC_MspInit+0x5c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d11e      	bne.n	8005b90 <LTDC_MspInit+0x50>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005b52:	4b13      	ldr	r3, [pc, #76]	; (8005ba0 <LTDC_MspInit+0x60>)
 8005b54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005b58:	4a11      	ldr	r2, [pc, #68]	; (8005ba0 <LTDC_MspInit+0x60>)
 8005b5a:	f043 0308 	orr.w	r3, r3, #8
 8005b5e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005b62:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <LTDC_MspInit+0x60>)
 8005b64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	68fb      	ldr	r3, [r7, #12]


    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 8005b70:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <LTDC_MspInit+0x60>)
 8005b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b76:	4a0a      	ldr	r2, [pc, #40]	; (8005ba0 <LTDC_MspInit+0x60>)
 8005b78:	f043 0308 	orr.w	r3, r3, #8
 8005b7c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8005b80:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <LTDC_MspInit+0x60>)
 8005b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b86:	4a06      	ldr	r2, [pc, #24]	; (8005ba0 <LTDC_MspInit+0x60>)
 8005b88:	f023 0308 	bic.w	r3, r3, #8
 8005b8c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 8005b90:	bf00      	nop
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	50001000 	.word	0x50001000
 8005ba0:	58024400 	.word	0x58024400

08005ba4 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a11      	ldr	r2, [pc, #68]	; (8005bf8 <DMA2D_MspInit+0x54>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d11a      	bne.n	8005bec <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005bb6:	4b11      	ldr	r3, [pc, #68]	; (8005bfc <DMA2D_MspInit+0x58>)
 8005bb8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005bbc:	4a0f      	ldr	r2, [pc, #60]	; (8005bfc <DMA2D_MspInit+0x58>)
 8005bbe:	f043 0310 	orr.w	r3, r3, #16
 8005bc2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	; (8005bfc <DMA2D_MspInit+0x58>)
 8005bc8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005bcc:	f003 0310 	and.w	r3, r3, #16
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8005bd4:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <DMA2D_MspInit+0x58>)
 8005bd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bd8:	4a08      	ldr	r2, [pc, #32]	; (8005bfc <DMA2D_MspInit+0x58>)
 8005bda:	f043 0310 	orr.w	r3, r3, #16
 8005bde:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8005be0:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <DMA2D_MspInit+0x58>)
 8005be2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005be4:	4a05      	ldr	r2, [pc, #20]	; (8005bfc <DMA2D_MspInit+0x58>)
 8005be6:	f023 0310 	bic.w	r3, r3, #16
 8005bea:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 8005bec:	bf00      	nop
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	52001000 	.word	0x52001000
 8005bfc:	58024400 	.word	0x58024400

08005c00 <DSI_MspInit>:
  * @brief  Initialize the BSP DSI Msp.
  * @param  hdsi  DSI handle
  * @retval None
  */
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance == DSI)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c10:	d11e      	bne.n	8005c50 <DSI_MspInit+0x50>
  {
    /** Enable DSI Host and wrapper clocks */
    __HAL_RCC_DSI_CLK_ENABLE();
 8005c12:	4b12      	ldr	r3, [pc, #72]	; (8005c5c <DSI_MspInit+0x5c>)
 8005c14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005c18:	4a10      	ldr	r2, [pc, #64]	; (8005c5c <DSI_MspInit+0x5c>)
 8005c1a:	f043 0310 	orr.w	r3, r3, #16
 8005c1e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005c22:	4b0e      	ldr	r3, [pc, #56]	; (8005c5c <DSI_MspInit+0x5c>)
 8005c24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	68fb      	ldr	r3, [r7, #12]

    /** Soft Reset the DSI Host and wrapper */
    __HAL_RCC_DSI_FORCE_RESET();
 8005c30:	4b0a      	ldr	r3, [pc, #40]	; (8005c5c <DSI_MspInit+0x5c>)
 8005c32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c36:	4a09      	ldr	r2, [pc, #36]	; (8005c5c <DSI_MspInit+0x5c>)
 8005c38:	f043 0310 	orr.w	r3, r3, #16
 8005c3c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 8005c40:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <DSI_MspInit+0x5c>)
 8005c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c46:	4a05      	ldr	r2, [pc, #20]	; (8005c5c <DSI_MspInit+0x5c>)
 8005c48:	f023 0310 	bic.w	r3, r3, #16
 8005c4c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 8005c50:	bf00      	nop
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	58024400 	.word	0x58024400

08005c60 <DSI_IO_Write>:
  * @param  pData pointer to a buffer of data to be write
  * @param  Size To precise command to be used (short or long)
  * @retval BSP status
  */
static int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af02      	add	r7, sp, #8
 8005c66:	60ba      	str	r2, [r7, #8]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	81fb      	strh	r3, [r7, #14]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	81bb      	strh	r3, [r7, #12]
 8005c72:	4613      	mov	r3, r2
 8005c74:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005c76:	2300      	movs	r3, #0
 8005c78:	617b      	str	r3, [r7, #20]

  if(Size <= 1U)
 8005c7a:	88fb      	ldrh	r3, [r7, #6]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d812      	bhi.n	8005ca6 <DSI_IO_Write+0x46>
  {
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8005c80:	89f9      	ldrh	r1, [r7, #14]
 8005c82:	89b8      	ldrh	r0, [r7, #12]
 8005c84:	88fb      	ldrh	r3, [r7, #6]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	4413      	add	r3, r2
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2215      	movs	r2, #21
 8005c92:	4810      	ldr	r0, [pc, #64]	; (8005cd4 <DSI_IO_Write+0x74>)
 8005c94:	f002 fa9c 	bl	80081d0 <HAL_DSI_ShortWrite>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d014      	beq.n	8005cc8 <DSI_IO_Write+0x68>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8005c9e:	f06f 0307 	mvn.w	r3, #7
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	e010      	b.n	8005cc8 <DSI_IO_Write+0x68>
    }
  }
  else
  {
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8005ca6:	89f9      	ldrh	r1, [r7, #14]
 8005ca8:	88f8      	ldrh	r0, [r7, #6]
 8005caa:	89bb      	ldrh	r3, [r7, #12]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	9201      	str	r2, [sp, #4]
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2239      	movs	r2, #57	; 0x39
 8005cb6:	4807      	ldr	r0, [pc, #28]	; (8005cd4 <DSI_IO_Write+0x74>)
 8005cb8:	f002 faac 	bl	8008214 <HAL_DSI_LongWrite>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <DSI_IO_Write+0x68>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8005cc2:	f06f 0307 	mvn.w	r3, #7
 8005cc6:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005cc8:	697b      	ldr	r3, [r7, #20]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	2400186c 	.word	0x2400186c

08005cd8 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08a      	sub	sp, #40	; 0x28
 8005cdc:	af04      	add	r7, sp, #16
 8005cde:	60ba      	str	r2, [r7, #8]
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	81fb      	strh	r3, [r7, #14]
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	81bb      	strh	r3, [r7, #12]
 8005cea:	4613      	mov	r3, r2
 8005cec:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	617b      	str	r3, [r7, #20]

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8005cf2:	89f9      	ldrh	r1, [r7, #14]
 8005cf4:	88f8      	ldrh	r0, [r7, #6]
 8005cf6:	89bb      	ldrh	r3, [r7, #12]
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	9202      	str	r2, [sp, #8]
 8005cfc:	9301      	str	r3, [sp, #4]
 8005cfe:	2306      	movs	r3, #6
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	4603      	mov	r3, r0
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	4807      	ldr	r0, [pc, #28]	; (8005d24 <DSI_IO_Read+0x4c>)
 8005d08:	f002 fb1c 	bl	8008344 <HAL_DSI_Read>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <DSI_IO_Read+0x40>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8005d12:	f06f 0307 	mvn.w	r3, #7
 8005d16:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8005d18:	697b      	ldr	r3, [r7, #20]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	2400186c 	.word	0x2400186c

08005d28 <OTM8009A_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OTM8009A_Probe(uint32_t ColorCoding, uint32_t Orientation)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t id;
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
 8005d32:	2300      	movs	r3, #0
 8005d34:	813b      	strh	r3, [r7, #8]
  IOCtx.GetTick     = BSP_GetTick;
 8005d36:	4b1f      	ldr	r3, [pc, #124]	; (8005db4 <OTM8009A_Probe+0x8c>)
 8005d38:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = DSI_IO_Write;
 8005d3a:	4b1f      	ldr	r3, [pc, #124]	; (8005db8 <OTM8009A_Probe+0x90>)
 8005d3c:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg     = DSI_IO_Read;
 8005d3e:	4b1f      	ldr	r3, [pc, #124]	; (8005dbc <OTM8009A_Probe+0x94>)
 8005d40:	613b      	str	r3, [r7, #16]

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005d42:	f107 0308 	add.w	r3, r7, #8
 8005d46:	4619      	mov	r1, r3
 8005d48:	481d      	ldr	r0, [pc, #116]	; (8005dc0 <OTM8009A_Probe+0x98>)
 8005d4a:	f7fd fa05 	bl	8003158 <OTM8009A_RegisterBusIO>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <OTM8009A_Probe+0x34>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8005d54:	f06f 0307 	mvn.w	r3, #7
 8005d58:	61fb      	str	r3, [r7, #28]
 8005d5a:	e025      	b.n	8005da8 <OTM8009A_Probe+0x80>
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 8005d5c:	4b19      	ldr	r3, [pc, #100]	; (8005dc4 <OTM8009A_Probe+0x9c>)
 8005d5e:	4a18      	ldr	r2, [pc, #96]	; (8005dc0 <OTM8009A_Probe+0x98>)
 8005d60:	601a      	str	r2, [r3, #0]

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8005d62:	4b18      	ldr	r3, [pc, #96]	; (8005dc4 <OTM8009A_Probe+0x9c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f107 0218 	add.w	r2, r7, #24
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fd fff7 	bl	8003d60 <OTM8009A_ReadID>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d003      	beq.n	8005d80 <OTM8009A_Probe+0x58>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d78:	f06f 0304 	mvn.w	r3, #4
 8005d7c:	61fb      	str	r3, [r7, #28]
 8005d7e:	e013      	b.n	8005da8 <OTM8009A_Probe+0x80>
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8005d80:	4b11      	ldr	r3, [pc, #68]	; (8005dc8 <OTM8009A_Probe+0xa0>)
 8005d82:	4a12      	ldr	r2, [pc, #72]	; (8005dcc <OTM8009A_Probe+0xa4>)
 8005d84:	601a      	str	r2, [r3, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8005d86:	4b10      	ldr	r3, [pc, #64]	; (8005dc8 <OTM8009A_Probe+0xa0>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a0d      	ldr	r2, [pc, #52]	; (8005dc4 <OTM8009A_Probe+0x9c>)
 8005d8e:	6810      	ldr	r0, [r2, #0]
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	4798      	blx	r3
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <OTM8009A_Probe+0x7c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d9c:	f06f 0304 	mvn.w	r3, #4
 8005da0:	61fb      	str	r3, [r7, #28]
 8005da2:	e001      	b.n	8005da8 <OTM8009A_Probe+0x80>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005da4:	2300      	movs	r3, #0
 8005da6:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  return ret;
 8005da8:	69fb      	ldr	r3, [r7, #28]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3720      	adds	r7, #32
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	080045cd 	.word	0x080045cd
 8005db8:	08005c61 	.word	0x08005c61
 8005dbc:	08005cd9 	.word	0x08005cd9
 8005dc0:	240019b4 	.word	0x240019b4
 8005dc4:	24001868 	.word	0x24001868
 8005dc8:	24001864 	.word	0x24001864
 8005dcc:	24000038 	.word	0x24000038

08005dd0 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b090      	sub	sp, #64	; 0x40
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d003      	beq.n	8005dec <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005de4:	f06f 0301 	mvn.w	r3, #1
 8005de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dea:	e090      	b.n	8005f0e <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8005dec:	494a      	ldr	r1, [pc, #296]	; (8005f18 <BSP_QSPI_Init+0x148>)
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	4613      	mov	r3, r2
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	4413      	add	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	440b      	add	r3, r1
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f040 8086 	bne.w	8005f0e <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 8005e02:	4846      	ldr	r0, [pc, #280]	; (8005f1c <BSP_QSPI_Init+0x14c>)
 8005e04:	f000 faf6 	bl	80063f4 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 8005e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d17f      	bne.n	8005f0e <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8005e0e:	f107 031c 	add.w	r3, r7, #28
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fc fd1b 	bl	800284e <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	4b40      	ldr	r3, [pc, #256]	; (8005f20 <BSP_QSPI_Init+0x150>)
 8005e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e24:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8005e26:	2340      	movs	r3, #64	; 0x40
 8005e28:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e30:	fa93 f3a3 	rbit	r3, r3
 8005e34:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	63bb      	str	r3, [r7, #56]	; 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 8005e40:	2320      	movs	r3, #32
 8005e42:	e003      	b.n	8005e4c <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 8005e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e46:	fab3 f383 	clz	r3, r3
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	785b      	ldrb	r3, [r3, #1]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <BSP_QSPI_Init+0x8c>
 8005e58:	2310      	movs	r3, #16
 8005e5a:	e000      	b.n	8005e5e <BSP_QSPI_Init+0x8e>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005e60:	f107 030c 	add.w	r3, r7, #12
 8005e64:	4619      	mov	r1, r3
 8005e66:	482d      	ldr	r0, [pc, #180]	; (8005f1c <BSP_QSPI_Init+0x14c>)
 8005e68:	f000 f85c 	bl	8005f24 <MX_QSPI_Init>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005e72:	f06f 0303 	mvn.w	r3, #3
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e78:	e049      	b.n	8005f0e <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fc02 	bl	8006684 <QSPI_ResetMemory>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e86:	f06f 0304 	mvn.w	r3, #4
 8005e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e8c:	e03f      	b.n	8005f0e <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005e8e:	4922      	ldr	r1, [pc, #136]	; (8005f18 <BSP_QSPI_Init+0x148>)
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	4613      	mov	r3, r2
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	481e      	ldr	r0, [pc, #120]	; (8005f1c <BSP_QSPI_Init+0x14c>)
 8005ea4:	f7fc fd42 	bl	800292c <MT25TL01G_AutoPollingMemReady>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8005eae:	f06f 0304 	mvn.w	r3, #4
 8005eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eb4:	e02b      	b.n	8005f0e <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005eb6:	4918      	ldr	r1, [pc, #96]	; (8005f18 <BSP_QSPI_Init+0x148>)
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	440b      	add	r3, r1
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4814      	ldr	r0, [pc, #80]	; (8005f1c <BSP_QSPI_Init+0x14c>)
 8005ecc:	f7fc fce6 	bl	800289c <MT25TL01G_Enter4BytesAddressMode>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ed6:	f06f 0304 	mvn.w	r3, #4
 8005eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005edc:	e017      	b.n	8005f0e <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fc3c 	bl	800675c <QSPI_DummyCyclesCfg>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8005eea:	f06f 0304 	mvn.w	r3, #4
 8005eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef0:	e00d      	b.n	8005f0e <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	7819      	ldrb	r1, [r3, #0]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	785b      	ldrb	r3, [r3, #1]
 8005efa:	461a      	mov	r2, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f9f7 	bl	80062f0 <BSP_QSPI_ConfigFlash>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f08:	f06f 0304 	mvn.w	r3, #4
 8005f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 8005f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3740      	adds	r7, #64	; 0x40
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	24001a20 	.word	0x24001a20
 8005f1c:	240019d4 	.word	0x240019d4
 8005f20:	08013234 	.word	0x08013234

08005f24 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a13      	ldr	r2, [pc, #76]	; (8005f80 <MX_QSPI_Init+0x5c>)
 8005f32:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	689a      	ldr	r2, [r3, #8]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005f58:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f004 f8a6 	bl	800a0c0 <HAL_QSPI_Init>
 8005f74:	4603      	mov	r3, r0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	52005000 	.word	0x52005000

08005f84 <BSP_QSPI_Read>:
  * @param  ReadAddr  Read start address
  * @param  Size      Size of data to read
  * @retval BSP status
  */
int32_t BSP_QSPI_Read(uint32_t Instance, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d003      	beq.n	8005fa4 <BSP_QSPI_Read+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005f9c:	f06f 0301 	mvn.w	r3, #1
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	e037      	b.n	8006014 <BSP_QSPI_Read+0x90>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8005fa4:	491e      	ldr	r1, [pc, #120]	; (8006020 <BSP_QSPI_Read+0x9c>)
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	005b      	lsls	r3, r3, #1
 8005fac:	4413      	add	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	440b      	add	r3, r1
 8005fb2:	3302      	adds	r3, #2
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d116      	bne.n	8005fe8 <BSP_QSPI_Read+0x64>
    {
      if(MT25TL01G_ReadSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode, pData, ReadAddr, Size) != MT25TL01G_OK)
 8005fba:	4919      	ldr	r1, [pc, #100]	; (8006020 <BSP_QSPI_Read+0x9c>)
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	440b      	add	r3, r1
 8005fc8:	3301      	adds	r3, #1
 8005fca:	7819      	ldrb	r1, [r3, #0]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	4813      	ldr	r0, [pc, #76]	; (8006024 <BSP_QSPI_Read+0xa0>)
 8005fd6:	f7fc fe2f 	bl	8002c38 <MT25TL01G_ReadSTR>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d019      	beq.n	8006014 <BSP_QSPI_Read+0x90>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fe0:	f06f 0304 	mvn.w	r3, #4
 8005fe4:	617b      	str	r3, [r7, #20]
 8005fe6:	e015      	b.n	8006014 <BSP_QSPI_Read+0x90>
      }
    }
    else
    {
      if(MT25TL01G_ReadDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode, pData, ReadAddr, Size) != MT25TL01G_OK)
 8005fe8:	490d      	ldr	r1, [pc, #52]	; (8006020 <BSP_QSPI_Read+0x9c>)
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4613      	mov	r3, r2
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	7819      	ldrb	r1, [r3, #0]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	4808      	ldr	r0, [pc, #32]	; (8006024 <BSP_QSPI_Read+0xa0>)
 8006004:	f7fc fda0 	bl	8002b48 <MT25TL01G_ReadDTR>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <BSP_QSPI_Read+0x90>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800600e:	f06f 0304 	mvn.w	r3, #4
 8006012:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006014:	697b      	ldr	r3, [r7, #20]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	24001a20 	.word	0x24001a20
 8006024:	240019d4 	.word	0x240019d4

08006028 <BSP_QSPI_Write>:
  * @param  WriteAddr  Write start address
  * @param  Size       Size of data to write
  * @retval BSP status
  */
int32_t BSP_QSPI_Write(uint32_t Instance, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b08c      	sub	sp, #48	; 0x30
 800602c:	af02      	add	r7, sp, #8
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006036:	2300      	movs	r3, #0
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t end_addr, current_size, current_addr;
  uint8_t *write_data;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <BSP_QSPI_Write+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006040:	f06f 0301 	mvn.w	r3, #1
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
 8006046:	e081      	b.n	800614c <BSP_QSPI_Write+0x124>
  }
  else
  {
    /* Calculation of the size between the write address and the end of the page */
    current_size = MT25TL01G_PAGE_SIZE - (WriteAddr % MT25TL01G_PAGE_SIZE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	b2db      	uxtb	r3, r3
 800604c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006050:	623b      	str	r3, [r7, #32]

    /* Check if the size of the data is less than the remaining place in the page */
    if (current_size > Size)
 8006052:	6a3a      	ldr	r2, [r7, #32]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	429a      	cmp	r2, r3
 8006058:	d901      	bls.n	800605e <BSP_QSPI_Write+0x36>
    {
      current_size = Size;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	623b      	str	r3, [r7, #32]
    }

    /* Initialize the address variables */
    current_addr = WriteAddr;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	61fb      	str	r3, [r7, #28]
    end_addr = WriteAddr + Size;
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	4413      	add	r3, r2
 8006068:	617b      	str	r3, [r7, #20]
    write_data = pData;
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	61bb      	str	r3, [r7, #24]

    /* Perform the write page by page */
    do
    {
      /* Check if Flash busy ? */
      if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800606e:	493a      	ldr	r1, [pc, #232]	; (8006158 <BSP_QSPI_Write+0x130>)
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4613      	mov	r3, r2
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	4413      	add	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	440b      	add	r3, r1
 800607c:	3301      	adds	r3, #1
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	4619      	mov	r1, r3
 8006082:	4836      	ldr	r0, [pc, #216]	; (800615c <BSP_QSPI_Write+0x134>)
 8006084:	f7fc fc52 	bl	800292c <MT25TL01G_AutoPollingMemReady>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <BSP_QSPI_Write+0x6e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800608e:	f06f 0304 	mvn.w	r3, #4
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
 8006094:	e053      	b.n	800613e <BSP_QSPI_Write+0x116>
      }/* Enable write operations */
      else if(MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006096:	4930      	ldr	r1, [pc, #192]	; (8006158 <BSP_QSPI_Write+0x130>)
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4613      	mov	r3, r2
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	440b      	add	r3, r1
 80060a4:	3301      	adds	r3, #1
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	4619      	mov	r1, r3
 80060aa:	482c      	ldr	r0, [pc, #176]	; (800615c <BSP_QSPI_Write+0x134>)
 80060ac:	f7fc fc7a 	bl	80029a4 <MT25TL01G_WriteEnable>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <BSP_QSPI_Write+0x96>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80060b6:	f06f 0304 	mvn.w	r3, #4
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
 80060bc:	e03f      	b.n	800613e <BSP_QSPI_Write+0x116>
      }/* Issue page program command */
      else if(MT25TL01G_PageProgram(&hqspi, QSPI_Ctx[Instance].InterfaceMode, write_data, current_addr, current_size) != MT25TL01G_OK)
 80060be:	4926      	ldr	r1, [pc, #152]	; (8006158 <BSP_QSPI_Write+0x130>)
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4613      	mov	r3, r2
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	3301      	adds	r3, #1
 80060ce:	7819      	ldrb	r1, [r3, #0]
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	4820      	ldr	r0, [pc, #128]	; (800615c <BSP_QSPI_Write+0x134>)
 80060da:	f7fc fcbf 	bl	8002a5c <MT25TL01G_PageProgram>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <BSP_QSPI_Write+0xc4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80060e4:	f06f 0304 	mvn.w	r3, #4
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
 80060ea:	e028      	b.n	800613e <BSP_QSPI_Write+0x116>
      }/* Configure automatic polling mode to wait for end of program */
      else if (MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80060ec:	491a      	ldr	r1, [pc, #104]	; (8006158 <BSP_QSPI_Write+0x130>)
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4613      	mov	r3, r2
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	440b      	add	r3, r1
 80060fa:	3301      	adds	r3, #1
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	4619      	mov	r1, r3
 8006100:	4816      	ldr	r0, [pc, #88]	; (800615c <BSP_QSPI_Write+0x134>)
 8006102:	f7fc fc13 	bl	800292c <MT25TL01G_AutoPollingMemReady>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <BSP_QSPI_Write+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800610c:	f06f 0304 	mvn.w	r3, #4
 8006110:	627b      	str	r3, [r7, #36]	; 0x24
 8006112:	e014      	b.n	800613e <BSP_QSPI_Write+0x116>
      }
      else
      {
        /* Update the address and size variables for next page programming */
        current_addr += current_size;
 8006114:	69fa      	ldr	r2, [r7, #28]
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	4413      	add	r3, r2
 800611a:	61fb      	str	r3, [r7, #28]
        write_data += current_size;
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	4413      	add	r3, r2
 8006122:	61bb      	str	r3, [r7, #24]
        current_size = ((current_addr + MT25TL01G_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MT25TL01G_PAGE_SIZE;
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	429a      	cmp	r2, r3
 800612e:	d203      	bcs.n	8006138 <BSP_QSPI_Write+0x110>
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	e001      	b.n	800613c <BSP_QSPI_Write+0x114>
 8006138:	f44f 7380 	mov.w	r3, #256	; 0x100
 800613c:	623b      	str	r3, [r7, #32]
      }
    } while ((current_addr < end_addr) && (ret == BSP_ERROR_NONE));
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	429a      	cmp	r2, r3
 8006144:	d202      	bcs.n	800614c <BSP_QSPI_Write+0x124>
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	2b00      	cmp	r3, #0
 800614a:	d090      	beq.n	800606e <BSP_QSPI_Write+0x46>
  }

  /* Return BSP status */
  return ret;
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800614e:	4618      	mov	r0, r3
 8006150:	3728      	adds	r7, #40	; 0x28
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	24001a20 	.word	0x24001a20
 800615c:	240019d4 	.word	0x240019d4

08006160 <BSP_QSPI_EraseBlock>:
  * @param  BlockAddress Block address to erase
  * @param  BlockSize    Erase Block size
  * @retval BSP status
  */
int32_t BSP_QSPI_EraseBlock(uint32_t Instance, uint32_t BlockAddress, BSP_QSPI_Erase_t BlockSize)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	4613      	mov	r3, r2
 800616c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800616e:	2300      	movs	r3, #0
 8006170:	617b      	str	r3, [r7, #20]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <BSP_QSPI_EraseBlock+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006178:	f06f 0301 	mvn.w	r3, #1
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	e03b      	b.n	80061f8 <BSP_QSPI_EraseBlock+0x98>
  }
  else
  {
    /* Check Flash busy ? */
    if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006180:	4920      	ldr	r1, [pc, #128]	; (8006204 <BSP_QSPI_EraseBlock+0xa4>)
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	4613      	mov	r3, r2
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	3301      	adds	r3, #1
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	4619      	mov	r1, r3
 8006194:	481c      	ldr	r0, [pc, #112]	; (8006208 <BSP_QSPI_EraseBlock+0xa8>)
 8006196:	f7fc fbc9 	bl	800292c <MT25TL01G_AutoPollingMemReady>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <BSP_QSPI_EraseBlock+0x48>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80061a0:	f06f 0304 	mvn.w	r3, #4
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	e027      	b.n	80061f8 <BSP_QSPI_EraseBlock+0x98>
    }/* Enable write operations */
    else if(MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80061a8:	4916      	ldr	r1, [pc, #88]	; (8006204 <BSP_QSPI_EraseBlock+0xa4>)
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4613      	mov	r3, r2
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	4413      	add	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	3301      	adds	r3, #1
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	4619      	mov	r1, r3
 80061bc:	4812      	ldr	r0, [pc, #72]	; (8006208 <BSP_QSPI_EraseBlock+0xa8>)
 80061be:	f7fc fbf1 	bl	80029a4 <MT25TL01G_WriteEnable>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <BSP_QSPI_EraseBlock+0x70>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80061c8:	f06f 0304 	mvn.w	r3, #4
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	e013      	b.n	80061f8 <BSP_QSPI_EraseBlock+0x98>
    }
    else
    {
      /* Issue Block Erase command */
      if(MT25TL01G_BlockErase(&hqspi, QSPI_Ctx[Instance].InterfaceMode, BlockAddress, (MT25TL01G_Erase_t)BlockSize) != MT25TL01G_OK)
 80061d0:	490c      	ldr	r1, [pc, #48]	; (8006204 <BSP_QSPI_EraseBlock+0xa4>)
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	4613      	mov	r3, r2
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	4413      	add	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	440b      	add	r3, r1
 80061de:	3301      	adds	r3, #1
 80061e0:	7819      	ldrb	r1, [r3, #0]
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	4808      	ldr	r0, [pc, #32]	; (8006208 <BSP_QSPI_EraseBlock+0xa8>)
 80061e8:	f7fc fd9c 	bl	8002d24 <MT25TL01G_BlockErase>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <BSP_QSPI_EraseBlock+0x98>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80061f2:	f06f 0304 	mvn.w	r3, #4
 80061f6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80061f8:	697b      	ldr	r3, [r7, #20]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	24001a20 	.word	0x24001a20
 8006208:	240019d4 	.word	0x240019d4

0800620c <BSP_QSPI_GetInfo>:
  * @param  Instance  QSPI instance
  * @param  pInfo     pointer on the configuration structure
  * @retval BSP status
  */
int32_t BSP_QSPI_GetInfo(uint32_t Instance, BSP_QSPI_Info_t *pInfo)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006216:	2300      	movs	r3, #0
 8006218:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <BSP_QSPI_GetInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006220:	f06f 0301 	mvn.w	r3, #1
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	e002      	b.n	800622e <BSP_QSPI_GetInfo+0x22>
  }
  else
  {
    (void)MT25TL01G_GetFlashInfo(pInfo);
 8006228:	6838      	ldr	r0, [r7, #0]
 800622a:	f7fc fb10 	bl	800284e <MT25TL01G_GetFlashInfo>
  }

  /* Return BSP status */
  return ret;
 800622e:	68fb      	ldr	r3, [r7, #12]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006240:	2300      	movs	r3, #0
 8006242:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800624a:	f06f 0301 	mvn.w	r3, #1
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	e045      	b.n	80062de <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8006252:	4925      	ldr	r1, [pc, #148]	; (80062e8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	4613      	mov	r3, r2
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	440b      	add	r3, r1
 8006260:	3302      	adds	r3, #2
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d11d      	bne.n	80062a4 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006268:	491f      	ldr	r1, [pc, #124]	; (80062e8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	4613      	mov	r3, r2
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	4413      	add	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	440b      	add	r3, r1
 8006276:	3301      	adds	r3, #1
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	4619      	mov	r1, r3
 800627c:	481b      	ldr	r0, [pc, #108]	; (80062ec <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800627e:	f7fc fe9f 	bl	8002fc0 <MT25TL01G_EnableMemoryMappedModeSTR>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006288:	f06f 0304 	mvn.w	r3, #4
 800628c:	60fb      	str	r3, [r7, #12]
 800628e:	e026      	b.n	80062de <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8006290:	4915      	ldr	r1, [pc, #84]	; (80062e8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	4613      	mov	r3, r2
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	4413      	add	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	2202      	movs	r2, #2
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	e01c      	b.n	80062de <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80062a4:	4910      	ldr	r1, [pc, #64]	; (80062e8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	3301      	adds	r3, #1
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	4619      	mov	r1, r3
 80062b8:	480c      	ldr	r0, [pc, #48]	; (80062ec <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 80062ba:	f7fc fe17 	bl	8002eec <MT25TL01G_EnableMemoryMappedModeDTR>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d003      	beq.n	80062cc <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80062c4:	f06f 0304 	mvn.w	r3, #4
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	e008      	b.n	80062de <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 80062cc:	4906      	ldr	r1, [pc, #24]	; (80062e8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	4613      	mov	r3, r2
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	4413      	add	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	2202      	movs	r2, #2
 80062dc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80062de:	68fb      	ldr	r3, [r7, #12]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	24001a20 	.word	0x24001a20
 80062ec:	240019d4 	.word	0x240019d4

080062f0 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	70fb      	strb	r3, [r7, #3]
 80062fc:	4613      	mov	r3, r2
 80062fe:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8006300:	2300      	movs	r3, #0
 8006302:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800630a:	f06f 0301 	mvn.w	r3, #1
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	e067      	b.n	80063e2 <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8006312:	4936      	ldr	r1, [pc, #216]	; (80063ec <BSP_QSPI_ConfigFlash+0xfc>)
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	4613      	mov	r3, r2
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d103      	bne.n	800632e <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8006326:	f06f 0319 	mvn.w	r3, #25
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	e059      	b.n	80063e2 <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800632e:	78bb      	ldrb	r3, [r7, #2]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <BSP_QSPI_ConfigFlash+0x48>
 8006334:	2310      	movs	r3, #16
 8006336:	e000      	b.n	800633a <BSP_QSPI_ConfigFlash+0x4a>
 8006338:	2300      	movs	r3, #0
 800633a:	4a2d      	ldr	r2, [pc, #180]	; (80063f0 <BSP_QSPI_ConfigFlash+0x100>)
 800633c:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800633e:	482c      	ldr	r0, [pc, #176]	; (80063f0 <BSP_QSPI_ConfigFlash+0x100>)
 8006340:	f003 febe 	bl	800a0c0 <HAL_QSPI_Init>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800634a:	f06f 0303 	mvn.w	r3, #3
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	e047      	b.n	80063e2 <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8006352:	4926      	ldr	r1, [pc, #152]	; (80063ec <BSP_QSPI_ConfigFlash+0xfc>)
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	4613      	mov	r3, r2
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	4413      	add	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	440b      	add	r3, r1
 8006360:	3301      	adds	r3, #1
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2b03      	cmp	r3, #3
 8006366:	d10c      	bne.n	8006382 <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	2b03      	cmp	r3, #3
 800636c:	d016      	beq.n	800639c <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800636e:	4820      	ldr	r0, [pc, #128]	; (80063f0 <BSP_QSPI_ConfigFlash+0x100>)
 8006370:	f7fc fd91 	bl	8002e96 <MT25TL01G_ExitQPIMode>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d010      	beq.n	800639c <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800637a:	f06f 0304 	mvn.w	r3, #4
 800637e:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8006380:	e00c      	b.n	800639c <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 8006382:	78fb      	ldrb	r3, [r7, #3]
 8006384:	2b03      	cmp	r3, #3
 8006386:	d10b      	bne.n	80063a0 <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8006388:	4819      	ldr	r0, [pc, #100]	; (80063f0 <BSP_QSPI_ConfigFlash+0x100>)
 800638a:	f7fc fd5a 	bl	8002e42 <MT25TL01G_EnterQPIMode>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8006394:	f06f 0304 	mvn.w	r3, #4
 8006398:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800639a:	e001      	b.n	80063a0 <BSP_QSPI_ConfigFlash+0xb0>
          break;
 800639c:	bf00      	nop
 800639e:	e000      	b.n	80063a2 <BSP_QSPI_ConfigFlash+0xb2>
          break;
 80063a0:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d11c      	bne.n	80063e2 <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80063a8:	4910      	ldr	r1, [pc, #64]	; (80063ec <BSP_QSPI_ConfigFlash+0xfc>)
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	4613      	mov	r3, r2
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	4413      	add	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	440b      	add	r3, r1
 80063b6:	2201      	movs	r2, #1
 80063b8:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 80063ba:	490c      	ldr	r1, [pc, #48]	; (80063ec <BSP_QSPI_ConfigFlash+0xfc>)
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	4613      	mov	r3, r2
 80063c0:	005b      	lsls	r3, r3, #1
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	440b      	add	r3, r1
 80063c8:	3301      	adds	r3, #1
 80063ca:	78fa      	ldrb	r2, [r7, #3]
 80063cc:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80063ce:	4907      	ldr	r1, [pc, #28]	; (80063ec <BSP_QSPI_ConfigFlash+0xfc>)
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	4613      	mov	r3, r2
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	4413      	add	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	440b      	add	r3, r1
 80063dc:	3302      	adds	r3, #2
 80063de:	78ba      	ldrb	r2, [r7, #2]
 80063e0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80063e2:	68fb      	ldr	r3, [r7, #12]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	24001a20 	.word	0x24001a20
 80063f0:	240019d4 	.word	0x240019d4

080063f4 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b094      	sub	sp, #80	; 0x50
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 80063fc:	4b9b      	ldr	r3, [pc, #620]	; (800666c <QSPI_MspInit+0x278>)
 80063fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006402:	4a9a      	ldr	r2, [pc, #616]	; (800666c <QSPI_MspInit+0x278>)
 8006404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006408:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800640c:	4b97      	ldr	r3, [pc, #604]	; (800666c <QSPI_MspInit+0x278>)
 800640e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006416:	63bb      	str	r3, [r7, #56]	; 0x38
 8006418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 800641a:	4b94      	ldr	r3, [pc, #592]	; (800666c <QSPI_MspInit+0x278>)
 800641c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800641e:	4a93      	ldr	r2, [pc, #588]	; (800666c <QSPI_MspInit+0x278>)
 8006420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006424:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 8006426:	4b91      	ldr	r3, [pc, #580]	; (800666c <QSPI_MspInit+0x278>)
 8006428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800642a:	4a90      	ldr	r2, [pc, #576]	; (800666c <QSPI_MspInit+0x278>)
 800642c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006430:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 8006432:	4b8e      	ldr	r3, [pc, #568]	; (800666c <QSPI_MspInit+0x278>)
 8006434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006438:	4a8c      	ldr	r2, [pc, #560]	; (800666c <QSPI_MspInit+0x278>)
 800643a:	f043 0302 	orr.w	r3, r3, #2
 800643e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006442:	4b8a      	ldr	r3, [pc, #552]	; (800666c <QSPI_MspInit+0x278>)
 8006444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	637b      	str	r3, [r7, #52]	; 0x34
 800644e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8006450:	4b86      	ldr	r3, [pc, #536]	; (800666c <QSPI_MspInit+0x278>)
 8006452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006456:	4a85      	ldr	r2, [pc, #532]	; (800666c <QSPI_MspInit+0x278>)
 8006458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800645c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006460:	4b82      	ldr	r3, [pc, #520]	; (800666c <QSPI_MspInit+0x278>)
 8006462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646a:	633b      	str	r3, [r7, #48]	; 0x30
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800646e:	4b7f      	ldr	r3, [pc, #508]	; (800666c <QSPI_MspInit+0x278>)
 8006470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006474:	4a7d      	ldr	r2, [pc, #500]	; (800666c <QSPI_MspInit+0x278>)
 8006476:	f043 0308 	orr.w	r3, r3, #8
 800647a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800647e:	4b7b      	ldr	r3, [pc, #492]	; (800666c <QSPI_MspInit+0x278>)
 8006480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006484:	f003 0308 	and.w	r3, r3, #8
 8006488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800648c:	4b77      	ldr	r3, [pc, #476]	; (800666c <QSPI_MspInit+0x278>)
 800648e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006492:	4a76      	ldr	r2, [pc, #472]	; (800666c <QSPI_MspInit+0x278>)
 8006494:	f043 0320 	orr.w	r3, r3, #32
 8006498:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800649c:	4b73      	ldr	r3, [pc, #460]	; (800666c <QSPI_MspInit+0x278>)
 800649e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 80064aa:	4b70      	ldr	r3, [pc, #448]	; (800666c <QSPI_MspInit+0x278>)
 80064ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064b0:	4a6e      	ldr	r2, [pc, #440]	; (800666c <QSPI_MspInit+0x278>)
 80064b2:	f043 0320 	orr.w	r3, r3, #32
 80064b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80064ba:	4b6c      	ldr	r3, [pc, #432]	; (800666c <QSPI_MspInit+0x278>)
 80064bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064c0:	f003 0320 	and.w	r3, r3, #32
 80064c4:	627b      	str	r3, [r7, #36]	; 0x24
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 80064c8:	4b68      	ldr	r3, [pc, #416]	; (800666c <QSPI_MspInit+0x278>)
 80064ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064ce:	4a67      	ldr	r2, [pc, #412]	; (800666c <QSPI_MspInit+0x278>)
 80064d0:	f043 0320 	orr.w	r3, r3, #32
 80064d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80064d8:	4b64      	ldr	r3, [pc, #400]	; (800666c <QSPI_MspInit+0x278>)
 80064da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064de:	f003 0320 	and.w	r3, r3, #32
 80064e2:	623b      	str	r3, [r7, #32]
 80064e4:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 80064e6:	4b61      	ldr	r3, [pc, #388]	; (800666c <QSPI_MspInit+0x278>)
 80064e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064ec:	4a5f      	ldr	r2, [pc, #380]	; (800666c <QSPI_MspInit+0x278>)
 80064ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80064f6:	4b5d      	ldr	r3, [pc, #372]	; (800666c <QSPI_MspInit+0x278>)
 80064f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006500:	61fb      	str	r3, [r7, #28]
 8006502:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8006504:	4b59      	ldr	r3, [pc, #356]	; (800666c <QSPI_MspInit+0x278>)
 8006506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800650a:	4a58      	ldr	r2, [pc, #352]	; (800666c <QSPI_MspInit+0x278>)
 800650c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006510:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006514:	4b55      	ldr	r3, [pc, #340]	; (800666c <QSPI_MspInit+0x278>)
 8006516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800651a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800651e:	61bb      	str	r3, [r7, #24]
 8006520:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8006522:	4b52      	ldr	r3, [pc, #328]	; (800666c <QSPI_MspInit+0x278>)
 8006524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006528:	4a50      	ldr	r2, [pc, #320]	; (800666c <QSPI_MspInit+0x278>)
 800652a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800652e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006532:	4b4e      	ldr	r3, [pc, #312]	; (800666c <QSPI_MspInit+0x278>)
 8006534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653c:	617b      	str	r3, [r7, #20]
 800653e:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8006540:	4b4a      	ldr	r3, [pc, #296]	; (800666c <QSPI_MspInit+0x278>)
 8006542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006546:	4a49      	ldr	r2, [pc, #292]	; (800666c <QSPI_MspInit+0x278>)
 8006548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800654c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006550:	4b46      	ldr	r3, [pc, #280]	; (800666c <QSPI_MspInit+0x278>)
 8006552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	613b      	str	r3, [r7, #16]
 800655c:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800655e:	4b43      	ldr	r3, [pc, #268]	; (800666c <QSPI_MspInit+0x278>)
 8006560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006564:	4a41      	ldr	r2, [pc, #260]	; (800666c <QSPI_MspInit+0x278>)
 8006566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800656a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800656e:	4b3f      	ldr	r3, [pc, #252]	; (800666c <QSPI_MspInit+0x278>)
 8006570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800657c:	2304      	movs	r3, #4
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006580:	2302      	movs	r3, #2
 8006582:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006584:	2303      	movs	r3, #3
 8006586:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006588:	2300      	movs	r3, #0
 800658a:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800658c:	2309      	movs	r3, #9
 800658e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8006590:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006594:	4619      	mov	r1, r3
 8006596:	4836      	ldr	r0, [pc, #216]	; (8006670 <QSPI_MspInit+0x27c>)
 8006598:	f001 ffcc 	bl	8008534 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800659c:	2340      	movs	r3, #64	; 0x40
 800659e:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80065a0:	2301      	movs	r3, #1
 80065a2:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80065a4:	230a      	movs	r3, #10
 80065a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80065a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065ac:	4619      	mov	r1, r3
 80065ae:	4831      	ldr	r0, [pc, #196]	; (8006674 <QSPI_MspInit+0x280>)
 80065b0:	f001 ffc0 	bl	8008534 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80065b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80065be:	2309      	movs	r3, #9
 80065c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80065c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065c6:	4619      	mov	r1, r3
 80065c8:	482b      	ldr	r0, [pc, #172]	; (8006678 <QSPI_MspInit+0x284>)
 80065ca:	f001 ffb3 	bl	8008534 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 80065ce:	2304      	movs	r3, #4
 80065d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80065d2:	2309      	movs	r3, #9
 80065d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80065d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065da:	4619      	mov	r1, r3
 80065dc:	4827      	ldr	r0, [pc, #156]	; (800667c <QSPI_MspInit+0x288>)
 80065de:	f001 ffa9 	bl	8008534 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80065e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80065e8:	230a      	movs	r3, #10
 80065ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80065ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065f0:	4619      	mov	r1, r3
 80065f2:	4823      	ldr	r0, [pc, #140]	; (8006680 <QSPI_MspInit+0x28c>)
 80065f4:	f001 ff9e 	bl	8008534 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80065f8:	2308      	movs	r3, #8
 80065fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80065fc:	2309      	movs	r3, #9
 80065fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8006600:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006604:	4619      	mov	r1, r3
 8006606:	481d      	ldr	r0, [pc, #116]	; (800667c <QSPI_MspInit+0x288>)
 8006608:	f001 ff94 	bl	8008534 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800660c:	2380      	movs	r3, #128	; 0x80
 800660e:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006610:	2309      	movs	r3, #9
 8006612:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8006614:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006618:	4619      	mov	r1, r3
 800661a:	4819      	ldr	r0, [pc, #100]	; (8006680 <QSPI_MspInit+0x28c>)
 800661c:	f001 ff8a 	bl	8008534 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8006620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006624:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8006626:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800662a:	4619      	mov	r1, r3
 800662c:	4811      	ldr	r0, [pc, #68]	; (8006674 <QSPI_MspInit+0x280>)
 800662e:	f001 ff81 	bl	8008534 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8006632:	2340      	movs	r3, #64	; 0x40
 8006634:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8006636:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800663a:	4619      	mov	r1, r3
 800663c:	4810      	ldr	r0, [pc, #64]	; (8006680 <QSPI_MspInit+0x28c>)
 800663e:	f001 ff79 	bl	8008534 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8006642:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006646:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8006648:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800664c:	4619      	mov	r1, r3
 800664e:	4809      	ldr	r0, [pc, #36]	; (8006674 <QSPI_MspInit+0x280>)
 8006650:	f001 ff70 	bl	8008534 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8006654:	2200      	movs	r2, #0
 8006656:	210f      	movs	r1, #15
 8006658:	205c      	movs	r0, #92	; 0x5c
 800665a:	f000 fedc 	bl	8007416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800665e:	205c      	movs	r0, #92	; 0x5c
 8006660:	f000 fef3 	bl	800744a <HAL_NVIC_EnableIRQ>
}
 8006664:	bf00      	nop
 8006666:	3750      	adds	r7, #80	; 0x50
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	58024400 	.word	0x58024400
 8006670:	58020400 	.word	0x58020400
 8006674:	58021800 	.word	0x58021800
 8006678:	58020c00 	.word	0x58020c00
 800667c:	58021c00 	.word	0x58021c00
 8006680:	58021400 	.word	0x58021400

08006684 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800668c:	2300      	movs	r3, #0
 800668e:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8006690:	2103      	movs	r1, #3
 8006692:	4830      	ldr	r0, [pc, #192]	; (8006754 <QSPI_ResetMemory+0xd0>)
 8006694:	f7fc fcfc 	bl	8003090 <MT25TL01G_ResetEnable>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 800669e:	f06f 0304 	mvn.w	r3, #4
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	e051      	b.n	800674a <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80066a6:	2103      	movs	r1, #3
 80066a8:	482a      	ldr	r0, [pc, #168]	; (8006754 <QSPI_ResetMemory+0xd0>)
 80066aa:	f7fc fd23 	bl	80030f4 <MT25TL01G_ResetMemory>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80066b4:	f06f 0304 	mvn.w	r3, #4
 80066b8:	60fb      	str	r3, [r7, #12]
 80066ba:	e046      	b.n	800674a <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80066bc:	4926      	ldr	r1, [pc, #152]	; (8006758 <QSPI_ResetMemory+0xd4>)
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	4613      	mov	r3, r2
 80066c2:	005b      	lsls	r3, r3, #1
 80066c4:	4413      	add	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	440b      	add	r3, r1
 80066ca:	3301      	adds	r3, #1
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	4619      	mov	r1, r3
 80066d0:	4820      	ldr	r0, [pc, #128]	; (8006754 <QSPI_ResetMemory+0xd0>)
 80066d2:	f7fc f92b 	bl	800292c <MT25TL01G_AutoPollingMemReady>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80066dc:	f06f 0304 	mvn.w	r3, #4
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	e032      	b.n	800674a <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80066e4:	2100      	movs	r1, #0
 80066e6:	481b      	ldr	r0, [pc, #108]	; (8006754 <QSPI_ResetMemory+0xd0>)
 80066e8:	f7fc fcd2 	bl	8003090 <MT25TL01G_ResetEnable>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80066f2:	f06f 0304 	mvn.w	r3, #4
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	e027      	b.n	800674a <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80066fa:	2100      	movs	r1, #0
 80066fc:	4815      	ldr	r0, [pc, #84]	; (8006754 <QSPI_ResetMemory+0xd0>)
 80066fe:	f7fc fcf9 	bl	80030f4 <MT25TL01G_ResetMemory>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006708:	f06f 0304 	mvn.w	r3, #4
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	e01c      	b.n	800674a <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8006710:	4911      	ldr	r1, [pc, #68]	; (8006758 <QSPI_ResetMemory+0xd4>)
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	4613      	mov	r3, r2
 8006716:	005b      	lsls	r3, r3, #1
 8006718:	4413      	add	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	440b      	add	r3, r1
 800671e:	2201      	movs	r2, #1
 8006720:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 8006722:	490d      	ldr	r1, [pc, #52]	; (8006758 <QSPI_ResetMemory+0xd4>)
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	4613      	mov	r3, r2
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	4413      	add	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	440b      	add	r3, r1
 8006730:	3301      	adds	r3, #1
 8006732:	2200      	movs	r2, #0
 8006734:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8006736:	4908      	ldr	r1, [pc, #32]	; (8006758 <QSPI_ResetMemory+0xd4>)
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	4613      	mov	r3, r2
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	440b      	add	r3, r1
 8006744:	3302      	adds	r3, #2
 8006746:	2200      	movs	r2, #0
 8006748:	701a      	strb	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 800674a:	68fb      	ldr	r3, [r7, #12]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	240019d4 	.word	0x240019d4
 8006758:	24001a20 	.word	0x24001a20

0800675c <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b092      	sub	sp, #72	; 0x48
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 8006764:	2300      	movs	r3, #0
 8006766:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 8006768:	2300      	movs	r3, #0
 800676a:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800676c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8006772:	2385      	movs	r3, #133	; 0x85
 8006774:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006776:	2300      	movs	r3, #0
 8006778:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800677a:	2300      	movs	r3, #0
 800677c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800677e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8006782:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 8006784:	2300      	movs	r3, #0
 8006786:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 8006788:	2302      	movs	r3, #2
 800678a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800678c:	2300      	movs	r3, #0
 800678e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006790:	2300      	movs	r3, #0
 8006792:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006794:	2300      	movs	r3, #0
 8006796:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006798:	f107 030c 	add.w	r3, r7, #12
 800679c:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a0:	4619      	mov	r1, r3
 80067a2:	482b      	ldr	r0, [pc, #172]	; (8006850 <QSPI_DummyCyclesCfg+0xf4>)
 80067a4:	f003 fd0a 	bl	800a1bc <HAL_QSPI_Command>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80067ae:	f06f 0304 	mvn.w	r3, #4
 80067b2:	e048      	b.n	8006846 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80067b4:	f107 030a 	add.w	r3, r7, #10
 80067b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067bc:	4619      	mov	r1, r3
 80067be:	4824      	ldr	r0, [pc, #144]	; (8006850 <QSPI_DummyCyclesCfg+0xf4>)
 80067c0:	f003 fdec 	bl	800a39c <HAL_QSPI_Receive>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80067ca:	f06f 0304 	mvn.w	r3, #4
 80067ce:	e03a      	b.n	8006846 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80067d0:	4920      	ldr	r1, [pc, #128]	; (8006854 <QSPI_DummyCyclesCfg+0xf8>)
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	4613      	mov	r3, r2
 80067d6:	005b      	lsls	r3, r3, #1
 80067d8:	4413      	add	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	440b      	add	r3, r1
 80067de:	3301      	adds	r3, #1
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	4619      	mov	r1, r3
 80067e4:	481a      	ldr	r0, [pc, #104]	; (8006850 <QSPI_DummyCyclesCfg+0xf4>)
 80067e6:	f7fc f8dd 	bl	80029a4 <MT25TL01G_WriteEnable>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80067f0:	f06f 0304 	mvn.w	r3, #4
 80067f4:	e027      	b.n	8006846 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 80067f6:	2381      	movs	r3, #129	; 0x81
 80067f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 80067fa:	897a      	ldrh	r2, [r7, #10]
 80067fc:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006800:	4013      	ands	r3, r2
 8006802:	b29a      	uxth	r2, r3
 8006804:	4b14      	ldr	r3, [pc, #80]	; (8006858 <QSPI_DummyCyclesCfg+0xfc>)
 8006806:	4313      	orrs	r3, r2
 8006808:	b29b      	uxth	r3, r3
 800680a:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800680c:	f107 030c 	add.w	r3, r7, #12
 8006810:	f241 3288 	movw	r2, #5000	; 0x1388
 8006814:	4619      	mov	r1, r3
 8006816:	480e      	ldr	r0, [pc, #56]	; (8006850 <QSPI_DummyCyclesCfg+0xf4>)
 8006818:	f003 fcd0 	bl	800a1bc <HAL_QSPI_Command>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8006822:	f06f 0304 	mvn.w	r3, #4
 8006826:	e00e      	b.n	8006846 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006828:	f107 030a 	add.w	r3, r7, #10
 800682c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006830:	4619      	mov	r1, r3
 8006832:	4807      	ldr	r0, [pc, #28]	; (8006850 <QSPI_DummyCyclesCfg+0xf4>)
 8006834:	f003 fd20 	bl	800a278 <HAL_QSPI_Transmit>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800683e:	f06f 0304 	mvn.w	r3, #4
 8006842:	e000      	b.n	8006846 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 8006844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006846:	4618      	mov	r0, r3
 8006848:	3748      	adds	r7, #72	; 0x48
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	240019d4 	.word	0x240019d4
 8006854:	24001a20 	.word	0x24001a20
 8006858:	ffff8080 	.word	0xffff8080

0800685c <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  int32_t ret;
  static IS42S32800J_Context_t pRegMode;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <BSP_SDRAM_Init+0x16>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800686a:	f06f 0301 	mvn.w	r3, #1
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	e033      	b.n	80068da <BSP_SDRAM_Init+0x7e>
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SDRAM initialization */
      SDRAM_MspInit(&hsdram[0]);
 8006872:	481c      	ldr	r0, [pc, #112]	; (80068e4 <BSP_SDRAM_Init+0x88>)
 8006874:	f000 f884 	bl	8006980 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8006878:	481a      	ldr	r0, [pc, #104]	; (80068e4 <BSP_SDRAM_Init+0x88>)
 800687a:	f000 f837 	bl	80068ec <MX_SDRAM_Init>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <BSP_SDRAM_Init+0x30>
    {
      ret = BSP_ERROR_NO_INIT;
 8006884:	f04f 33ff 	mov.w	r3, #4294967295
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	e026      	b.n	80068da <BSP_SDRAM_Init+0x7e>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800688c:	4b16      	ldr	r3, [pc, #88]	; (80068e8 <BSP_SDRAM_Init+0x8c>)
 800688e:	2208      	movs	r2, #8
 8006890:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8006892:	4b15      	ldr	r3, [pc, #84]	; (80068e8 <BSP_SDRAM_Init+0x8c>)
 8006894:	2203      	movs	r2, #3
 8006896:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8006898:	4b13      	ldr	r3, [pc, #76]	; (80068e8 <BSP_SDRAM_Init+0x8c>)
 800689a:	f240 6203 	movw	r2, #1539	; 0x603
 800689e:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 80068a0:	4b11      	ldr	r3, [pc, #68]	; (80068e8 <BSP_SDRAM_Init+0x8c>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 80068a6:	4b10      	ldr	r3, [pc, #64]	; (80068e8 <BSP_SDRAM_Init+0x8c>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 80068ac:	4b0e      	ldr	r3, [pc, #56]	; (80068e8 <BSP_SDRAM_Init+0x8c>)
 80068ae:	2230      	movs	r2, #48	; 0x30
 80068b0:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 80068b2:	4b0d      	ldr	r3, [pc, #52]	; (80068e8 <BSP_SDRAM_Init+0x8c>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80068b8:	4b0b      	ldr	r3, [pc, #44]	; (80068e8 <BSP_SDRAM_Init+0x8c>)
 80068ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068be:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80068c0:	4909      	ldr	r1, [pc, #36]	; (80068e8 <BSP_SDRAM_Init+0x8c>)
 80068c2:	4808      	ldr	r0, [pc, #32]	; (80068e4 <BSP_SDRAM_Init+0x88>)
 80068c4:	f7fb feb9 	bl	800263a <IS42S32800J_Init>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <BSP_SDRAM_Init+0x7a>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 80068ce:	f06f 0304 	mvn.w	r3, #4
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	e001      	b.n	80068da <BSP_SDRAM_Init+0x7e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 80068da:	68fb      	ldr	r3, [r7, #12]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	24001a2c 	.word	0x24001a2c
 80068e8:	24001a60 	.word	0x24001a60

080068ec <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b08a      	sub	sp, #40	; 0x28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a20      	ldr	r2, [pc, #128]	; (8006978 <MX_SDRAM_Init+0x8c>)
 80068f8:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2204      	movs	r2, #4
 800690a:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2220      	movs	r2, #32
 8006910:	611a      	str	r2, [r3, #16]
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2240      	movs	r2, #64	; 0x40
 8006916:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800691e:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800692c:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006934:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006936:	4b11      	ldr	r3, [pc, #68]	; (800697c <MX_SDRAM_Init+0x90>)
 8006938:	2200      	movs	r2, #0
 800693a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 800693c:	2302      	movs	r3, #2
 800693e:	60fb      	str	r3, [r7, #12]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8006940:	2307      	movs	r3, #7
 8006942:	613b      	str	r3, [r7, #16]
  sdram_timing.SelfRefreshTime      = 4;
 8006944:	2304      	movs	r3, #4
 8006946:	617b      	str	r3, [r7, #20]
  sdram_timing.RowCycleDelay        = 7;
 8006948:	2307      	movs	r3, #7
 800694a:	61bb      	str	r3, [r7, #24]
  sdram_timing.WriteRecoveryTime    = 2;
 800694c:	2302      	movs	r3, #2
 800694e:	61fb      	str	r3, [r7, #28]
  sdram_timing.RPDelay              = 2;
 8006950:	2302      	movs	r3, #2
 8006952:	623b      	str	r3, [r7, #32]
  sdram_timing.RCDDelay             = 2;
 8006954:	2302      	movs	r3, #2
 8006956:	627b      	str	r3, [r7, #36]	; 0x24

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8006958:	f107 030c 	add.w	r3, r7, #12
 800695c:	4619      	mov	r1, r3
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f006 fba8 	bl	800d0b4 <HAL_SDRAM_Init>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <MX_SDRAM_Init+0x82>
  {
    return  HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e000      	b.n	8006970 <MX_SDRAM_Init+0x84>
  }
  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3728      	adds	r7, #40	; 0x28
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	52004140 	.word	0x52004140
 800697c:	24001a2c 	.word	0x24001a2c

08006980 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hsdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b090      	sub	sp, #64	; 0x40
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006988:	4b7f      	ldr	r3, [pc, #508]	; (8006b88 <SDRAM_MspInit+0x208>)
 800698a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800698e:	4a7e      	ldr	r2, [pc, #504]	; (8006b88 <SDRAM_MspInit+0x208>)
 8006990:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006994:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8006998:	4b7b      	ldr	r3, [pc, #492]	; (8006b88 <SDRAM_MspInit+0x208>)
 800699a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800699e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069a4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 80069a6:	4b78      	ldr	r3, [pc, #480]	; (8006b88 <SDRAM_MspInit+0x208>)
 80069a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80069ac:	4a76      	ldr	r2, [pc, #472]	; (8006b88 <SDRAM_MspInit+0x208>)
 80069ae:	f043 0301 	orr.w	r3, r3, #1
 80069b2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80069b6:	4b74      	ldr	r3, [pc, #464]	; (8006b88 <SDRAM_MspInit+0x208>)
 80069b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	627b      	str	r3, [r7, #36]	; 0x24
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80069c4:	4b70      	ldr	r3, [pc, #448]	; (8006b88 <SDRAM_MspInit+0x208>)
 80069c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069ca:	4a6f      	ldr	r2, [pc, #444]	; (8006b88 <SDRAM_MspInit+0x208>)
 80069cc:	f043 0308 	orr.w	r3, r3, #8
 80069d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069d4:	4b6c      	ldr	r3, [pc, #432]	; (8006b88 <SDRAM_MspInit+0x208>)
 80069d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069da:	f003 0308 	and.w	r3, r3, #8
 80069de:	623b      	str	r3, [r7, #32]
 80069e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80069e2:	4b69      	ldr	r3, [pc, #420]	; (8006b88 <SDRAM_MspInit+0x208>)
 80069e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069e8:	4a67      	ldr	r2, [pc, #412]	; (8006b88 <SDRAM_MspInit+0x208>)
 80069ea:	f043 0310 	orr.w	r3, r3, #16
 80069ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069f2:	4b65      	ldr	r3, [pc, #404]	; (8006b88 <SDRAM_MspInit+0x208>)
 80069f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069f8:	f003 0310 	and.w	r3, r3, #16
 80069fc:	61fb      	str	r3, [r7, #28]
 80069fe:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006a00:	4b61      	ldr	r3, [pc, #388]	; (8006b88 <SDRAM_MspInit+0x208>)
 8006a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a06:	4a60      	ldr	r2, [pc, #384]	; (8006b88 <SDRAM_MspInit+0x208>)
 8006a08:	f043 0320 	orr.w	r3, r3, #32
 8006a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a10:	4b5d      	ldr	r3, [pc, #372]	; (8006b88 <SDRAM_MspInit+0x208>)
 8006a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	61bb      	str	r3, [r7, #24]
 8006a1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a1e:	4b5a      	ldr	r3, [pc, #360]	; (8006b88 <SDRAM_MspInit+0x208>)
 8006a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a24:	4a58      	ldr	r2, [pc, #352]	; (8006b88 <SDRAM_MspInit+0x208>)
 8006a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a2e:	4b56      	ldr	r3, [pc, #344]	; (8006b88 <SDRAM_MspInit+0x208>)
 8006a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a3c:	4b52      	ldr	r3, [pc, #328]	; (8006b88 <SDRAM_MspInit+0x208>)
 8006a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a42:	4a51      	ldr	r2, [pc, #324]	; (8006b88 <SDRAM_MspInit+0x208>)
 8006a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a4c:	4b4e      	ldr	r3, [pc, #312]	; (8006b88 <SDRAM_MspInit+0x208>)
 8006a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a56:	613b      	str	r3, [r7, #16]
 8006a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006a5a:	4b4b      	ldr	r3, [pc, #300]	; (8006b88 <SDRAM_MspInit+0x208>)
 8006a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a60:	4a49      	ldr	r2, [pc, #292]	; (8006b88 <SDRAM_MspInit+0x208>)
 8006a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a6a:	4b47      	ldr	r3, [pc, #284]	; (8006b88 <SDRAM_MspInit+0x208>)
 8006a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	68fb      	ldr	r3, [r7, #12]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006a78:	2302      	movs	r3, #2
 8006a7a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a80:	2303      	movs	r3, #3
 8006a82:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006a84:	230c      	movs	r3, #12
 8006a86:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8006a88:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006a8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a92:	4619      	mov	r1, r3
 8006a94:	483d      	ldr	r0, [pc, #244]	; (8006b8c <SDRAM_MspInit+0x20c>)
 8006a96:	f001 fd4d 	bl	8008534 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006a9a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	483a      	ldr	r0, [pc, #232]	; (8006b90 <SDRAM_MspInit+0x210>)
 8006aa8:	f001 fd44 	bl	8008534 <HAL_GPIO_Init>
  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006aac:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	4836      	ldr	r0, [pc, #216]	; (8006b94 <SDRAM_MspInit+0x214>)
 8006aba:	f001 fd3b 	bl	8008534 <HAL_GPIO_Init>
  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8006abe:	f248 1337 	movw	r3, #33079	; 0x8137
 8006ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4833      	ldr	r0, [pc, #204]	; (8006b98 <SDRAM_MspInit+0x218>)
 8006acc:	f001 fd32 	bl	8008534 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8006ad0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006ad6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ada:	4619      	mov	r1, r3
 8006adc:	482f      	ldr	r0, [pc, #188]	; (8006b9c <SDRAM_MspInit+0x21c>)
 8006ade:	f001 fd29 	bl	8008534 <HAL_GPIO_Init>

  /* GPIOI configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8006ae2:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8006ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;

  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006aec:	4619      	mov	r1, r3
 8006aee:	482c      	ldr	r0, [pc, #176]	; (8006ba0 <SDRAM_MspInit+0x220>)
 8006af0:	f001 fd20 	bl	8008534 <HAL_GPIO_Init>

  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8006af4:	4b2b      	ldr	r3, [pc, #172]	; (8006ba4 <SDRAM_MspInit+0x224>)
 8006af6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006afa:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8006afc:	4b29      	ldr	r3, [pc, #164]	; (8006ba4 <SDRAM_MspInit+0x224>)
 8006afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b02:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8006b04:	4b27      	ldr	r3, [pc, #156]	; (8006ba4 <SDRAM_MspInit+0x224>)
 8006b06:	2280      	movs	r2, #128	; 0x80
 8006b08:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8006b0a:	4b26      	ldr	r3, [pc, #152]	; (8006ba4 <SDRAM_MspInit+0x224>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8006b10:	4b24      	ldr	r3, [pc, #144]	; (8006ba4 <SDRAM_MspInit+0x224>)
 8006b12:	f240 2202 	movw	r2, #514	; 0x202
 8006b16:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8006b18:	4b22      	ldr	r3, [pc, #136]	; (8006ba4 <SDRAM_MspInit+0x224>)
 8006b1a:	f640 0208 	movw	r2, #2056	; 0x808
 8006b1e:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8006b20:	4b20      	ldr	r3, [pc, #128]	; (8006ba4 <SDRAM_MspInit+0x224>)
 8006b22:	2220      	movs	r2, #32
 8006b24:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8006b26:	4b1f      	ldr	r3, [pc, #124]	; (8006ba4 <SDRAM_MspInit+0x224>)
 8006b28:	2280      	movs	r2, #128	; 0x80
 8006b2a:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8006b2c:	4b1d      	ldr	r3, [pc, #116]	; (8006ba4 <SDRAM_MspInit+0x224>)
 8006b2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b32:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 8006b34:	4b1b      	ldr	r3, [pc, #108]	; (8006ba4 <SDRAM_MspInit+0x224>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8006b3a:	4b1a      	ldr	r3, [pc, #104]	; (8006ba4 <SDRAM_MspInit+0x224>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 8006b40:	4b18      	ldr	r3, [pc, #96]	; (8006ba4 <SDRAM_MspInit+0x224>)
 8006b42:	2280      	movs	r2, #128	; 0x80
 8006b44:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8006b46:	4b17      	ldr	r3, [pc, #92]	; (8006ba4 <SDRAM_MspInit+0x224>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8006b4c:	4b15      	ldr	r3, [pc, #84]	; (8006ba4 <SDRAM_MspInit+0x224>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	639a      	str	r2, [r3, #56]	; 0x38
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8006b52:	4b14      	ldr	r3, [pc, #80]	; (8006ba4 <SDRAM_MspInit+0x224>)
 8006b54:	4a14      	ldr	r2, [pc, #80]	; (8006ba8 <SDRAM_MspInit+0x228>)
 8006b56:	601a      	str	r2, [r3, #0]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a12      	ldr	r2, [pc, #72]	; (8006ba4 <SDRAM_MspInit+0x224>)
 8006b5c:	631a      	str	r2, [r3, #48]	; 0x30
 8006b5e:	4a11      	ldr	r2, [pc, #68]	; (8006ba4 <SDRAM_MspInit+0x224>)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6413      	str	r3, [r2, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8006b64:	480f      	ldr	r0, [pc, #60]	; (8006ba4 <SDRAM_MspInit+0x224>)
 8006b66:	f003 f959 	bl	8009e1c <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8006b6a:	480e      	ldr	r0, [pc, #56]	; (8006ba4 <SDRAM_MspInit+0x224>)
 8006b6c:	f003 f90a 	bl	8009d84 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8006b70:	2200      	movs	r2, #0
 8006b72:	210f      	movs	r1, #15
 8006b74:	207a      	movs	r0, #122	; 0x7a
 8006b76:	f000 fc4e 	bl	8007416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8006b7a:	207a      	movs	r0, #122	; 0x7a
 8006b7c:	f000 fc65 	bl	800744a <HAL_NVIC_EnableIRQ>
}
 8006b80:	bf00      	nop
 8006b82:	3740      	adds	r7, #64	; 0x40
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	58024400 	.word	0x58024400
 8006b8c:	58020c00 	.word	0x58020c00
 8006b90:	58021000 	.word	0x58021000
 8006b94:	58021400 	.word	0x58021400
 8006b98:	58021800 	.word	0x58021800
 8006b9c:	58021c00 	.word	0x58021c00
 8006ba0:	58022000 	.word	0x58022000
 8006ba4:	24001a80 	.word	0x24001a80
 8006ba8:	52000040 	.word	0x52000040

08006bac <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b088      	sub	sp, #32
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d11c      	bne.n	8006bfa <BSP_TS_Init+0x4e>
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d018      	beq.n	8006bfa <BSP_TS_Init+0x4e>
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8006bd0:	d813      	bhi.n	8006bfa <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00f      	beq.n	8006bfa <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8006be2:	d80a      	bhi.n	8006bfa <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	68da      	ldr	r2, [r3, #12]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	6819      	ldr	r1, [r3, #0]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	428b      	cmp	r3, r1
 8006bf2:	bf28      	it	cs
 8006bf4:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d903      	bls.n	8006c02 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006bfa:	f06f 0301 	mvn.w	r3, #1
 8006bfe:	61fb      	str	r3, [r7, #28]
 8006c00:	e085      	b.n	8006d0e <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT6X06_Probe(Instance) != BSP_ERROR_NONE)
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f9e8 	bl	8006fd8 <FT6X06_Probe>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 8006c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c12:	61fb      	str	r3, [r7, #28]
 8006c14:	e07b      	b.n	8006d0e <BSP_TS_Init+0x162>
    }
    else
    {
      TS_Capabilities_t Capabilities;
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	6819      	ldr	r1, [r3, #0]
 8006c1a:	483f      	ldr	r0, [pc, #252]	; (8006d18 <BSP_TS_Init+0x16c>)
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4413      	add	r3, r2
 8006c24:	00db      	lsls	r3, r3, #3
 8006c26:	4403      	add	r3, r0
 8006c28:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	6859      	ldr	r1, [r3, #4]
 8006c2e:	483a      	ldr	r0, [pc, #232]	; (8006d18 <BSP_TS_Init+0x16c>)
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	4613      	mov	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	00db      	lsls	r3, r3, #3
 8006c3a:	4403      	add	r3, r0
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	6899      	ldr	r1, [r3, #8]
 8006c44:	4834      	ldr	r0, [pc, #208]	; (8006d18 <BSP_TS_Init+0x16c>)
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	4403      	add	r3, r0
 8006c52:	3308      	adds	r3, #8
 8006c54:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	68d9      	ldr	r1, [r3, #12]
 8006c5a:	482f      	ldr	r0, [pc, #188]	; (8006d18 <BSP_TS_Init+0x16c>)
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	4403      	add	r3, r0
 8006c68:	330c      	adds	r3, #12
 8006c6a:	6019      	str	r1, [r3, #0]

      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006c6c:	4b2b      	ldr	r3, [pc, #172]	; (8006d1c <BSP_TS_Init+0x170>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	492b      	ldr	r1, [pc, #172]	; (8006d20 <BSP_TS_Init+0x174>)
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006c7a:	f107 010c 	add.w	r1, r7, #12
 8006c7e:	4610      	mov	r0, r2
 8006c80:	4798      	blx	r3
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	da03      	bge.n	8006c90 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c88:	f06f 0304 	mvn.w	r3, #4
 8006c8c:	61fb      	str	r3, [r7, #28]
 8006c8e:	e03e      	b.n	8006d0e <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8006c90:	6939      	ldr	r1, [r7, #16]
 8006c92:	4821      	ldr	r0, [pc, #132]	; (8006d18 <BSP_TS_Init+0x16c>)
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	00db      	lsls	r3, r3, #3
 8006c9e:	4403      	add	r3, r0
 8006ca0:	3310      	adds	r3, #16
 8006ca2:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006ca4:	6979      	ldr	r1, [r7, #20]
 8006ca6:	481c      	ldr	r0, [pc, #112]	; (8006d18 <BSP_TS_Init+0x16c>)
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	4613      	mov	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	00db      	lsls	r3, r3, #3
 8006cb2:	4403      	add	r3, r0
 8006cb4:	3314      	adds	r3, #20
 8006cb6:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(int i = 0; i < TS_TOUCH_NBR; i++)
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61bb      	str	r3, [r7, #24]
 8006cbc:	e024      	b.n	8006d08 <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	1c59      	adds	r1, r3, #1
 8006cca:	4813      	ldr	r0, [pc, #76]	; (8006d18 <BSP_TS_Init+0x16c>)
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	69ba      	ldr	r2, [r7, #24]
 8006cd8:	4413      	add	r3, r2
 8006cda:	3306      	adds	r3, #6
 8006cdc:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	4413      	add	r3, r2
 8006cea:	1c59      	adds	r1, r3, #1
 8006cec:	480a      	ldr	r0, [pc, #40]	; (8006d18 <BSP_TS_Init+0x16c>)
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(int i = 0; i < TS_TOUCH_NBR; i++)
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	3301      	adds	r3, #1
 8006d06:	61bb      	str	r3, [r7, #24]
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d9d7      	bls.n	8006cbe <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 8006d0e:	69fb      	ldr	r3, [r7, #28]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3720      	adds	r7, #32
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	24001af0 	.word	0x24001af0
 8006d1c:	24001aec 	.word	0x24001aec
 8006d20:	24001b18 	.word	0x24001b18

08006d24 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b08a      	sub	sp, #40	; 0x28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006d38:	f06f 0301 	mvn.w	r3, #1
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d3e:	e13f      	b.n	8006fc0 <BSP_TS_GetState+0x29c>
  else
  {
    FT6X06_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8006d40:	4ba2      	ldr	r3, [pc, #648]	; (8006fcc <BSP_TS_GetState+0x2a8>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	49a2      	ldr	r1, [pc, #648]	; (8006fd0 <BSP_TS_GetState+0x2ac>)
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006d4e:	f107 0108 	add.w	r1, r7, #8
 8006d52:	4610      	mov	r0, r2
 8006d54:	4798      	blx	r3
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	da03      	bge.n	8006d64 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006d5c:	f06f 0304 	mvn.w	r3, #4
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
 8006d62:	e12d      	b.n	8006fc0 <BSP_TS_GetState+0x29c>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 8111 	beq.w	8006f8e <BSP_TS_GetState+0x26a>
    {
      x_oriented = state.TouchX;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006d74:	4997      	ldr	r1, [pc, #604]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	440b      	add	r3, r1
 8006d82:	3308      	adds	r3, #8
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0308 	and.w	r3, r3, #8
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8006d96:	498f      	ldr	r1, [pc, #572]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	440b      	add	r3, r1
 8006da4:	3308      	adds	r3, #8
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00c      	beq.n	8006dca <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8006db0:	4988      	ldr	r1, [pc, #544]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	4613      	mov	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	440b      	add	r3, r1
 8006dbe:	3310      	adds	r3, #16
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8006dca:	4982      	ldr	r1, [pc, #520]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	440b      	add	r3, r1
 8006dd8:	3308      	adds	r3, #8
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00c      	beq.n	8006dfe <BSP_TS_GetState+0xda>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006de4:	497b      	ldr	r1, [pc, #492]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	4613      	mov	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	440b      	add	r3, r1
 8006df2:	3314      	adds	r3, #20
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006dfe:	4975      	ldr	r1, [pc, #468]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	4613      	mov	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	00db      	lsls	r3, r3, #3
 8006e0a:	440b      	add	r3, r1
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6a3a      	ldr	r2, [r7, #32]
 8006e10:	fb02 f103 	mul.w	r1, r2, r3
 8006e14:	486f      	ldr	r0, [pc, #444]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	4403      	add	r3, r0
 8006e22:	3310      	adds	r3, #16
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	fbb1 f2f3 	udiv	r2, r1, r3
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006e2e:	4969      	ldr	r1, [pc, #420]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	4613      	mov	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	00db      	lsls	r3, r3, #3
 8006e3a:	440b      	add	r3, r1
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	69fa      	ldr	r2, [r7, #28]
 8006e42:	fb02 f103 	mul.w	r1, r2, r3
 8006e46:	4863      	ldr	r0, [pc, #396]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	4403      	add	r3, r0
 8006e54:	3314      	adds	r3, #20
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	fbb1 f2f3 	udiv	r2, r1, r3
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	6859      	ldr	r1, [r3, #4]
 8006e6a:	485a      	ldr	r0, [pc, #360]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	00db      	lsls	r3, r3, #3
 8006e76:	4403      	add	r3, r0
 8006e78:	3318      	adds	r3, #24
 8006e7a:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8006e7c:	4299      	cmp	r1, r3
 8006e7e:	d90c      	bls.n	8006e9a <BSP_TS_GetState+0x176>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	6859      	ldr	r1, [r3, #4]
 8006e84:	4853      	ldr	r0, [pc, #332]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	4403      	add	r3, r0
 8006e92:	3318      	adds	r3, #24
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	1acb      	subs	r3, r1, r3
 8006e98:	e00b      	b.n	8006eb2 <BSP_TS_GetState+0x18e>
               (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8006e9a:	494e      	ldr	r1, [pc, #312]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	00db      	lsls	r3, r3, #3
 8006ea6:	440b      	add	r3, r1
 8006ea8:	3318      	adds	r3, #24
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8006eb0:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006eb2:	61bb      	str	r3, [r7, #24]

      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	6899      	ldr	r1, [r3, #8]
 8006eb8:	4846      	ldr	r0, [pc, #280]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	4403      	add	r3, r0
 8006ec6:	3320      	adds	r3, #32
 8006ec8:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8006eca:	4299      	cmp	r1, r3
 8006ecc:	d90c      	bls.n	8006ee8 <BSP_TS_GetState+0x1c4>
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	6899      	ldr	r1, [r3, #8]
 8006ed2:	4840      	ldr	r0, [pc, #256]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	4403      	add	r3, r0
 8006ee0:	3320      	adds	r3, #32
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	1acb      	subs	r3, r1, r3
 8006ee6:	e00b      	b.n	8006f00 <BSP_TS_GetState+0x1dc>
               (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8006ee8:	493a      	ldr	r1, [pc, #232]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	4613      	mov	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	440b      	add	r3, r1
 8006ef6:	3320      	adds	r3, #32
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8006efe:	1ad3      	subs	r3, r2, r3
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8006f00:	617b      	str	r3, [r7, #20]


      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8006f02:	4934      	ldr	r1, [pc, #208]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	4613      	mov	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	00db      	lsls	r3, r3, #3
 8006f0e:	440b      	add	r3, r1
 8006f10:	330c      	adds	r3, #12
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d80b      	bhi.n	8006f32 <BSP_TS_GetState+0x20e>
 8006f1a:	492e      	ldr	r1, [pc, #184]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	00db      	lsls	r3, r3, #3
 8006f26:	440b      	add	r3, r1
 8006f28:	330c      	adds	r3, #12
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d916      	bls.n	8006f60 <BSP_TS_GetState+0x23c>
      {
        /* New touch detected */
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	6859      	ldr	r1, [r3, #4]
 8006f36:	4827      	ldr	r0, [pc, #156]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	4403      	add	r3, r0
 8006f44:	3318      	adds	r3, #24
 8006f46:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	6899      	ldr	r1, [r3, #8]
 8006f4c:	4821      	ldr	r0, [pc, #132]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	4403      	add	r3, r0
 8006f5a:	3320      	adds	r3, #32
 8006f5c:	6019      	str	r1, [r3, #0]
 8006f5e:	e02f      	b.n	8006fc0 <BSP_TS_GetState+0x29c>
      }
      else
      {
        TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8006f60:	491c      	ldr	r1, [pc, #112]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	4613      	mov	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	440b      	add	r3, r1
 8006f6e:	3318      	adds	r3, #24
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	605a      	str	r2, [r3, #4]
        TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8006f76:	4917      	ldr	r1, [pc, #92]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	00db      	lsls	r3, r3, #3
 8006f82:	440b      	add	r3, r1
 8006f84:	3320      	adds	r3, #32
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	609a      	str	r2, [r3, #8]
 8006f8c:	e018      	b.n	8006fc0 <BSP_TS_GetState+0x29c>
      }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2200      	movs	r2, #0
 8006f92:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8006f94:	490f      	ldr	r1, [pc, #60]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	00db      	lsls	r3, r3, #3
 8006fa0:	440b      	add	r3, r1
 8006fa2:	3318      	adds	r3, #24
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8006faa:	490a      	ldr	r1, [pc, #40]	; (8006fd4 <BSP_TS_GetState+0x2b0>)
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	00db      	lsls	r3, r3, #3
 8006fb6:	440b      	add	r3, r1
 8006fb8:	3320      	adds	r3, #32
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3728      	adds	r7, #40	; 0x28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	24001aec 	.word	0x24001aec
 8006fd0:	24001b18 	.word	0x24001b18
 8006fd4:	24001af0 	.word	0x24001af0

08006fd8 <FT6X06_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT6X06_Probe(uint32_t Instance)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b090      	sub	sp, #64	; 0x40
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8006fe0:	4a34      	ldr	r2, [pc, #208]	; (80070b4 <FT6X06_Probe+0xdc>)
 8006fe2:	f107 0308 	add.w	r3, r7, #8
 8006fe6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fea:	e883 0003 	stmia.w	r3, {r0, r1}

  /* Configure the touch screen driver */
  IOCtx.Init        = BSP_I2C4_Init;
 8006fee:	4b32      	ldr	r3, [pc, #200]	; (80070b8 <FT6X06_Probe+0xe0>)
 8006ff0:	623b      	str	r3, [r7, #32]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8006ff2:	4b32      	ldr	r3, [pc, #200]	; (80070bc <FT6X06_Probe+0xe4>)
 8006ff4:	627b      	str	r3, [r7, #36]	; 0x24
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8006ff6:	4b32      	ldr	r3, [pc, #200]	; (80070c0 <FT6X06_Probe+0xe8>)
 8006ff8:	633b      	str	r3, [r7, #48]	; 0x30
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8006ffa:	4b32      	ldr	r3, [pc, #200]	; (80070c4 <FT6X06_Probe+0xec>)
 8006ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  IOCtx.GetTick     = BSP_GetTick;
 8006ffe:	4b32      	ldr	r3, [pc, #200]	; (80070c8 <FT6X06_Probe+0xf0>)
 8007000:	637b      	str	r3, [r7, #52]	; 0x34

  for(i = 0; i < 2UL; i++)
 8007002:	2300      	movs	r3, #0
 8007004:	63bb      	str	r3, [r7, #56]	; 0x38
 8007006:	e04c      	b.n	80070a2 <FT6X06_Probe+0xca>
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8007008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	3340      	adds	r3, #64	; 0x40
 800700e:	443b      	add	r3, r7
 8007010:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8007014:	b29b      	uxth	r3, r3
 8007016:	853b      	strh	r3, [r7, #40]	; 0x28

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8007018:	f107 0320 	add.w	r3, r7, #32
 800701c:	4619      	mov	r1, r3
 800701e:	482b      	ldr	r0, [pc, #172]	; (80070cc <FT6X06_Probe+0xf4>)
 8007020:	f7fa ffde 	bl	8001fe0 <FT6X06_RegisterBusIO>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <FT6X06_Probe+0x5a>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800702a:	f06f 0307 	mvn.w	r3, #7
 800702e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007030:	e034      	b.n	800709c <FT6X06_Probe+0xc4>
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8007032:	f107 0310 	add.w	r3, r7, #16
 8007036:	4619      	mov	r1, r3
 8007038:	4824      	ldr	r0, [pc, #144]	; (80070cc <FT6X06_Probe+0xf4>)
 800703a:	f7fb f8c9 	bl	80021d0 <FT6X06_ReadID>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d003      	beq.n	800704c <FT6X06_Probe+0x74>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007044:	f06f 0304 	mvn.w	r3, #4
 8007048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800704a:	e027      	b.n	800709c <FT6X06_Probe+0xc4>
    }
    else if(id != FT6X06_ID)
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	2b11      	cmp	r3, #17
 8007050:	d003      	beq.n	800705a <FT6X06_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007052:	f06f 0306 	mvn.w	r3, #6
 8007056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007058:	e020      	b.n	800709c <FT6X06_Probe+0xc4>
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 800705a:	f107 0314 	add.w	r3, r7, #20
 800705e:	4619      	mov	r1, r3
 8007060:	481a      	ldr	r0, [pc, #104]	; (80070cc <FT6X06_Probe+0xf4>)
 8007062:	f7fa ffff 	bl	8002064 <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 8007066:	4a1a      	ldr	r2, [pc, #104]	; (80070d0 <FT6X06_Probe+0xf8>)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4918      	ldr	r1, [pc, #96]	; (80070cc <FT6X06_Probe+0xf4>)
 800706c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8007070:	4b18      	ldr	r3, [pc, #96]	; (80070d4 <FT6X06_Probe+0xfc>)
 8007072:	4a19      	ldr	r2, [pc, #100]	; (80070d8 <FT6X06_Probe+0x100>)
 8007074:	601a      	str	r2, [r3, #0]

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8007076:	4b17      	ldr	r3, [pc, #92]	; (80070d4 <FT6X06_Probe+0xfc>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4914      	ldr	r1, [pc, #80]	; (80070d0 <FT6X06_Probe+0xf8>)
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007084:	4610      	mov	r0, r2
 8007086:	4798      	blx	r3
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <FT6X06_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800708e:	f06f 0304 	mvn.w	r3, #4
 8007092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007094:	e002      	b.n	800709c <FT6X06_Probe+0xc4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007096:	2300      	movs	r3, #0
 8007098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800709a:	e005      	b.n	80070a8 <FT6X06_Probe+0xd0>
  for(i = 0; i < 2UL; i++)
 800709c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709e:	3301      	adds	r3, #1
 80070a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80070a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d9af      	bls.n	8007008 <FT6X06_Probe+0x30>
      }
    }
  }

  return ret;
 80070a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3740      	adds	r7, #64	; 0x40
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	08010c14 	.word	0x08010c14
 80070b8:	080043d5 	.word	0x080043d5
 80070bc:	08004449 	.word	0x08004449
 80070c0:	08004571 	.word	0x08004571
 80070c4:	08004515 	.word	0x08004515
 80070c8:	080045cd 	.word	0x080045cd
 80070cc:	24001b1c 	.word	0x24001b1c
 80070d0:	24001b18 	.word	0x24001b18
 80070d4:	24001aec 	.word	0x24001aec
 80070d8:	24000008 	.word	0x24000008

080070dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80070e2:	2003      	movs	r0, #3
 80070e4:	f000 f98c 	bl	8007400 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80070e8:	f004 fa7e 	bl	800b5e8 <HAL_RCC_GetSysClockFreq>
 80070ec:	4602      	mov	r2, r0
 80070ee:	4b15      	ldr	r3, [pc, #84]	; (8007144 <HAL_Init+0x68>)
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	0a1b      	lsrs	r3, r3, #8
 80070f4:	f003 030f 	and.w	r3, r3, #15
 80070f8:	4913      	ldr	r1, [pc, #76]	; (8007148 <HAL_Init+0x6c>)
 80070fa:	5ccb      	ldrb	r3, [r1, r3]
 80070fc:	f003 031f 	and.w	r3, r3, #31
 8007100:	fa22 f303 	lsr.w	r3, r2, r3
 8007104:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007106:	4b0f      	ldr	r3, [pc, #60]	; (8007144 <HAL_Init+0x68>)
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	f003 030f 	and.w	r3, r3, #15
 800710e:	4a0e      	ldr	r2, [pc, #56]	; (8007148 <HAL_Init+0x6c>)
 8007110:	5cd3      	ldrb	r3, [r2, r3]
 8007112:	f003 031f 	and.w	r3, r3, #31
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	fa22 f303 	lsr.w	r3, r2, r3
 800711c:	4a0b      	ldr	r2, [pc, #44]	; (800714c <HAL_Init+0x70>)
 800711e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007120:	4a0b      	ldr	r2, [pc, #44]	; (8007150 <HAL_Init+0x74>)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007126:	2000      	movs	r0, #0
 8007128:	f000 f814 	bl	8007154 <HAL_InitTick>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e002      	b.n	800713c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007136:	f002 ff61 	bl	8009ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	58024400 	.word	0x58024400
 8007148:	08010c1c 	.word	0x08010c1c
 800714c:	24000004 	.word	0x24000004
 8007150:	24000000 	.word	0x24000000

08007154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800715c:	4b15      	ldr	r3, [pc, #84]	; (80071b4 <HAL_InitTick+0x60>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e021      	b.n	80071ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007168:	4b13      	ldr	r3, [pc, #76]	; (80071b8 <HAL_InitTick+0x64>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	4b11      	ldr	r3, [pc, #68]	; (80071b4 <HAL_InitTick+0x60>)
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	4619      	mov	r1, r3
 8007172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007176:	fbb3 f3f1 	udiv	r3, r3, r1
 800717a:	fbb2 f3f3 	udiv	r3, r2, r3
 800717e:	4618      	mov	r0, r3
 8007180:	f000 f971 	bl	8007466 <HAL_SYSTICK_Config>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e00e      	b.n	80071ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b0f      	cmp	r3, #15
 8007192:	d80a      	bhi.n	80071aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007194:	2200      	movs	r2, #0
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	f04f 30ff 	mov.w	r0, #4294967295
 800719c:	f000 f93b 	bl	8007416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80071a0:	4a06      	ldr	r2, [pc, #24]	; (80071bc <HAL_InitTick+0x68>)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	e000      	b.n	80071ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	240000a4 	.word	0x240000a4
 80071b8:	24000000 	.word	0x24000000
 80071bc:	240000a0 	.word	0x240000a0

080071c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80071c0:	b480      	push	{r7}
 80071c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80071c4:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <HAL_IncTick+0x20>)
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	461a      	mov	r2, r3
 80071ca:	4b06      	ldr	r3, [pc, #24]	; (80071e4 <HAL_IncTick+0x24>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4413      	add	r3, r2
 80071d0:	4a04      	ldr	r2, [pc, #16]	; (80071e4 <HAL_IncTick+0x24>)
 80071d2:	6013      	str	r3, [r2, #0]
}
 80071d4:	bf00      	nop
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	240000a4 	.word	0x240000a4
 80071e4:	24001b44 	.word	0x24001b44

080071e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80071e8:	b480      	push	{r7}
 80071ea:	af00      	add	r7, sp, #0
  return uwTick;
 80071ec:	4b03      	ldr	r3, [pc, #12]	; (80071fc <HAL_GetTick+0x14>)
 80071ee:	681b      	ldr	r3, [r3, #0]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	24001b44 	.word	0x24001b44

08007200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007208:	f7ff ffee 	bl	80071e8 <HAL_GetTick>
 800720c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007218:	d005      	beq.n	8007226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800721a:	4b0a      	ldr	r3, [pc, #40]	; (8007244 <HAL_Delay+0x44>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4413      	add	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007226:	bf00      	nop
 8007228:	f7ff ffde 	bl	80071e8 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	429a      	cmp	r2, r3
 8007236:	d8f7      	bhi.n	8007228 <HAL_Delay+0x28>
  {
  }
}
 8007238:	bf00      	nop
 800723a:	bf00      	nop
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	240000a4 	.word	0x240000a4

08007248 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007248:	b480      	push	{r7}
 800724a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800724c:	4b03      	ldr	r3, [pc, #12]	; (800725c <HAL_GetREVID+0x14>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	0c1b      	lsrs	r3, r3, #16
}
 8007252:	4618      	mov	r0, r3
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	5c001000 	.word	0x5c001000

08007260 <__NVIC_SetPriorityGrouping>:
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007270:	4b0b      	ldr	r3, [pc, #44]	; (80072a0 <__NVIC_SetPriorityGrouping+0x40>)
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800727c:	4013      	ands	r3, r2
 800727e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007288:	4b06      	ldr	r3, [pc, #24]	; (80072a4 <__NVIC_SetPriorityGrouping+0x44>)
 800728a:	4313      	orrs	r3, r2
 800728c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800728e:	4a04      	ldr	r2, [pc, #16]	; (80072a0 <__NVIC_SetPriorityGrouping+0x40>)
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	60d3      	str	r3, [r2, #12]
}
 8007294:	bf00      	nop
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	e000ed00 	.word	0xe000ed00
 80072a4:	05fa0000 	.word	0x05fa0000

080072a8 <__NVIC_GetPriorityGrouping>:
{
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072ac:	4b04      	ldr	r3, [pc, #16]	; (80072c0 <__NVIC_GetPriorityGrouping+0x18>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	0a1b      	lsrs	r3, r3, #8
 80072b2:	f003 0307 	and.w	r3, r3, #7
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	e000ed00 	.word	0xe000ed00

080072c4 <__NVIC_EnableIRQ>:
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	4603      	mov	r3, r0
 80072cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80072ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	db0b      	blt.n	80072ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072d6:	88fb      	ldrh	r3, [r7, #6]
 80072d8:	f003 021f 	and.w	r2, r3, #31
 80072dc:	4907      	ldr	r1, [pc, #28]	; (80072fc <__NVIC_EnableIRQ+0x38>)
 80072de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072e2:	095b      	lsrs	r3, r3, #5
 80072e4:	2001      	movs	r0, #1
 80072e6:	fa00 f202 	lsl.w	r2, r0, r2
 80072ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80072ee:	bf00      	nop
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	e000e100 	.word	0xe000e100

08007300 <__NVIC_SetPriority>:
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	4603      	mov	r3, r0
 8007308:	6039      	str	r1, [r7, #0]
 800730a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800730c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007310:	2b00      	cmp	r3, #0
 8007312:	db0a      	blt.n	800732a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	b2da      	uxtb	r2, r3
 8007318:	490c      	ldr	r1, [pc, #48]	; (800734c <__NVIC_SetPriority+0x4c>)
 800731a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800731e:	0112      	lsls	r2, r2, #4
 8007320:	b2d2      	uxtb	r2, r2
 8007322:	440b      	add	r3, r1
 8007324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007328:	e00a      	b.n	8007340 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	b2da      	uxtb	r2, r3
 800732e:	4908      	ldr	r1, [pc, #32]	; (8007350 <__NVIC_SetPriority+0x50>)
 8007330:	88fb      	ldrh	r3, [r7, #6]
 8007332:	f003 030f 	and.w	r3, r3, #15
 8007336:	3b04      	subs	r3, #4
 8007338:	0112      	lsls	r2, r2, #4
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	440b      	add	r3, r1
 800733e:	761a      	strb	r2, [r3, #24]
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	e000e100 	.word	0xe000e100
 8007350:	e000ed00 	.word	0xe000ed00

08007354 <NVIC_EncodePriority>:
{
 8007354:	b480      	push	{r7}
 8007356:	b089      	sub	sp, #36	; 0x24
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f003 0307 	and.w	r3, r3, #7
 8007366:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	f1c3 0307 	rsb	r3, r3, #7
 800736e:	2b04      	cmp	r3, #4
 8007370:	bf28      	it	cs
 8007372:	2304      	movcs	r3, #4
 8007374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	3304      	adds	r3, #4
 800737a:	2b06      	cmp	r3, #6
 800737c:	d902      	bls.n	8007384 <NVIC_EncodePriority+0x30>
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	3b03      	subs	r3, #3
 8007382:	e000      	b.n	8007386 <NVIC_EncodePriority+0x32>
 8007384:	2300      	movs	r3, #0
 8007386:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007388:	f04f 32ff 	mov.w	r2, #4294967295
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	fa02 f303 	lsl.w	r3, r2, r3
 8007392:	43da      	mvns	r2, r3
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	401a      	ands	r2, r3
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800739c:	f04f 31ff 	mov.w	r1, #4294967295
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	fa01 f303 	lsl.w	r3, r1, r3
 80073a6:	43d9      	mvns	r1, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073ac:	4313      	orrs	r3, r2
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3724      	adds	r7, #36	; 0x24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
	...

080073bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80073cc:	d301      	bcc.n	80073d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80073ce:	2301      	movs	r3, #1
 80073d0:	e00f      	b.n	80073f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80073d2:	4a0a      	ldr	r2, [pc, #40]	; (80073fc <SysTick_Config+0x40>)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80073da:	210f      	movs	r1, #15
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295
 80073e0:	f7ff ff8e 	bl	8007300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <SysTick_Config+0x40>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80073ea:	4b04      	ldr	r3, [pc, #16]	; (80073fc <SysTick_Config+0x40>)
 80073ec:	2207      	movs	r2, #7
 80073ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	e000e010 	.word	0xe000e010

08007400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7ff ff29 	bl	8007260 <__NVIC_SetPriorityGrouping>
}
 800740e:	bf00      	nop
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b086      	sub	sp, #24
 800741a:	af00      	add	r7, sp, #0
 800741c:	4603      	mov	r3, r0
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	607a      	str	r2, [r7, #4]
 8007422:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007424:	f7ff ff40 	bl	80072a8 <__NVIC_GetPriorityGrouping>
 8007428:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	68b9      	ldr	r1, [r7, #8]
 800742e:	6978      	ldr	r0, [r7, #20]
 8007430:	f7ff ff90 	bl	8007354 <NVIC_EncodePriority>
 8007434:	4602      	mov	r2, r0
 8007436:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800743a:	4611      	mov	r1, r2
 800743c:	4618      	mov	r0, r3
 800743e:	f7ff ff5f 	bl	8007300 <__NVIC_SetPriority>
}
 8007442:	bf00      	nop
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b082      	sub	sp, #8
 800744e:	af00      	add	r7, sp, #0
 8007450:	4603      	mov	r3, r0
 8007452:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007458:	4618      	mov	r0, r3
 800745a:	f7ff ff33 	bl	80072c4 <__NVIC_EnableIRQ>
}
 800745e:	bf00      	nop
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b082      	sub	sp, #8
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7ff ffa4 	bl	80073bc <SysTick_Config>
 8007474:	4603      	mov	r3, r0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e04f      	b.n	8007532 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d106      	bne.n	80074ac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f84e 	bl	8007548 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	4b20      	ldr	r3, [pc, #128]	; (800753c <HAL_DMA2D_Init+0xbc>)
 80074bc:	4013      	ands	r3, r2
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6851      	ldr	r1, [r2, #4]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	69d2      	ldr	r2, [r2, #28]
 80074c6:	4311      	orrs	r1, r2
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	6812      	ldr	r2, [r2, #0]
 80074cc:	430b      	orrs	r3, r1
 80074ce:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074d6:	4b1a      	ldr	r3, [pc, #104]	; (8007540 <HAL_DMA2D_Init+0xc0>)
 80074d8:	4013      	ands	r3, r2
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	6891      	ldr	r1, [r2, #8]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6992      	ldr	r2, [r2, #24]
 80074e2:	4311      	orrs	r1, r2
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	6812      	ldr	r2, [r2, #0]
 80074e8:	430b      	orrs	r3, r1
 80074ea:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074f2:	4b14      	ldr	r3, [pc, #80]	; (8007544 <HAL_DMA2D_Init+0xc4>)
 80074f4:	4013      	ands	r3, r2
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	68d1      	ldr	r1, [r2, #12]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	6812      	ldr	r2, [r2, #0]
 80074fe:	430b      	orrs	r3, r1
 8007500:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007508:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	051a      	lsls	r2, r3, #20
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	055b      	lsls	r3, r3, #21
 8007518:	431a      	orrs	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	fff8ffbf 	.word	0xfff8ffbf
 8007540:	fffffef8 	.word	0xfffffef8
 8007544:	ffff0000 	.word	0xffff0000

08007548 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af02      	add	r7, sp, #8
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
 8007568:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <HAL_DMA2D_Start+0x1c>
 8007574:	2302      	movs	r3, #2
 8007576:	e018      	b.n	80075aa <HAL_DMA2D_Start+0x4e>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	68b9      	ldr	r1, [r7, #8]
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 f9a4 	bl	80078e0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0201 	orr.w	r2, r2, #1
 80075a6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b086      	sub	sp, #24
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d056      	beq.n	800767c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80075ce:	f7ff fe0b 	bl	80071e8 <HAL_GetTick>
 80075d2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80075d4:	e04b      	b.n	800766e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d023      	beq.n	8007630 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f003 0320 	and.w	r3, r3, #32
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d005      	beq.n	80075fe <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075f6:	f043 0202 	orr.w	r2, r3, #2
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d005      	beq.n	8007614 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800760c:	f043 0201 	orr.w	r2, r3, #1
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2221      	movs	r2, #33	; 0x21
 800761a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2204      	movs	r2, #4
 8007620:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e0a5      	b.n	800777c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007636:	d01a      	beq.n	800766e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007638:	f7ff fdd6 	bl	80071e8 <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d302      	bcc.n	800764e <HAL_DMA2D_PollForTransfer+0x9c>
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10f      	bne.n	800766e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007652:	f043 0220 	orr.w	r2, r3, #32
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2203      	movs	r2, #3
 800765e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e086      	b.n	800777c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0ac      	beq.n	80075d6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	4313      	orrs	r3, r2
 8007696:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d061      	beq.n	8007762 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800769e:	f7ff fda3 	bl	80071e8 <HAL_GetTick>
 80076a2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80076a4:	e056      	b.n	8007754 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d02e      	beq.n	8007716 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f003 0308 	and.w	r3, r3, #8
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d005      	beq.n	80076ce <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076c6:	f043 0204 	orr.w	r2, r3, #4
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f003 0320 	and.w	r3, r3, #32
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076dc:	f043 0202 	orr.w	r2, r3, #2
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d005      	beq.n	80076fa <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076f2:	f043 0201 	orr.w	r2, r3, #1
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2229      	movs	r2, #41	; 0x29
 8007700:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2204      	movs	r2, #4
 8007706:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e032      	b.n	800777c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771c:	d01a      	beq.n	8007754 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800771e:	f7ff fd63 	bl	80071e8 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	429a      	cmp	r2, r3
 800772c:	d302      	bcc.n	8007734 <HAL_DMA2D_PollForTransfer+0x182>
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10f      	bne.n	8007754 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007738:	f043 0220 	orr.w	r2, r3, #32
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2203      	movs	r2, #3
 8007744:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e013      	b.n	800777c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f003 0310 	and.w	r3, r3, #16
 800775e:	2b00      	cmp	r3, #0
 8007760:	d0a1      	beq.n	80076a6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2212      	movs	r2, #18
 8007768:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007784:	b480      	push	{r7}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d101      	bne.n	80077a8 <HAL_DMA2D_ConfigLayer+0x24>
 80077a4:	2302      	movs	r3, #2
 80077a6:	e092      	b.n	80078ce <HAL_DMA2D_ConfigLayer+0x14a>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	4613      	mov	r3, r2
 80077bc:	00db      	lsls	r3, r3, #3
 80077be:	1a9b      	subs	r3, r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	3328      	adds	r3, #40	; 0x28
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	4413      	add	r3, r2
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	041b      	lsls	r3, r3, #16
 80077d4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80077dc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80077e4:	4313      	orrs	r3, r2
 80077e6:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80077e8:	4b3c      	ldr	r3, [pc, #240]	; (80078dc <HAL_DMA2D_ConfigLayer+0x158>)
 80077ea:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	2b0a      	cmp	r3, #10
 80077f2:	d003      	beq.n	80077fc <HAL_DMA2D_ConfigLayer+0x78>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	2b09      	cmp	r3, #9
 80077fa:	d107      	bne.n	800780c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	4313      	orrs	r3, r2
 8007808:	613b      	str	r3, [r7, #16]
 800780a:	e005      	b.n	8007818 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	061b      	lsls	r3, r3, #24
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	4313      	orrs	r3, r2
 8007816:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d120      	bne.n	8007860 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	43db      	mvns	r3, r3
 8007828:	ea02 0103 	and.w	r1, r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	430a      	orrs	r2, r1
 8007834:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	6812      	ldr	r2, [r2, #0]
 800783e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	2b0a      	cmp	r3, #10
 8007846:	d003      	beq.n	8007850 <HAL_DMA2D_ConfigLayer+0xcc>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	2b09      	cmp	r3, #9
 800784e:	d135      	bne.n	80078bc <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	68da      	ldr	r2, [r3, #12]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800785c:	629a      	str	r2, [r3, #40]	; 0x28
 800785e:	e02d      	b.n	80078bc <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	2b0b      	cmp	r3, #11
 8007866:	d109      	bne.n	800787c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	049b      	lsls	r3, r3, #18
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	4313      	orrs	r3, r2
 8007872:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800787a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	69da      	ldr	r2, [r3, #28]
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	43db      	mvns	r3, r3
 8007886:	ea02 0103 	and.w	r1, r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	430a      	orrs	r2, r1
 8007892:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	6812      	ldr	r2, [r2, #0]
 800789c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	2b0a      	cmp	r3, #10
 80078a4:	d003      	beq.n	80078ae <HAL_DMA2D_ConfigLayer+0x12a>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	2b09      	cmp	r3, #9
 80078ac:	d106      	bne.n	80078bc <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	68da      	ldr	r2, [r3, #12]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80078ba:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	371c      	adds	r7, #28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	ff33000f 	.word	0xff33000f

080078e0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b08b      	sub	sp, #44	; 0x2c
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	041a      	lsls	r2, r3, #16
 80078fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fe:	431a      	orrs	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	430a      	orrs	r2, r1
 8007906:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007918:	d174      	bne.n	8007a04 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007920:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007928:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007930:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d108      	bne.n	8007952 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007940:	69ba      	ldr	r2, [r7, #24]
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	431a      	orrs	r2, r3
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	4313      	orrs	r3, r2
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	4313      	orrs	r3, r2
 800794e:	627b      	str	r3, [r7, #36]	; 0x24
 8007950:	e053      	b.n	80079fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d106      	bne.n	8007968 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800795a:	69ba      	ldr	r2, [r7, #24]
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	4313      	orrs	r3, r2
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	4313      	orrs	r3, r2
 8007964:	627b      	str	r3, [r7, #36]	; 0x24
 8007966:	e048      	b.n	80079fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	2b02      	cmp	r3, #2
 800796e:	d111      	bne.n	8007994 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	0cdb      	lsrs	r3, r3, #19
 8007974:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	0a9b      	lsrs	r3, r3, #10
 800797a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	08db      	lsrs	r3, r3, #3
 8007980:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	02db      	lsls	r3, r3, #11
 800798a:	4313      	orrs	r3, r2
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	4313      	orrs	r3, r2
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
 8007992:	e032      	b.n	80079fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	2b03      	cmp	r3, #3
 800799a:	d117      	bne.n	80079cc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800799c:	6a3b      	ldr	r3, [r7, #32]
 800799e:	0fdb      	lsrs	r3, r3, #31
 80079a0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	0cdb      	lsrs	r3, r3, #19
 80079a6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	0adb      	lsrs	r3, r3, #11
 80079ac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	08db      	lsrs	r3, r3, #3
 80079b2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	029b      	lsls	r3, r3, #10
 80079bc:	431a      	orrs	r2, r3
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	03db      	lsls	r3, r3, #15
 80079c2:	4313      	orrs	r3, r2
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	627b      	str	r3, [r7, #36]	; 0x24
 80079ca:	e016      	b.n	80079fa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	0f1b      	lsrs	r3, r3, #28
 80079d0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	0d1b      	lsrs	r3, r3, #20
 80079d6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	0b1b      	lsrs	r3, r3, #12
 80079dc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	091b      	lsrs	r3, r3, #4
 80079e2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	011a      	lsls	r2, r3, #4
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	021b      	lsls	r3, r3, #8
 80079ec:	431a      	orrs	r2, r3
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	031b      	lsls	r3, r3, #12
 80079f2:	4313      	orrs	r3, r2
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a00:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007a02:	e00d      	b.n	8007a20 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a0c:	d104      	bne.n	8007a18 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	615a      	str	r2, [r3, #20]
}
 8007a16:	e003      	b.n	8007a20 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	60da      	str	r2, [r3, #12]
}
 8007a20:	bf00      	nop
 8007a22:	372c      	adds	r7, #44	; 0x2c
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
 8007a38:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	019a      	lsls	r2, r3, #6
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	431a      	orrs	r2, r3
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	021b      	lsls	r3, r3, #8
 8007a46:	431a      	orrs	r2, r3
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	041b      	lsls	r3, r3, #16
 8007a4c:	431a      	orrs	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8007a52:	bf00      	nop
 8007a54:	3714      	adds	r7, #20
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b086      	sub	sp, #24
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	607a      	str	r2, [r7, #4]
 8007a6a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a6c:	f7ff fbbc 	bl	80071e8 <HAL_GetTick>
 8007a70:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007a72:	e009      	b.n	8007a88 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007a74:	f7ff fbb8 	bl	80071e8 <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a82:	d901      	bls.n	8007a88 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e015      	b.n	8007ab4 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d0ee      	beq.n	8007a74 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	019a      	lsls	r2, r3, #6
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	021b      	lsls	r3, r3, #8
 8007aa2:	ea42 0103 	orr.w	r1, r2, r3
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	041a      	lsls	r2, r3, #16
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3718      	adds	r7, #24
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e109      	b.n	8007ce4 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	7c5b      	ldrb	r3, [r3, #17]
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d102      	bne.n	8007ae0 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f90a 	bl	8007cf4 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2203      	movs	r2, #3
 8007ae4:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	613b      	str	r3, [r7, #16]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007afa:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8007b06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b0a:	613b      	str	r3, [r7, #16]
 8007b0c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b0e:	f7ff fb6b 	bl	80071e8 <HAL_GetTick>
 8007b12:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8007b14:	e009      	b.n	8007b2a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007b16:	f7ff fb67 	bl	80071e8 <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b24:	d901      	bls.n	8007b2a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e0dc      	b.n	8007ce4 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007b32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d0ed      	beq.n	8007b16 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	4b69      	ldr	r3, [pc, #420]	; (8007cec <HAL_DSI_Init+0x230>)
 8007b48:	400b      	ands	r3, r1
 8007b4a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007b62:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8007b6a:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8007b76:	2300      	movs	r3, #0
 8007b78:	60fb      	str	r3, [r7, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f042 0201 	orr.w	r2, r2, #1
 8007b8a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	60fb      	str	r3, [r7, #12]
 8007b9c:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8007b9e:	2001      	movs	r0, #1
 8007ba0:	f7ff fb2e 	bl	8007200 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ba4:	f7ff fb20 	bl	80071e8 <HAL_GetTick>
 8007ba8:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8007baa:	e009      	b.n	8007bc0 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007bac:	f7ff fb1c 	bl	80071e8 <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bba:	d901      	bls.n	8007bc0 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e091      	b.n	8007ce4 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d0ed      	beq.n	8007bac <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f042 0206 	orr.w	r2, r2, #6
 8007be0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 0203 	bic.w	r2, r2, #3
 8007bf4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	431a      	orrs	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 0201 	orr.w	r2, r2, #1
 8007c0e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0203 	bic.w	r2, r2, #3
 8007c22:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	430a      	orrs	r2, r1
 8007c38:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689a      	ldr	r2, [r3, #8]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007c4a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6899      	ldr	r1, [r3, #8]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	689a      	ldr	r2, [r3, #8]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d002      	beq.n	8007c6c <HAL_DSI_Init+0x1b0>
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	e000      	b.n	8007c6e <HAL_DSI_Init+0x1b2>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	4a1f      	ldr	r2, [pc, #124]	; (8007cf0 <HAL_DSI_Init+0x234>)
 8007c74:	fb03 f202 	mul.w	r2, r3, r2
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f003 0303 	and.w	r3, r3, #3
 8007c80:	409a      	lsls	r2, r3
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8007c8a:	fb01 f303 	mul.w	r3, r1, r3
 8007c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c92:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8007ca4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3720      	adds	r7, #32
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	fffc8603 	.word	0xfffc8603
 8007cf0:	003d0900 	.word	0x003d0900

08007cf4 <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	7c1b      	ldrb	r3, [r3, #16]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d101      	bne.n	8007d1e <HAL_DSI_ConfigVideoMode+0x16>
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	e1ee      	b.n	80080fc <HAL_DSI_ConfigVideoMode+0x3f4>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0201 	bic.w	r2, r2, #1
 8007d32:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f022 0201 	bic.w	r2, r2, #1
 8007d44:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f022 0203 	bic.w	r2, r2, #3
 8007d56:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	68da      	ldr	r2, [r3, #12]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	430a      	orrs	r2, r1
 8007d68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	4b8b      	ldr	r3, [pc, #556]	; (8007fa4 <HAL_DSI_ConfigVideoMode+0x29c>)
 8007d76:	400b      	ands	r3, r1
 8007d78:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	691a      	ldr	r2, [r3, #16]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	4b84      	ldr	r3, [pc, #528]	; (8007fa8 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8007d98:	400b      	ands	r3, r1
 8007d9a:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	695a      	ldr	r2, [r3, #20]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	4b7b      	ldr	r3, [pc, #492]	; (8007fa8 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8007dba:	400b      	ands	r3, r1
 8007dbc:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	699a      	ldr	r2, [r3, #24]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68da      	ldr	r2, [r3, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 0203 	bic.w	r2, r2, #3
 8007dde:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68d9      	ldr	r1, [r3, #12]
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	430a      	orrs	r2, r1
 8007df0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	695a      	ldr	r2, [r3, #20]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f022 0207 	bic.w	r2, r2, #7
 8007e00:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	6959      	ldr	r1, [r3, #20]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	6a1b      	ldr	r3, [r3, #32]
 8007e10:	431a      	orrs	r2, r3
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	431a      	orrs	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	691a      	ldr	r2, [r3, #16]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 020f 	bic.w	r2, r2, #15
 8007e2e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6919      	ldr	r1, [r3, #16]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f022 020e 	bic.w	r2, r2, #14
 8007e52:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	005a      	lsls	r2, r3, #1
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	d110      	bne.n	8007e98 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	691a      	ldr	r2, [r3, #16]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e84:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6919      	ldr	r1, [r3, #16]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	689a      	ldr	r2, [r3, #8]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	4b42      	ldr	r3, [pc, #264]	; (8007fac <HAL_DSI_ConfigVideoMode+0x2a4>)
 8007ea4:	400b      	ands	r3, r1
 8007ea6:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	4b39      	ldr	r3, [pc, #228]	; (8007fac <HAL_DSI_ConfigVideoMode+0x2a4>)
 8007ec6:	400b      	ands	r3, r1
 8007ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	4b32      	ldr	r3, [pc, #200]	; (8007fb0 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8007ee8:	400b      	ands	r3, r1
 8007eea:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	4b2a      	ldr	r3, [pc, #168]	; (8007fb4 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8007f0a:	400b      	ands	r3, r1
 8007f0c:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	4b22      	ldr	r3, [pc, #136]	; (8007fb4 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8007f2c:	400b      	ands	r3, r1
 8007f2e:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	4b19      	ldr	r3, [pc, #100]	; (8007fb4 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8007f4e:	400b      	ands	r3, r1
 8007f50:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <HAL_DSI_ConfigVideoMode+0x29c>)
 8007f70:	400b      	ands	r3, r1
 8007f72:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f94:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fa0:	e00a      	b.n	8007fb8 <HAL_DSI_ConfigVideoMode+0x2b0>
 8007fa2:	bf00      	nop
 8007fa4:	ffffc000 	.word	0xffffc000
 8007fa8:	ffffe000 	.word	0xffffe000
 8007fac:	fffff000 	.word	0xfffff000
 8007fb0:	ffff8000 	.word	0xffff8000
 8007fb4:	fffffc00 	.word	0xfffffc00
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	699a      	ldr	r2, [r3, #24]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8007fce:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6999      	ldr	r1, [r3, #24]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fda:	041a      	lsls	r2, r3, #16
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	699a      	ldr	r2, [r3, #24]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007ff2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6999      	ldr	r1, [r3, #24]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008014:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008036:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	430a      	orrs	r2, r1
 8008048:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008058:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	430a      	orrs	r2, r1
 800806a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800807a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800809c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	430a      	orrs	r2, r1
 80080ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080be:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	430a      	orrs	r2, r1
 80080d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80080e0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	430a      	orrs	r2, r1
 80080f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	7c1b      	ldrb	r3, [r3, #16]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d101      	bne.n	800811e <HAL_DSI_ConfigFlowControl+0x16>
 800811a:	2302      	movs	r3, #2
 800811c:	e016      	b.n	800814c <HAL_DSI_ConfigFlowControl+0x44>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 021f 	bic.w	r2, r2, #31
 8008132:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	430a      	orrs	r2, r1
 8008142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	7c1b      	ldrb	r3, [r3, #16]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d101      	bne.n	800816c <HAL_DSI_Start+0x14>
 8008168:	2302      	movs	r3, #2
 800816a:	e02b      	b.n	80081c4 <HAL_DSI_Start+0x6c>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8008172:	2300      	movs	r3, #0
 8008174:	60fb      	str	r3, [r7, #12]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f042 0201 	orr.w	r2, r2, #1
 8008184:	605a      	str	r2, [r3, #4]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8008194:	2300      	movs	r3, #0
 8008196:	60bb      	str	r3, [r7, #8]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f042 0208 	orr.w	r2, r2, #8
 80081a8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081b4:	f003 0308 	and.w	r3, r3, #8
 80081b8:	60bb      	str	r3, [r7, #8]
 80081ba:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	af02      	add	r7, sp, #8
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
 80081dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	7c1b      	ldrb	r3, [r3, #16]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d101      	bne.n	80081ea <HAL_DSI_ShortWrite+0x1a>
 80081e6:	2302      	movs	r3, #2
 80081e8:	e010      	b.n	800820c <HAL_DSI_ShortWrite+0x3c>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	68b9      	ldr	r1, [r7, #8]
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f7ff fc2f 	bl	8007a5e <DSI_ShortWrite>
 8008200:	4603      	mov	r3, r0
 8008202:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	741a      	strb	r2, [r3, #16]

  return status;
 800820a:	7dfb      	ldrb	r3, [r7, #23]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b08c      	sub	sp, #48	; 0x30
 8008218:	af02      	add	r7, sp, #8
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
 8008220:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8008222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008224:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	7c1b      	ldrb	r3, [r3, #16]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d101      	bne.n	8008232 <HAL_DSI_LongWrite+0x1e>
 800822e:	2302      	movs	r3, #2
 8008230:	e084      	b.n	800833c <HAL_DSI_LongWrite+0x128>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2201      	movs	r2, #1
 8008236:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8008238:	f7fe ffd6 	bl	80071e8 <HAL_GetTick>
 800823c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800823e:	e00c      	b.n	800825a <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008240:	f7fe ffd2 	bl	80071e8 <HAL_GetTick>
 8008244:	4602      	mov	r2, r0
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800824e:	d904      	bls.n	800825a <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e070      	b.n	800833c <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b00      	cmp	r3, #0
 8008266:	d0eb      	beq.n	8008240 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8008268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826a:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b03      	cmp	r3, #3
 8008270:	bf28      	it	cs
 8008272:	2303      	movcs	r3, #3
 8008274:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8008276:	2300      	movs	r3, #0
 8008278:	623b      	str	r3, [r7, #32]
 800827a:	e00f      	b.n	800829c <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800827c:	69ba      	ldr	r2, [r7, #24]
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	4413      	add	r3, r2
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	461a      	mov	r2, r3
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	3301      	adds	r3, #1
 800828a:	00db      	lsls	r3, r3, #3
 800828c:	fa02 f303 	lsl.w	r3, r2, r3
 8008290:	69fa      	ldr	r2, [r7, #28]
 8008292:	4313      	orrs	r3, r2
 8008294:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8008296:	6a3b      	ldr	r3, [r7, #32]
 8008298:	3301      	adds	r3, #1
 800829a:	623b      	str	r3, [r7, #32]
 800829c:	6a3a      	ldr	r2, [r7, #32]
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d3eb      	bcc.n	800827c <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	69fa      	ldr	r2, [r7, #28]
 80082aa:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	4413      	add	r3, r2
 80082ba:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80082bc:	e028      	b.n	8008310 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	2b04      	cmp	r3, #4
 80082c2:	bf28      	it	cs
 80082c4:	2304      	movcs	r3, #4
 80082c6:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80082c8:	2300      	movs	r3, #0
 80082ca:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80082cc:	2300      	movs	r3, #0
 80082ce:	623b      	str	r3, [r7, #32]
 80082d0:	e00e      	b.n	80082f0 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	6a3b      	ldr	r3, [r7, #32]
 80082d6:	4413      	add	r3, r2
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	fa02 f303 	lsl.w	r3, r2, r3
 80082e4:	69fa      	ldr	r2, [r7, #28]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	3301      	adds	r3, #1
 80082ee:	623b      	str	r3, [r7, #32]
 80082f0:	6a3a      	ldr	r2, [r7, #32]
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d3ec      	bcc.n	80082d2 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	69fa      	ldr	r2, [r7, #28]
 80082fe:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8008300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	4413      	add	r3, r2
 800830e:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1d3      	bne.n	80082be <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800831e:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	3301      	adds	r3, #1
 8008324:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8008326:	b2db      	uxtb	r3, r3
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	4613      	mov	r3, r2
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	68b9      	ldr	r1, [r7, #8]
 8008330:	f7ff fb7c 	bl	8007a2c <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3728      	adds	r7, #40	; 0x28
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08c      	sub	sp, #48	; 0x30
 8008348:	af02      	add	r7, sp, #8
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
 8008350:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint8_t *pdata = Array;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t datasize = Size;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	623b      	str	r3, [r7, #32]
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	7c1b      	ldrb	r3, [r3, #16]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d101      	bne.n	8008366 <HAL_DSI_Read+0x22>
 8008362:	2302      	movs	r3, #2
 8008364:	e0ae      	b.n	80084c4 <HAL_DSI_Read+0x180>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2201      	movs	r2, #1
 800836a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800836c:	6a3b      	ldr	r3, [r7, #32]
 800836e:	2b02      	cmp	r3, #2
 8008370:	d913      	bls.n	800839a <HAL_DSI_Read+0x56>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	b2da      	uxtb	r2, r3
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
 8008376:	6a3b      	ldr	r3, [r7, #32]
 8008378:	0a1b      	lsrs	r3, r3, #8
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800837a:	b2db      	uxtb	r3, r3
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	4613      	mov	r3, r2
 8008380:	2237      	movs	r2, #55	; 0x37
 8008382:	68b9      	ldr	r1, [r7, #8]
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f7ff fb6a 	bl	8007a5e <DSI_ShortWrite>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d004      	beq.n	800839a <HAL_DSI_Read+0x56>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e094      	b.n	80084c4 <HAL_DSI_Read+0x180>
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800839a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839c:	2b06      	cmp	r3, #6
 800839e:	d109      	bne.n	80083b4 <HAL_DSI_Read+0x70>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6818      	ldr	r0, [r3, #0]
 80083a4:	2300      	movs	r3, #0
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ac:	68b9      	ldr	r1, [r7, #8]
 80083ae:	f7ff fb3d 	bl	8007a2c <DSI_ConfigPacketHeader>
 80083b2:	e033      	b.n	800841c <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 80083b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b6:	2b04      	cmp	r3, #4
 80083b8:	d109      	bne.n	80083ce <HAL_DSI_Read+0x8a>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6818      	ldr	r0, [r3, #0]
 80083be:	2300      	movs	r3, #0
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	2300      	movs	r3, #0
 80083c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083c6:	68b9      	ldr	r1, [r7, #8]
 80083c8:	f7ff fb30 	bl	8007a2c <DSI_ConfigPacketHeader>
 80083cc:	e026      	b.n	800841c <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 80083ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d0:	2b14      	cmp	r3, #20
 80083d2:	d10c      	bne.n	80083ee <HAL_DSI_Read+0xaa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6818      	ldr	r0, [r3, #0]
 80083d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	461a      	mov	r2, r3
 80083de:	2300      	movs	r3, #0
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	4613      	mov	r3, r2
 80083e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083e6:	68b9      	ldr	r1, [r7, #8]
 80083e8:	f7ff fb20 	bl	8007a2c <DSI_ConfigPacketHeader>
 80083ec:	e016      	b.n	800841c <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 80083ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f0:	2b24      	cmp	r3, #36	; 0x24
 80083f2:	d10e      	bne.n	8008412 <HAL_DSI_Read+0xce>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6818      	ldr	r0, [r3, #0]
 80083f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	461a      	mov	r2, r3
 80083fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008400:	3301      	adds	r3, #1
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	4613      	mov	r3, r2
 8008408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800840a:	68b9      	ldr	r1, [r7, #8]
 800840c:	f7ff fb0e 	bl	8007a2c <DSI_ConfigPacketHeader>
 8008410:	e004      	b.n	800841c <HAL_DSI_Read+0xd8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e053      	b.n	80084c4 <HAL_DSI_Read+0x180>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800841c:	f7fe fee4 	bl	80071e8 <HAL_GetTick>
 8008420:	61b8      	str	r0, [r7, #24]

  /* If DSI fifo is not empty, read requested bytes */
  while (((int32_t)(datasize)) > 0)
 8008422:	e048      	b.n	80084b6 <HAL_DSI_Read+0x172>
  {
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800842a:	f003 0310 	and.w	r3, r3, #16
 800842e:	2b00      	cmp	r3, #0
 8008430:	d120      	bne.n	8008474 <HAL_DSI_Read+0x130>
    {
      fifoword = hdsi->Instance->GPDR;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008438:	617b      	str	r3, [r7, #20]
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800843a:	6a3b      	ldr	r3, [r7, #32]
 800843c:	2b04      	cmp	r3, #4
 800843e:	bf28      	it	cs
 8008440:	2304      	movcs	r3, #4
 8008442:	613b      	str	r3, [r7, #16]

      for (count = 0U; count < nbbytes; count++)
 8008444:	2300      	movs	r3, #0
 8008446:	61fb      	str	r3, [r7, #28]
 8008448:	e010      	b.n	800846c <HAL_DSI_Read+0x128>
      {
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	00db      	lsls	r3, r3, #3
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	fa22 f303 	lsr.w	r3, r2, r3
 8008454:	b2da      	uxtb	r2, r3
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	701a      	strb	r2, [r3, #0]
        pdata++;
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	3301      	adds	r3, #1
 800845e:	627b      	str	r3, [r7, #36]	; 0x24
        datasize--;
 8008460:	6a3b      	ldr	r3, [r7, #32]
 8008462:	3b01      	subs	r3, #1
 8008464:	623b      	str	r3, [r7, #32]
      for (count = 0U; count < nbbytes; count++)
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	3301      	adds	r3, #1
 800846a:	61fb      	str	r3, [r7, #28]
 800846c:	69fa      	ldr	r2, [r7, #28]
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	429a      	cmp	r2, r3
 8008472:	d3ea      	bcc.n	800844a <HAL_DSI_Read+0x106>
      }
    }

    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008474:	f7fe feb8 	bl	80071e8 <HAL_GetTick>
 8008478:	4602      	mov	r2, r0
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008482:	d904      	bls.n	800848e <HAL_DSI_Read+0x14a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e01a      	b.n	80084c4 <HAL_DSI_Read+0x180>

    /* Software workaround to avoid HAL_TIMEOUT when a DSI read command is   */
    /* issued to the panel and the read data is not captured by the DSI Host */
    /* which returns Packet Size Error.                                      */
    /* Need to ensure that the Read command has finished before checking PSE */
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10c      	bne.n	80084b6 <HAL_DSI_Read+0x172>
    {
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80084a4:	f003 0320 	and.w	r3, r3, #32
 80084a8:	2b20      	cmp	r3, #32
 80084aa:	d104      	bne.n	80084b6 <HAL_DSI_Read+0x172>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	741a      	strb	r2, [r3, #16]

        return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e006      	b.n	80084c4 <HAL_DSI_Read+0x180>
  while (((int32_t)(datasize)) > 0)
 80084b6:	6a3b      	ldr	r3, [r7, #32]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	dcb3      	bgt.n	8008424 <HAL_DSI_Read+0xe0>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3728      	adds	r7, #40	; 0x28
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80084cc:	b480      	push	{r7}
 80084ce:	b087      	sub	sp, #28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	460b      	mov	r3, r1
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e00a      	b.n	80084fe <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80084e8:	7afb      	ldrb	r3, [r7, #11]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d103      	bne.n	80084f6 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	605a      	str	r2, [r3, #4]
      break;
 80084f4:	e002      	b.n	80084fc <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	75fb      	strb	r3, [r7, #23]
      break;
 80084fa:	bf00      	nop
  }

  return status;
 80084fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	371c      	adds	r7, #28
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800850a:	b480      	push	{r7}
 800850c:	b083      	sub	sp, #12
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e003      	b.n	8008526 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008524:	2300      	movs	r3, #0
  }
}
 8008526:	4618      	mov	r0, r3
 8008528:	370c      	adds	r7, #12
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
	...

08008534 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008534:	b480      	push	{r7}
 8008536:	b089      	sub	sp, #36	; 0x24
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800853e:	2300      	movs	r3, #0
 8008540:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008542:	4b89      	ldr	r3, [pc, #548]	; (8008768 <HAL_GPIO_Init+0x234>)
 8008544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008546:	e194      	b.n	8008872 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	2101      	movs	r1, #1
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	fa01 f303 	lsl.w	r3, r1, r3
 8008554:	4013      	ands	r3, r2
 8008556:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 8186 	beq.w	800886c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	f003 0303 	and.w	r3, r3, #3
 8008568:	2b01      	cmp	r3, #1
 800856a:	d005      	beq.n	8008578 <HAL_GPIO_Init+0x44>
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	f003 0303 	and.w	r3, r3, #3
 8008574:	2b02      	cmp	r3, #2
 8008576:	d130      	bne.n	80085da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	005b      	lsls	r3, r3, #1
 8008582:	2203      	movs	r2, #3
 8008584:	fa02 f303 	lsl.w	r3, r2, r3
 8008588:	43db      	mvns	r3, r3
 800858a:	69ba      	ldr	r2, [r7, #24]
 800858c:	4013      	ands	r3, r2
 800858e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	005b      	lsls	r3, r3, #1
 8008598:	fa02 f303 	lsl.w	r3, r2, r3
 800859c:	69ba      	ldr	r2, [r7, #24]
 800859e:	4313      	orrs	r3, r2
 80085a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	69ba      	ldr	r2, [r7, #24]
 80085a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80085ae:	2201      	movs	r2, #1
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	fa02 f303 	lsl.w	r3, r2, r3
 80085b6:	43db      	mvns	r3, r3
 80085b8:	69ba      	ldr	r2, [r7, #24]
 80085ba:	4013      	ands	r3, r2
 80085bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	091b      	lsrs	r3, r3, #4
 80085c4:	f003 0201 	and.w	r2, r3, #1
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	fa02 f303 	lsl.w	r3, r2, r3
 80085ce:	69ba      	ldr	r2, [r7, #24]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	69ba      	ldr	r2, [r7, #24]
 80085d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f003 0303 	and.w	r3, r3, #3
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	d017      	beq.n	8008616 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	005b      	lsls	r3, r3, #1
 80085f0:	2203      	movs	r2, #3
 80085f2:	fa02 f303 	lsl.w	r3, r2, r3
 80085f6:	43db      	mvns	r3, r3
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	4013      	ands	r3, r2
 80085fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	689a      	ldr	r2, [r3, #8]
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	005b      	lsls	r3, r3, #1
 8008606:	fa02 f303 	lsl.w	r3, r2, r3
 800860a:	69ba      	ldr	r2, [r7, #24]
 800860c:	4313      	orrs	r3, r2
 800860e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f003 0303 	and.w	r3, r3, #3
 800861e:	2b02      	cmp	r3, #2
 8008620:	d123      	bne.n	800866a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	08da      	lsrs	r2, r3, #3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3208      	adds	r2, #8
 800862a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	f003 0307 	and.w	r3, r3, #7
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	220f      	movs	r2, #15
 800863a:	fa02 f303 	lsl.w	r3, r2, r3
 800863e:	43db      	mvns	r3, r3
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	4013      	ands	r3, r2
 8008644:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	691a      	ldr	r2, [r3, #16]
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	fa02 f303 	lsl.w	r3, r2, r3
 8008656:	69ba      	ldr	r2, [r7, #24]
 8008658:	4313      	orrs	r3, r2
 800865a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	08da      	lsrs	r2, r3, #3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	3208      	adds	r2, #8
 8008664:	69b9      	ldr	r1, [r7, #24]
 8008666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	005b      	lsls	r3, r3, #1
 8008674:	2203      	movs	r2, #3
 8008676:	fa02 f303 	lsl.w	r3, r2, r3
 800867a:	43db      	mvns	r3, r3
 800867c:	69ba      	ldr	r2, [r7, #24]
 800867e:	4013      	ands	r3, r2
 8008680:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f003 0203 	and.w	r2, r3, #3
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	005b      	lsls	r3, r3, #1
 800868e:	fa02 f303 	lsl.w	r3, r2, r3
 8008692:	69ba      	ldr	r2, [r7, #24]
 8008694:	4313      	orrs	r3, r2
 8008696:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	69ba      	ldr	r2, [r7, #24]
 800869c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f000 80e0 	beq.w	800886c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086ac:	4b2f      	ldr	r3, [pc, #188]	; (800876c <HAL_GPIO_Init+0x238>)
 80086ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80086b2:	4a2e      	ldr	r2, [pc, #184]	; (800876c <HAL_GPIO_Init+0x238>)
 80086b4:	f043 0302 	orr.w	r3, r3, #2
 80086b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80086bc:	4b2b      	ldr	r3, [pc, #172]	; (800876c <HAL_GPIO_Init+0x238>)
 80086be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80086c2:	f003 0302 	and.w	r3, r3, #2
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80086ca:	4a29      	ldr	r2, [pc, #164]	; (8008770 <HAL_GPIO_Init+0x23c>)
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	089b      	lsrs	r3, r3, #2
 80086d0:	3302      	adds	r3, #2
 80086d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	f003 0303 	and.w	r3, r3, #3
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	220f      	movs	r2, #15
 80086e2:	fa02 f303 	lsl.w	r3, r2, r3
 80086e6:	43db      	mvns	r3, r3
 80086e8:	69ba      	ldr	r2, [r7, #24]
 80086ea:	4013      	ands	r3, r2
 80086ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a20      	ldr	r2, [pc, #128]	; (8008774 <HAL_GPIO_Init+0x240>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d052      	beq.n	800879c <HAL_GPIO_Init+0x268>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a1f      	ldr	r2, [pc, #124]	; (8008778 <HAL_GPIO_Init+0x244>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d031      	beq.n	8008762 <HAL_GPIO_Init+0x22e>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a1e      	ldr	r2, [pc, #120]	; (800877c <HAL_GPIO_Init+0x248>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d02b      	beq.n	800875e <HAL_GPIO_Init+0x22a>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a1d      	ldr	r2, [pc, #116]	; (8008780 <HAL_GPIO_Init+0x24c>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d025      	beq.n	800875a <HAL_GPIO_Init+0x226>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a1c      	ldr	r2, [pc, #112]	; (8008784 <HAL_GPIO_Init+0x250>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d01f      	beq.n	8008756 <HAL_GPIO_Init+0x222>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a1b      	ldr	r2, [pc, #108]	; (8008788 <HAL_GPIO_Init+0x254>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d019      	beq.n	8008752 <HAL_GPIO_Init+0x21e>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a1a      	ldr	r2, [pc, #104]	; (800878c <HAL_GPIO_Init+0x258>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d013      	beq.n	800874e <HAL_GPIO_Init+0x21a>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a19      	ldr	r2, [pc, #100]	; (8008790 <HAL_GPIO_Init+0x25c>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d00d      	beq.n	800874a <HAL_GPIO_Init+0x216>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a18      	ldr	r2, [pc, #96]	; (8008794 <HAL_GPIO_Init+0x260>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d007      	beq.n	8008746 <HAL_GPIO_Init+0x212>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a17      	ldr	r2, [pc, #92]	; (8008798 <HAL_GPIO_Init+0x264>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d101      	bne.n	8008742 <HAL_GPIO_Init+0x20e>
 800873e:	2309      	movs	r3, #9
 8008740:	e02d      	b.n	800879e <HAL_GPIO_Init+0x26a>
 8008742:	230a      	movs	r3, #10
 8008744:	e02b      	b.n	800879e <HAL_GPIO_Init+0x26a>
 8008746:	2308      	movs	r3, #8
 8008748:	e029      	b.n	800879e <HAL_GPIO_Init+0x26a>
 800874a:	2307      	movs	r3, #7
 800874c:	e027      	b.n	800879e <HAL_GPIO_Init+0x26a>
 800874e:	2306      	movs	r3, #6
 8008750:	e025      	b.n	800879e <HAL_GPIO_Init+0x26a>
 8008752:	2305      	movs	r3, #5
 8008754:	e023      	b.n	800879e <HAL_GPIO_Init+0x26a>
 8008756:	2304      	movs	r3, #4
 8008758:	e021      	b.n	800879e <HAL_GPIO_Init+0x26a>
 800875a:	2303      	movs	r3, #3
 800875c:	e01f      	b.n	800879e <HAL_GPIO_Init+0x26a>
 800875e:	2302      	movs	r3, #2
 8008760:	e01d      	b.n	800879e <HAL_GPIO_Init+0x26a>
 8008762:	2301      	movs	r3, #1
 8008764:	e01b      	b.n	800879e <HAL_GPIO_Init+0x26a>
 8008766:	bf00      	nop
 8008768:	58000080 	.word	0x58000080
 800876c:	58024400 	.word	0x58024400
 8008770:	58000400 	.word	0x58000400
 8008774:	58020000 	.word	0x58020000
 8008778:	58020400 	.word	0x58020400
 800877c:	58020800 	.word	0x58020800
 8008780:	58020c00 	.word	0x58020c00
 8008784:	58021000 	.word	0x58021000
 8008788:	58021400 	.word	0x58021400
 800878c:	58021800 	.word	0x58021800
 8008790:	58021c00 	.word	0x58021c00
 8008794:	58022000 	.word	0x58022000
 8008798:	58022400 	.word	0x58022400
 800879c:	2300      	movs	r3, #0
 800879e:	69fa      	ldr	r2, [r7, #28]
 80087a0:	f002 0203 	and.w	r2, r2, #3
 80087a4:	0092      	lsls	r2, r2, #2
 80087a6:	4093      	lsls	r3, r2
 80087a8:	69ba      	ldr	r2, [r7, #24]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80087ae:	4938      	ldr	r1, [pc, #224]	; (8008890 <HAL_GPIO_Init+0x35c>)
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	089b      	lsrs	r3, r3, #2
 80087b4:	3302      	adds	r3, #2
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80087bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	43db      	mvns	r3, r3
 80087c8:	69ba      	ldr	r2, [r7, #24]
 80087ca:	4013      	ands	r3, r2
 80087cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80087da:	69ba      	ldr	r2, [r7, #24]
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	4313      	orrs	r3, r2
 80087e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80087e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80087ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	43db      	mvns	r3, r3
 80087f6:	69ba      	ldr	r2, [r7, #24]
 80087f8:	4013      	ands	r3, r2
 80087fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d003      	beq.n	8008810 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008808:	69ba      	ldr	r2, [r7, #24]
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	4313      	orrs	r3, r2
 800880e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008810:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	43db      	mvns	r3, r3
 8008822:	69ba      	ldr	r2, [r7, #24]
 8008824:	4013      	ands	r3, r2
 8008826:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d003      	beq.n	800883c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008834:	69ba      	ldr	r2, [r7, #24]
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	4313      	orrs	r3, r2
 800883a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	43db      	mvns	r3, r3
 800884c:	69ba      	ldr	r2, [r7, #24]
 800884e:	4013      	ands	r3, r2
 8008850:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d003      	beq.n	8008866 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	4313      	orrs	r3, r2
 8008864:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	69ba      	ldr	r2, [r7, #24]
 800886a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	3301      	adds	r3, #1
 8008870:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	fa22 f303 	lsr.w	r3, r2, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	f47f ae63 	bne.w	8008548 <HAL_GPIO_Init+0x14>
  }
}
 8008882:	bf00      	nop
 8008884:	bf00      	nop
 8008886:	3724      	adds	r7, #36	; 0x24
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	58000400 	.word	0x58000400

08008894 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008894:	b480      	push	{r7}
 8008896:	b087      	sub	sp, #28
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800889e:	2300      	movs	r3, #0
 80088a0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80088a2:	4b75      	ldr	r3, [pc, #468]	; (8008a78 <HAL_GPIO_DeInit+0x1e4>)
 80088a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80088a6:	e0d9      	b.n	8008a5c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80088a8:	2201      	movs	r2, #1
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	fa02 f303 	lsl.w	r3, r2, r3
 80088b0:	683a      	ldr	r2, [r7, #0]
 80088b2:	4013      	ands	r3, r2
 80088b4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 80cc 	beq.w	8008a56 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80088be:	4a6f      	ldr	r2, [pc, #444]	; (8008a7c <HAL_GPIO_DeInit+0x1e8>)
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	089b      	lsrs	r3, r3, #2
 80088c4:	3302      	adds	r3, #2
 80088c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ca:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	f003 0303 	and.w	r3, r3, #3
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	220f      	movs	r2, #15
 80088d6:	fa02 f303 	lsl.w	r3, r2, r3
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	4013      	ands	r3, r2
 80088de:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a67      	ldr	r2, [pc, #412]	; (8008a80 <HAL_GPIO_DeInit+0x1ec>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d037      	beq.n	8008958 <HAL_GPIO_DeInit+0xc4>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a66      	ldr	r2, [pc, #408]	; (8008a84 <HAL_GPIO_DeInit+0x1f0>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d031      	beq.n	8008954 <HAL_GPIO_DeInit+0xc0>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a65      	ldr	r2, [pc, #404]	; (8008a88 <HAL_GPIO_DeInit+0x1f4>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d02b      	beq.n	8008950 <HAL_GPIO_DeInit+0xbc>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a64      	ldr	r2, [pc, #400]	; (8008a8c <HAL_GPIO_DeInit+0x1f8>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d025      	beq.n	800894c <HAL_GPIO_DeInit+0xb8>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a63      	ldr	r2, [pc, #396]	; (8008a90 <HAL_GPIO_DeInit+0x1fc>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d01f      	beq.n	8008948 <HAL_GPIO_DeInit+0xb4>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a62      	ldr	r2, [pc, #392]	; (8008a94 <HAL_GPIO_DeInit+0x200>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d019      	beq.n	8008944 <HAL_GPIO_DeInit+0xb0>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a61      	ldr	r2, [pc, #388]	; (8008a98 <HAL_GPIO_DeInit+0x204>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d013      	beq.n	8008940 <HAL_GPIO_DeInit+0xac>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a60      	ldr	r2, [pc, #384]	; (8008a9c <HAL_GPIO_DeInit+0x208>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d00d      	beq.n	800893c <HAL_GPIO_DeInit+0xa8>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a5f      	ldr	r2, [pc, #380]	; (8008aa0 <HAL_GPIO_DeInit+0x20c>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d007      	beq.n	8008938 <HAL_GPIO_DeInit+0xa4>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a5e      	ldr	r2, [pc, #376]	; (8008aa4 <HAL_GPIO_DeInit+0x210>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d101      	bne.n	8008934 <HAL_GPIO_DeInit+0xa0>
 8008930:	2309      	movs	r3, #9
 8008932:	e012      	b.n	800895a <HAL_GPIO_DeInit+0xc6>
 8008934:	230a      	movs	r3, #10
 8008936:	e010      	b.n	800895a <HAL_GPIO_DeInit+0xc6>
 8008938:	2308      	movs	r3, #8
 800893a:	e00e      	b.n	800895a <HAL_GPIO_DeInit+0xc6>
 800893c:	2307      	movs	r3, #7
 800893e:	e00c      	b.n	800895a <HAL_GPIO_DeInit+0xc6>
 8008940:	2306      	movs	r3, #6
 8008942:	e00a      	b.n	800895a <HAL_GPIO_DeInit+0xc6>
 8008944:	2305      	movs	r3, #5
 8008946:	e008      	b.n	800895a <HAL_GPIO_DeInit+0xc6>
 8008948:	2304      	movs	r3, #4
 800894a:	e006      	b.n	800895a <HAL_GPIO_DeInit+0xc6>
 800894c:	2303      	movs	r3, #3
 800894e:	e004      	b.n	800895a <HAL_GPIO_DeInit+0xc6>
 8008950:	2302      	movs	r3, #2
 8008952:	e002      	b.n	800895a <HAL_GPIO_DeInit+0xc6>
 8008954:	2301      	movs	r3, #1
 8008956:	e000      	b.n	800895a <HAL_GPIO_DeInit+0xc6>
 8008958:	2300      	movs	r3, #0
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	f002 0203 	and.w	r2, r2, #3
 8008960:	0092      	lsls	r2, r2, #2
 8008962:	4093      	lsls	r3, r2
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	429a      	cmp	r2, r3
 8008968:	d136      	bne.n	80089d8 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	43db      	mvns	r3, r3
 8008972:	401a      	ands	r2, r3
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	43db      	mvns	r3, r3
 8008980:	401a      	ands	r2, r3
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	43db      	mvns	r3, r3
 8008990:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008994:	4013      	ands	r3, r2
 8008996:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	43db      	mvns	r3, r3
 80089a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089a6:	4013      	ands	r3, r2
 80089a8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f003 0303 	and.w	r3, r3, #3
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	220f      	movs	r2, #15
 80089b4:	fa02 f303 	lsl.w	r3, r2, r3
 80089b8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80089ba:	4a30      	ldr	r2, [pc, #192]	; (8008a7c <HAL_GPIO_DeInit+0x1e8>)
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	089b      	lsrs	r3, r3, #2
 80089c0:	3302      	adds	r3, #2
 80089c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	43da      	mvns	r2, r3
 80089ca:	482c      	ldr	r0, [pc, #176]	; (8008a7c <HAL_GPIO_DeInit+0x1e8>)
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	089b      	lsrs	r3, r3, #2
 80089d0:	400a      	ands	r2, r1
 80089d2:	3302      	adds	r3, #2
 80089d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	2103      	movs	r1, #3
 80089e2:	fa01 f303 	lsl.w	r3, r1, r3
 80089e6:	431a      	orrs	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	08da      	lsrs	r2, r3, #3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	3208      	adds	r2, #8
 80089f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f003 0307 	and.w	r3, r3, #7
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	220f      	movs	r2, #15
 8008a02:	fa02 f303 	lsl.w	r3, r2, r3
 8008a06:	43db      	mvns	r3, r3
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	08d2      	lsrs	r2, r2, #3
 8008a0c:	4019      	ands	r1, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	3208      	adds	r2, #8
 8008a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68da      	ldr	r2, [r3, #12]
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	005b      	lsls	r3, r3, #1
 8008a1e:	2103      	movs	r1, #3
 8008a20:	fa01 f303 	lsl.w	r3, r1, r3
 8008a24:	43db      	mvns	r3, r3
 8008a26:	401a      	ands	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685a      	ldr	r2, [r3, #4]
 8008a30:	2101      	movs	r1, #1
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	fa01 f303 	lsl.w	r3, r1, r3
 8008a38:	43db      	mvns	r3, r3
 8008a3a:	401a      	ands	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	689a      	ldr	r2, [r3, #8]
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	2103      	movs	r1, #3
 8008a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a4e:	43db      	mvns	r3, r3
 8008a50:	401a      	ands	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	fa22 f303 	lsr.w	r3, r2, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f47f af1f 	bne.w	80088a8 <HAL_GPIO_DeInit+0x14>
  }
}
 8008a6a:	bf00      	nop
 8008a6c:	bf00      	nop
 8008a6e:	371c      	adds	r7, #28
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	58000080 	.word	0x58000080
 8008a7c:	58000400 	.word	0x58000400
 8008a80:	58020000 	.word	0x58020000
 8008a84:	58020400 	.word	0x58020400
 8008a88:	58020800 	.word	0x58020800
 8008a8c:	58020c00 	.word	0x58020c00
 8008a90:	58021000 	.word	0x58021000
 8008a94:	58021400 	.word	0x58021400
 8008a98:	58021800 	.word	0x58021800
 8008a9c:	58021c00 	.word	0x58021c00
 8008aa0:	58022000 	.word	0x58022000
 8008aa4:	58022400 	.word	0x58022400

08008aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	807b      	strh	r3, [r7, #2]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ab8:	787b      	ldrb	r3, [r7, #1]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d003      	beq.n	8008ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008abe:	887a      	ldrh	r2, [r7, #2]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008ac4:	e003      	b.n	8008ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008ac6:	887b      	ldrh	r3, [r7, #2]
 8008ac8:	041a      	lsls	r2, r3, #16
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	619a      	str	r2, [r3, #24]
}
 8008ace:	bf00      	nop
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ada:	b480      	push	{r7}
 8008adc:	b085      	sub	sp, #20
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008aec:	887a      	ldrh	r2, [r7, #2]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	4013      	ands	r3, r2
 8008af2:	041a      	lsls	r2, r3, #16
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	43d9      	mvns	r1, r3
 8008af8:	887b      	ldrh	r3, [r7, #2]
 8008afa:	400b      	ands	r3, r1
 8008afc:	431a      	orrs	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	619a      	str	r2, [r3, #24]
}
 8008b02:	bf00      	nop
 8008b04:	3714      	adds	r7, #20
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
	...

08008b10 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8008b18:	4a08      	ldr	r2, [pc, #32]	; (8008b3c <HAL_HSEM_FastTake+0x2c>)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	3320      	adds	r3, #32
 8008b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b22:	4a07      	ldr	r2, [pc, #28]	; (8008b40 <HAL_HSEM_FastTake+0x30>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d101      	bne.n	8008b2c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	e000      	b.n	8008b2e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	58026400 	.word	0x58026400
 8008b40:	80000300 	.word	0x80000300

08008b44 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8008b4e:	4906      	ldr	r1, [pc, #24]	; (8008b68 <HAL_HSEM_Release+0x24>)
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	58026400 	.word	0x58026400

08008b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e07f      	b.n	8008c7e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d106      	bne.n	8008b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f8a9 	bl	8008cea <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2224      	movs	r2, #36	; 0x24
 8008b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f022 0201 	bic.w	r2, r2, #1
 8008bae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685a      	ldr	r2, [r3, #4]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008bbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689a      	ldr	r2, [r3, #8]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008bcc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d107      	bne.n	8008be6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	689a      	ldr	r2, [r3, #8]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008be2:	609a      	str	r2, [r3, #8]
 8008be4:	e006      	b.n	8008bf4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	689a      	ldr	r2, [r3, #8]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008bf2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d104      	bne.n	8008c06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6859      	ldr	r1, [r3, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	4b1d      	ldr	r3, [pc, #116]	; (8008c88 <HAL_I2C_Init+0x11c>)
 8008c12:	430b      	orrs	r3, r1
 8008c14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	691a      	ldr	r2, [r3, #16]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	695b      	ldr	r3, [r3, #20]
 8008c2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	69d9      	ldr	r1, [r3, #28]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a1a      	ldr	r2, [r3, #32]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f042 0201 	orr.w	r2, r2, #1
 8008c5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2220      	movs	r2, #32
 8008c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3708      	adds	r7, #8
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	02008000 	.word	0x02008000

08008c8c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e021      	b.n	8008ce2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2224      	movs	r2, #36	; 0x24
 8008ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f022 0201 	bic.w	r2, r2, #1
 8008cb4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f821 	bl	8008cfe <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8008cf2:	bf00      	nop
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8008d06:	bf00      	nop
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
	...

08008d14 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b088      	sub	sp, #32
 8008d18:	af02      	add	r7, sp, #8
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	4608      	mov	r0, r1
 8008d1e:	4611      	mov	r1, r2
 8008d20:	461a      	mov	r2, r3
 8008d22:	4603      	mov	r3, r0
 8008d24:	817b      	strh	r3, [r7, #10]
 8008d26:	460b      	mov	r3, r1
 8008d28:	813b      	strh	r3, [r7, #8]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b20      	cmp	r3, #32
 8008d38:	f040 80f9 	bne.w	8008f2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d002      	beq.n	8008d48 <HAL_I2C_Mem_Write+0x34>
 8008d42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d105      	bne.n	8008d54 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e0ed      	b.n	8008f30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d101      	bne.n	8008d62 <HAL_I2C_Mem_Write+0x4e>
 8008d5e:	2302      	movs	r3, #2
 8008d60:	e0e6      	b.n	8008f30 <HAL_I2C_Mem_Write+0x21c>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008d6a:	f7fe fa3d 	bl	80071e8 <HAL_GetTick>
 8008d6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	2319      	movs	r3, #25
 8008d76:	2201      	movs	r2, #1
 8008d78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f000 fadd 	bl	800933c <I2C_WaitOnFlagUntilTimeout>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e0d1      	b.n	8008f30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2221      	movs	r2, #33	; 0x21
 8008d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2240      	movs	r2, #64	; 0x40
 8008d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6a3a      	ldr	r2, [r7, #32]
 8008da6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008dac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008db4:	88f8      	ldrh	r0, [r7, #6]
 8008db6:	893a      	ldrh	r2, [r7, #8]
 8008db8:	8979      	ldrh	r1, [r7, #10]
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f000 f9ed 	bl	80091a4 <I2C_RequestMemoryWrite>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d005      	beq.n	8008ddc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e0a9      	b.n	8008f30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	2bff      	cmp	r3, #255	; 0xff
 8008de4:	d90e      	bls.n	8008e04 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	22ff      	movs	r2, #255	; 0xff
 8008dea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	8979      	ldrh	r1, [r7, #10]
 8008df4:	2300      	movs	r3, #0
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 fc45 	bl	800968c <I2C_TransferConfig>
 8008e02:	e00f      	b.n	8008e24 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	8979      	ldrh	r1, [r7, #10]
 8008e16:	2300      	movs	r3, #0
 8008e18:	9300      	str	r3, [sp, #0]
 8008e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f000 fc34 	bl	800968c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f000 fac7 	bl	80093bc <I2C_WaitOnTXISFlagUntilTimeout>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d001      	beq.n	8008e38 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e07b      	b.n	8008f30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3c:	781a      	ldrb	r2, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e48:	1c5a      	adds	r2, r3, #1
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	3b01      	subs	r3, #1
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e60:	3b01      	subs	r3, #1
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d034      	beq.n	8008edc <HAL_I2C_Mem_Write+0x1c8>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d130      	bne.n	8008edc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e80:	2200      	movs	r2, #0
 8008e82:	2180      	movs	r1, #128	; 0x80
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 fa59 	bl	800933c <I2C_WaitOnFlagUntilTimeout>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d001      	beq.n	8008e94 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e04d      	b.n	8008f30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	2bff      	cmp	r3, #255	; 0xff
 8008e9c:	d90e      	bls.n	8008ebc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	22ff      	movs	r2, #255	; 0xff
 8008ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	8979      	ldrh	r1, [r7, #10]
 8008eac:	2300      	movs	r3, #0
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f000 fbe9 	bl	800968c <I2C_TransferConfig>
 8008eba:	e00f      	b.n	8008edc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	8979      	ldrh	r1, [r7, #10]
 8008ece:	2300      	movs	r3, #0
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f000 fbd8 	bl	800968c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d19e      	bne.n	8008e24 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 faa6 	bl	800943c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e01a      	b.n	8008f30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2220      	movs	r2, #32
 8008f00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6859      	ldr	r1, [r3, #4]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	4b0a      	ldr	r3, [pc, #40]	; (8008f38 <HAL_I2C_Mem_Write+0x224>)
 8008f0e:	400b      	ands	r3, r1
 8008f10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2220      	movs	r2, #32
 8008f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e000      	b.n	8008f30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008f2e:	2302      	movs	r3, #2
  }
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3718      	adds	r7, #24
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	fe00e800 	.word	0xfe00e800

08008f3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b088      	sub	sp, #32
 8008f40:	af02      	add	r7, sp, #8
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	4608      	mov	r0, r1
 8008f46:	4611      	mov	r1, r2
 8008f48:	461a      	mov	r2, r3
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	817b      	strh	r3, [r7, #10]
 8008f4e:	460b      	mov	r3, r1
 8008f50:	813b      	strh	r3, [r7, #8]
 8008f52:	4613      	mov	r3, r2
 8008f54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b20      	cmp	r3, #32
 8008f60:	f040 80fd 	bne.w	800915e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d002      	beq.n	8008f70 <HAL_I2C_Mem_Read+0x34>
 8008f6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d105      	bne.n	8008f7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e0f1      	b.n	8009160 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d101      	bne.n	8008f8a <HAL_I2C_Mem_Read+0x4e>
 8008f86:	2302      	movs	r3, #2
 8008f88:	e0ea      	b.n	8009160 <HAL_I2C_Mem_Read+0x224>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008f92:	f7fe f929 	bl	80071e8 <HAL_GetTick>
 8008f96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	2319      	movs	r3, #25
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 f9c9 	bl	800933c <I2C_WaitOnFlagUntilTimeout>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e0d5      	b.n	8009160 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2222      	movs	r2, #34	; 0x22
 8008fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2240      	movs	r2, #64	; 0x40
 8008fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6a3a      	ldr	r2, [r7, #32]
 8008fce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008fdc:	88f8      	ldrh	r0, [r7, #6]
 8008fde:	893a      	ldrh	r2, [r7, #8]
 8008fe0:	8979      	ldrh	r1, [r7, #10]
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	9301      	str	r3, [sp, #4]
 8008fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	4603      	mov	r3, r0
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f000 f92d 	bl	800924c <I2C_RequestMemoryRead>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d005      	beq.n	8009004 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e0ad      	b.n	8009160 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009008:	b29b      	uxth	r3, r3
 800900a:	2bff      	cmp	r3, #255	; 0xff
 800900c:	d90e      	bls.n	800902c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	22ff      	movs	r2, #255	; 0xff
 8009012:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009018:	b2da      	uxtb	r2, r3
 800901a:	8979      	ldrh	r1, [r7, #10]
 800901c:	4b52      	ldr	r3, [pc, #328]	; (8009168 <HAL_I2C_Mem_Read+0x22c>)
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f000 fb31 	bl	800968c <I2C_TransferConfig>
 800902a:	e00f      	b.n	800904c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009030:	b29a      	uxth	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800903a:	b2da      	uxtb	r2, r3
 800903c:	8979      	ldrh	r1, [r7, #10]
 800903e:	4b4a      	ldr	r3, [pc, #296]	; (8009168 <HAL_I2C_Mem_Read+0x22c>)
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f000 fb20 	bl	800968c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009052:	2200      	movs	r2, #0
 8009054:	2104      	movs	r1, #4
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 f970 	bl	800933c <I2C_WaitOnFlagUntilTimeout>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e07c      	b.n	8009160 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009070:	b2d2      	uxtb	r2, r2
 8009072:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009078:	1c5a      	adds	r2, r3, #1
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009082:	3b01      	subs	r3, #1
 8009084:	b29a      	uxth	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800908e:	b29b      	uxth	r3, r3
 8009090:	3b01      	subs	r3, #1
 8009092:	b29a      	uxth	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800909c:	b29b      	uxth	r3, r3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d034      	beq.n	800910c <HAL_I2C_Mem_Read+0x1d0>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d130      	bne.n	800910c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b0:	2200      	movs	r2, #0
 80090b2:	2180      	movs	r1, #128	; 0x80
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f000 f941 	bl	800933c <I2C_WaitOnFlagUntilTimeout>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d001      	beq.n	80090c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e04d      	b.n	8009160 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	2bff      	cmp	r3, #255	; 0xff
 80090cc:	d90e      	bls.n	80090ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	22ff      	movs	r2, #255	; 0xff
 80090d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	8979      	ldrh	r1, [r7, #10]
 80090dc:	2300      	movs	r3, #0
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 fad1 	bl	800968c <I2C_TransferConfig>
 80090ea:	e00f      	b.n	800910c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	8979      	ldrh	r1, [r7, #10]
 80090fe:	2300      	movs	r3, #0
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f000 fac0 	bl	800968c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009110:	b29b      	uxth	r3, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	d19a      	bne.n	800904c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f000 f98e 	bl	800943c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e01a      	b.n	8009160 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2220      	movs	r2, #32
 8009130:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6859      	ldr	r1, [r3, #4]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	4b0b      	ldr	r3, [pc, #44]	; (800916c <HAL_I2C_Mem_Read+0x230>)
 800913e:	400b      	ands	r3, r1
 8009140:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2220      	movs	r2, #32
 8009146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	e000      	b.n	8009160 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800915e:	2302      	movs	r3, #2
  }
}
 8009160:	4618      	mov	r0, r3
 8009162:	3718      	adds	r7, #24
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	80002400 	.word	0x80002400
 800916c:	fe00e800 	.word	0xfe00e800

08009170 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800917e:	b2db      	uxtb	r3, r3
}
 8009180:	4618      	mov	r0, r3
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8009198:	4618      	mov	r0, r3
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af02      	add	r7, sp, #8
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	4608      	mov	r0, r1
 80091ae:	4611      	mov	r1, r2
 80091b0:	461a      	mov	r2, r3
 80091b2:	4603      	mov	r3, r0
 80091b4:	817b      	strh	r3, [r7, #10]
 80091b6:	460b      	mov	r3, r1
 80091b8:	813b      	strh	r3, [r7, #8]
 80091ba:	4613      	mov	r3, r2
 80091bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80091be:	88fb      	ldrh	r3, [r7, #6]
 80091c0:	b2da      	uxtb	r2, r3
 80091c2:	8979      	ldrh	r1, [r7, #10]
 80091c4:	4b20      	ldr	r3, [pc, #128]	; (8009248 <I2C_RequestMemoryWrite+0xa4>)
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f000 fa5d 	bl	800968c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091d2:	69fa      	ldr	r2, [r7, #28]
 80091d4:	69b9      	ldr	r1, [r7, #24]
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f000 f8f0 	bl	80093bc <I2C_WaitOnTXISFlagUntilTimeout>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d001      	beq.n	80091e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e02c      	b.n	8009240 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80091e6:	88fb      	ldrh	r3, [r7, #6]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d105      	bne.n	80091f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80091ec:	893b      	ldrh	r3, [r7, #8]
 80091ee:	b2da      	uxtb	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	629a      	str	r2, [r3, #40]	; 0x28
 80091f6:	e015      	b.n	8009224 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80091f8:	893b      	ldrh	r3, [r7, #8]
 80091fa:	0a1b      	lsrs	r3, r3, #8
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009206:	69fa      	ldr	r2, [r7, #28]
 8009208:	69b9      	ldr	r1, [r7, #24]
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f000 f8d6 	bl	80093bc <I2C_WaitOnTXISFlagUntilTimeout>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e012      	b.n	8009240 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800921a:	893b      	ldrh	r3, [r7, #8]
 800921c:	b2da      	uxtb	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	2200      	movs	r2, #0
 800922c:	2180      	movs	r1, #128	; 0x80
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f000 f884 	bl	800933c <I2C_WaitOnFlagUntilTimeout>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e000      	b.n	8009240 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	80002000 	.word	0x80002000

0800924c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af02      	add	r7, sp, #8
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	4608      	mov	r0, r1
 8009256:	4611      	mov	r1, r2
 8009258:	461a      	mov	r2, r3
 800925a:	4603      	mov	r3, r0
 800925c:	817b      	strh	r3, [r7, #10]
 800925e:	460b      	mov	r3, r1
 8009260:	813b      	strh	r3, [r7, #8]
 8009262:	4613      	mov	r3, r2
 8009264:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009266:	88fb      	ldrh	r3, [r7, #6]
 8009268:	b2da      	uxtb	r2, r3
 800926a:	8979      	ldrh	r1, [r7, #10]
 800926c:	4b20      	ldr	r3, [pc, #128]	; (80092f0 <I2C_RequestMemoryRead+0xa4>)
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	2300      	movs	r3, #0
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f000 fa0a 	bl	800968c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009278:	69fa      	ldr	r2, [r7, #28]
 800927a:	69b9      	ldr	r1, [r7, #24]
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 f89d 	bl	80093bc <I2C_WaitOnTXISFlagUntilTimeout>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	e02c      	b.n	80092e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800928c:	88fb      	ldrh	r3, [r7, #6]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d105      	bne.n	800929e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009292:	893b      	ldrh	r3, [r7, #8]
 8009294:	b2da      	uxtb	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	629a      	str	r2, [r3, #40]	; 0x28
 800929c:	e015      	b.n	80092ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800929e:	893b      	ldrh	r3, [r7, #8]
 80092a0:	0a1b      	lsrs	r3, r3, #8
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	b2da      	uxtb	r2, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092ac:	69fa      	ldr	r2, [r7, #28]
 80092ae:	69b9      	ldr	r1, [r7, #24]
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f000 f883 	bl	80093bc <I2C_WaitOnTXISFlagUntilTimeout>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d001      	beq.n	80092c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	e012      	b.n	80092e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80092c0:	893b      	ldrh	r3, [r7, #8]
 80092c2:	b2da      	uxtb	r2, r3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	2200      	movs	r2, #0
 80092d2:	2140      	movs	r1, #64	; 0x40
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f000 f831 	bl	800933c <I2C_WaitOnFlagUntilTimeout>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d001      	beq.n	80092e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e000      	b.n	80092e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	80002000 	.word	0x80002000

080092f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	f003 0302 	and.w	r3, r3, #2
 8009306:	2b02      	cmp	r3, #2
 8009308:	d103      	bne.n	8009312 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2200      	movs	r2, #0
 8009310:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	f003 0301 	and.w	r3, r3, #1
 800931c:	2b01      	cmp	r3, #1
 800931e:	d007      	beq.n	8009330 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	699a      	ldr	r2, [r3, #24]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f042 0201 	orr.w	r2, r2, #1
 800932e:	619a      	str	r2, [r3, #24]
  }
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	603b      	str	r3, [r7, #0]
 8009348:	4613      	mov	r3, r2
 800934a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800934c:	e022      	b.n	8009394 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009354:	d01e      	beq.n	8009394 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009356:	f7fd ff47 	bl	80071e8 <HAL_GetTick>
 800935a:	4602      	mov	r2, r0
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	429a      	cmp	r2, r3
 8009364:	d302      	bcc.n	800936c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d113      	bne.n	8009394 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009370:	f043 0220 	orr.w	r2, r3, #32
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2220      	movs	r2, #32
 800937c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e00f      	b.n	80093b4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	699a      	ldr	r2, [r3, #24]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	4013      	ands	r3, r2
 800939e:	68ba      	ldr	r2, [r7, #8]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	bf0c      	ite	eq
 80093a4:	2301      	moveq	r3, #1
 80093a6:	2300      	movne	r3, #0
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	461a      	mov	r2, r3
 80093ac:	79fb      	ldrb	r3, [r7, #7]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d0cd      	beq.n	800934e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80093c8:	e02c      	b.n	8009424 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	68b9      	ldr	r1, [r7, #8]
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f000 f870 	bl	80094b4 <I2C_IsErrorOccurred>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	e02a      	b.n	8009434 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e4:	d01e      	beq.n	8009424 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093e6:	f7fd feff 	bl	80071e8 <HAL_GetTick>
 80093ea:	4602      	mov	r2, r0
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	1ad3      	subs	r3, r2, r3
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d302      	bcc.n	80093fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d113      	bne.n	8009424 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009400:	f043 0220 	orr.w	r2, r3, #32
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2220      	movs	r2, #32
 800940c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	e007      	b.n	8009434 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	f003 0302 	and.w	r3, r3, #2
 800942e:	2b02      	cmp	r3, #2
 8009430:	d1cb      	bne.n	80093ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009448:	e028      	b.n	800949c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	68b9      	ldr	r1, [r7, #8]
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 f830 	bl	80094b4 <I2C_IsErrorOccurred>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d001      	beq.n	800945e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e026      	b.n	80094ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800945e:	f7fd fec3 	bl	80071e8 <HAL_GetTick>
 8009462:	4602      	mov	r2, r0
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	429a      	cmp	r2, r3
 800946c:	d302      	bcc.n	8009474 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d113      	bne.n	800949c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009478:	f043 0220 	orr.w	r2, r3, #32
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2220      	movs	r2, #32
 8009484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e007      	b.n	80094ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	f003 0320 	and.w	r3, r3, #32
 80094a6:	2b20      	cmp	r3, #32
 80094a8:	d1cf      	bne.n	800944a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b08a      	sub	sp, #40	; 0x28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80094ce:	2300      	movs	r3, #0
 80094d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	f003 0310 	and.w	r3, r3, #16
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d075      	beq.n	80095cc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2210      	movs	r2, #16
 80094e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80094e8:	e056      	b.n	8009598 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f0:	d052      	beq.n	8009598 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80094f2:	f7fd fe79 	bl	80071e8 <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d302      	bcc.n	8009508 <I2C_IsErrorOccurred+0x54>
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d147      	bne.n	8009598 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009512:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800951a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800952a:	d12e      	bne.n	800958a <I2C_IsErrorOccurred+0xd6>
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009532:	d02a      	beq.n	800958a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009534:	7cfb      	ldrb	r3, [r7, #19]
 8009536:	2b20      	cmp	r3, #32
 8009538:	d027      	beq.n	800958a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	685a      	ldr	r2, [r3, #4]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009548:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800954a:	f7fd fe4d 	bl	80071e8 <HAL_GetTick>
 800954e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009550:	e01b      	b.n	800958a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009552:	f7fd fe49 	bl	80071e8 <HAL_GetTick>
 8009556:	4602      	mov	r2, r0
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	2b19      	cmp	r3, #25
 800955e:	d914      	bls.n	800958a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009564:	f043 0220 	orr.w	r2, r3, #32
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2220      	movs	r2, #32
 8009570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	f003 0320 	and.w	r3, r3, #32
 8009594:	2b20      	cmp	r3, #32
 8009596:	d1dc      	bne.n	8009552 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	f003 0320 	and.w	r3, r3, #32
 80095a2:	2b20      	cmp	r3, #32
 80095a4:	d003      	beq.n	80095ae <I2C_IsErrorOccurred+0xfa>
 80095a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d09d      	beq.n	80094ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80095ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d103      	bne.n	80095be <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2220      	movs	r2, #32
 80095bc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80095be:	6a3b      	ldr	r3, [r7, #32]
 80095c0:	f043 0304 	orr.w	r3, r3, #4
 80095c4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	699b      	ldr	r3, [r3, #24]
 80095d2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00b      	beq.n	80095f6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	f043 0301 	orr.w	r3, r3, #1
 80095e4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00b      	beq.n	8009618 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009600:	6a3b      	ldr	r3, [r7, #32]
 8009602:	f043 0308 	orr.w	r3, r3, #8
 8009606:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009610:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00b      	beq.n	800963a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009622:	6a3b      	ldr	r3, [r7, #32]
 8009624:	f043 0302 	orr.w	r3, r3, #2
 8009628:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009632:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800963a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800963e:	2b00      	cmp	r3, #0
 8009640:	d01c      	beq.n	800967c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f7ff fe56 	bl	80092f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6859      	ldr	r1, [r3, #4]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	4b0d      	ldr	r3, [pc, #52]	; (8009688 <I2C_IsErrorOccurred+0x1d4>)
 8009654:	400b      	ands	r3, r1
 8009656:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800965c:	6a3b      	ldr	r3, [r7, #32]
 800965e:	431a      	orrs	r2, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2220      	movs	r2, #32
 8009668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800967c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009680:	4618      	mov	r0, r3
 8009682:	3728      	adds	r7, #40	; 0x28
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	fe00e800 	.word	0xfe00e800

0800968c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800968c:	b480      	push	{r7}
 800968e:	b087      	sub	sp, #28
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	607b      	str	r3, [r7, #4]
 8009696:	460b      	mov	r3, r1
 8009698:	817b      	strh	r3, [r7, #10]
 800969a:	4613      	mov	r3, r2
 800969c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800969e:	897b      	ldrh	r3, [r7, #10]
 80096a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80096a4:	7a7b      	ldrb	r3, [r7, #9]
 80096a6:	041b      	lsls	r3, r3, #16
 80096a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096ac:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096b2:	6a3b      	ldr	r3, [r7, #32]
 80096b4:	4313      	orrs	r3, r2
 80096b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096ba:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	685a      	ldr	r2, [r3, #4]
 80096c2:	6a3b      	ldr	r3, [r7, #32]
 80096c4:	0d5b      	lsrs	r3, r3, #21
 80096c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80096ca:	4b08      	ldr	r3, [pc, #32]	; (80096ec <I2C_TransferConfig+0x60>)
 80096cc:	430b      	orrs	r3, r1
 80096ce:	43db      	mvns	r3, r3
 80096d0:	ea02 0103 	and.w	r1, r2, r3
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	697a      	ldr	r2, [r7, #20]
 80096da:	430a      	orrs	r2, r1
 80096dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80096de:	bf00      	nop
 80096e0:	371c      	adds	r7, #28
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	03ff63ff 	.word	0x03ff63ff

080096f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009700:	b2db      	uxtb	r3, r3
 8009702:	2b20      	cmp	r3, #32
 8009704:	d138      	bne.n	8009778 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800970c:	2b01      	cmp	r3, #1
 800970e:	d101      	bne.n	8009714 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009710:	2302      	movs	r3, #2
 8009712:	e032      	b.n	800977a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2224      	movs	r2, #36	; 0x24
 8009720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f022 0201 	bic.w	r2, r2, #1
 8009732:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009742:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6819      	ldr	r1, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	683a      	ldr	r2, [r7, #0]
 8009750:	430a      	orrs	r2, r1
 8009752:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f042 0201 	orr.w	r2, r2, #1
 8009762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2220      	movs	r2, #32
 8009768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009774:	2300      	movs	r3, #0
 8009776:	e000      	b.n	800977a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009778:	2302      	movs	r3, #2
  }
}
 800977a:	4618      	mov	r0, r3
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009786:	b480      	push	{r7}
 8009788:	b085      	sub	sp, #20
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009796:	b2db      	uxtb	r3, r3
 8009798:	2b20      	cmp	r3, #32
 800979a:	d139      	bne.n	8009810 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d101      	bne.n	80097aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80097a6:	2302      	movs	r3, #2
 80097a8:	e033      	b.n	8009812 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2224      	movs	r2, #36	; 0x24
 80097b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f022 0201 	bic.w	r2, r2, #1
 80097c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80097d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	021b      	lsls	r3, r3, #8
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f042 0201 	orr.w	r2, r2, #1
 80097fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2220      	movs	r2, #32
 8009800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800980c:	2300      	movs	r3, #0
 800980e:	e000      	b.n	8009812 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009810:	2302      	movs	r3, #2
  }
}
 8009812:	4618      	mov	r0, r3
 8009814:	3714      	adds	r7, #20
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
	...

08009820 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d101      	bne.n	8009832 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e0bf      	b.n	80099b2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	d106      	bne.n	800984c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f8ba 	bl	80099c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2202      	movs	r2, #2
 8009850:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	699a      	ldr	r2, [r3, #24]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009862:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	6999      	ldr	r1, [r3, #24]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685a      	ldr	r2, [r3, #4]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009878:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	430a      	orrs	r2, r1
 8009886:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6899      	ldr	r1, [r3, #8]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	4b4a      	ldr	r3, [pc, #296]	; (80099bc <HAL_LTDC_Init+0x19c>)
 8009894:	400b      	ands	r3, r1
 8009896:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	695b      	ldr	r3, [r3, #20]
 800989c:	041b      	lsls	r3, r3, #16
 800989e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6899      	ldr	r1, [r3, #8]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	699a      	ldr	r2, [r3, #24]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	431a      	orrs	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	430a      	orrs	r2, r1
 80098b4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68d9      	ldr	r1, [r3, #12]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	4b3e      	ldr	r3, [pc, #248]	; (80099bc <HAL_LTDC_Init+0x19c>)
 80098c2:	400b      	ands	r3, r1
 80098c4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	69db      	ldr	r3, [r3, #28]
 80098ca:	041b      	lsls	r3, r3, #16
 80098cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68d9      	ldr	r1, [r3, #12]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6a1a      	ldr	r2, [r3, #32]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	431a      	orrs	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	430a      	orrs	r2, r1
 80098e2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	6919      	ldr	r1, [r3, #16]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	4b33      	ldr	r3, [pc, #204]	; (80099bc <HAL_LTDC_Init+0x19c>)
 80098f0:	400b      	ands	r3, r1
 80098f2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f8:	041b      	lsls	r3, r3, #16
 80098fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	6919      	ldr	r1, [r3, #16]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	431a      	orrs	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	430a      	orrs	r2, r1
 8009910:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	6959      	ldr	r1, [r3, #20]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	4b27      	ldr	r3, [pc, #156]	; (80099bc <HAL_LTDC_Init+0x19c>)
 800991e:	400b      	ands	r3, r1
 8009920:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009926:	041b      	lsls	r3, r3, #16
 8009928:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	6959      	ldr	r1, [r3, #20]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	431a      	orrs	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	430a      	orrs	r2, r1
 800993e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009946:	021b      	lsls	r3, r3, #8
 8009948:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009950:	041b      	lsls	r3, r3, #16
 8009952:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009962:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4313      	orrs	r3, r2
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009976:	431a      	orrs	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	430a      	orrs	r2, r1
 800997e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f042 0206 	orr.w	r2, r2, #6
 800998e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	699a      	ldr	r2, [r3, #24]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f042 0201 	orr.w	r2, r2, #1
 800999e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	f000f800 	.word	0xf000f800

080099c0 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80099d4:	b5b0      	push	{r4, r5, r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d101      	bne.n	80099ee <HAL_LTDC_ConfigLayer+0x1a>
 80099ea:	2302      	movs	r3, #2
 80099ec:	e02c      	b.n	8009a48 <HAL_LTDC_ConfigLayer+0x74>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2202      	movs	r2, #2
 80099fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2134      	movs	r1, #52	; 0x34
 8009a04:	fb01 f303 	mul.w	r3, r1, r3
 8009a08:	4413      	add	r3, r2
 8009a0a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	4614      	mov	r4, r2
 8009a12:	461d      	mov	r5, r3
 8009a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	68b9      	ldr	r1, [r7, #8]
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 f811 	bl	8009a50 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2201      	movs	r2, #1
 8009a34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bdb0      	pop	{r4, r5, r7, pc}

08009a50 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b089      	sub	sp, #36	; 0x24
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	685a      	ldr	r2, [r3, #4]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	0c1b      	lsrs	r3, r3, #16
 8009a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a6c:	4413      	add	r3, r2
 8009a6e:	041b      	lsls	r3, r3, #16
 8009a70:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	01db      	lsls	r3, r3, #7
 8009a7c:	4413      	add	r3, r2
 8009a7e:	3384      	adds	r3, #132	; 0x84
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	6812      	ldr	r2, [r2, #0]
 8009a86:	4611      	mov	r1, r2
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	01d2      	lsls	r2, r2, #7
 8009a8c:	440a      	add	r2, r1
 8009a8e:	3284      	adds	r2, #132	; 0x84
 8009a90:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009a94:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	0c1b      	lsrs	r3, r3, #16
 8009aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009aa6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009aa8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4619      	mov	r1, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	01db      	lsls	r3, r3, #7
 8009ab4:	440b      	add	r3, r1
 8009ab6:	3384      	adds	r3, #132	; 0x84
 8009ab8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009abe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	68da      	ldr	r2, [r3, #12]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ace:	4413      	add	r3, r2
 8009ad0:	041b      	lsls	r3, r3, #16
 8009ad2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	01db      	lsls	r3, r3, #7
 8009ade:	4413      	add	r3, r2
 8009ae0:	3384      	adds	r3, #132	; 0x84
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	6812      	ldr	r2, [r2, #0]
 8009ae8:	4611      	mov	r1, r2
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	01d2      	lsls	r2, r2, #7
 8009aee:	440a      	add	r2, r1
 8009af0:	3284      	adds	r2, #132	; 0x84
 8009af2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009af6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	689a      	ldr	r2, [r3, #8]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b06:	4413      	add	r3, r2
 8009b08:	1c5a      	adds	r2, r3, #1
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4619      	mov	r1, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	01db      	lsls	r3, r3, #7
 8009b14:	440b      	add	r3, r1
 8009b16:	3384      	adds	r3, #132	; 0x84
 8009b18:	4619      	mov	r1, r3
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	461a      	mov	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	01db      	lsls	r3, r3, #7
 8009b2a:	4413      	add	r3, r2
 8009b2c:	3384      	adds	r3, #132	; 0x84
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	6812      	ldr	r2, [r2, #0]
 8009b34:	4611      	mov	r1, r2
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	01d2      	lsls	r2, r2, #7
 8009b3a:	440a      	add	r2, r1
 8009b3c:	3284      	adds	r2, #132	; 0x84
 8009b3e:	f023 0307 	bic.w	r3, r3, #7
 8009b42:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	01db      	lsls	r3, r3, #7
 8009b4e:	4413      	add	r3, r2
 8009b50:	3384      	adds	r3, #132	; 0x84
 8009b52:	461a      	mov	r2, r3
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009b60:	021b      	lsls	r3, r3, #8
 8009b62:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009b6a:	041b      	lsls	r3, r3, #16
 8009b6c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	061b      	lsls	r3, r3, #24
 8009b74:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	01db      	lsls	r3, r3, #7
 8009b80:	4413      	add	r3, r2
 8009b82:	3384      	adds	r3, #132	; 0x84
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	01db      	lsls	r3, r3, #7
 8009b90:	4413      	add	r3, r2
 8009b92:	3384      	adds	r3, #132	; 0x84
 8009b94:	461a      	mov	r2, r3
 8009b96:	2300      	movs	r3, #0
 8009b98:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	431a      	orrs	r2, r3
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	431a      	orrs	r2, r3
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4619      	mov	r1, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	01db      	lsls	r3, r3, #7
 8009bb4:	440b      	add	r3, r1
 8009bb6:	3384      	adds	r3, #132	; 0x84
 8009bb8:	4619      	mov	r1, r3
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	01db      	lsls	r3, r3, #7
 8009bca:	4413      	add	r3, r2
 8009bcc:	3384      	adds	r3, #132	; 0x84
 8009bce:	695b      	ldr	r3, [r3, #20]
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	6812      	ldr	r2, [r2, #0]
 8009bd4:	4611      	mov	r1, r2
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	01d2      	lsls	r2, r2, #7
 8009bda:	440a      	add	r2, r1
 8009bdc:	3284      	adds	r2, #132	; 0x84
 8009bde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009be2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	461a      	mov	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	01db      	lsls	r3, r3, #7
 8009bee:	4413      	add	r3, r2
 8009bf0:	3384      	adds	r3, #132	; 0x84
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	695b      	ldr	r3, [r3, #20]
 8009bf8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	01db      	lsls	r3, r3, #7
 8009c04:	4413      	add	r3, r2
 8009c06:	3384      	adds	r3, #132	; 0x84
 8009c08:	69da      	ldr	r2, [r3, #28]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4619      	mov	r1, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	01db      	lsls	r3, r3, #7
 8009c14:	440b      	add	r3, r1
 8009c16:	3384      	adds	r3, #132	; 0x84
 8009c18:	4619      	mov	r1, r3
 8009c1a:	4b58      	ldr	r3, [pc, #352]	; (8009d7c <LTDC_SetConfig+0x32c>)
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	69da      	ldr	r2, [r3, #28]
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	6a1b      	ldr	r3, [r3, #32]
 8009c28:	68f9      	ldr	r1, [r7, #12]
 8009c2a:	6809      	ldr	r1, [r1, #0]
 8009c2c:	4608      	mov	r0, r1
 8009c2e:	6879      	ldr	r1, [r7, #4]
 8009c30:	01c9      	lsls	r1, r1, #7
 8009c32:	4401      	add	r1, r0
 8009c34:	3184      	adds	r1, #132	; 0x84
 8009c36:	4313      	orrs	r3, r2
 8009c38:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	461a      	mov	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	01db      	lsls	r3, r3, #7
 8009c44:	4413      	add	r3, r2
 8009c46:	3384      	adds	r3, #132	; 0x84
 8009c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	01db      	lsls	r3, r3, #7
 8009c54:	4413      	add	r3, r2
 8009c56:	3384      	adds	r3, #132	; 0x84
 8009c58:	461a      	mov	r2, r3
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	461a      	mov	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	01db      	lsls	r3, r3, #7
 8009c68:	4413      	add	r3, r2
 8009c6a:	3384      	adds	r3, #132	; 0x84
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c72:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	691b      	ldr	r3, [r3, #16]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d102      	bne.n	8009c82 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009c7c:	2304      	movs	r3, #4
 8009c7e:	61fb      	str	r3, [r7, #28]
 8009c80:	e01b      	b.n	8009cba <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d102      	bne.n	8009c90 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	61fb      	str	r3, [r7, #28]
 8009c8e:	e014      	b.n	8009cba <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	691b      	ldr	r3, [r3, #16]
 8009c94:	2b04      	cmp	r3, #4
 8009c96:	d00b      	beq.n	8009cb0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d007      	beq.n	8009cb0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009ca4:	2b03      	cmp	r3, #3
 8009ca6:	d003      	beq.n	8009cb0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009cac:	2b07      	cmp	r3, #7
 8009cae:	d102      	bne.n	8009cb6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	61fb      	str	r3, [r7, #28]
 8009cb4:	e001      	b.n	8009cba <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	01db      	lsls	r3, r3, #7
 8009cc4:	4413      	add	r3, r2
 8009cc6:	3384      	adds	r3, #132	; 0x84
 8009cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	6812      	ldr	r2, [r2, #0]
 8009cce:	4611      	mov	r1, r2
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	01d2      	lsls	r2, r2, #7
 8009cd4:	440a      	add	r2, r1
 8009cd6:	3284      	adds	r2, #132	; 0x84
 8009cd8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009cdc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce2:	69fa      	ldr	r2, [r7, #28]
 8009ce4:	fb02 f303 	mul.w	r3, r2, r3
 8009ce8:	041a      	lsls	r2, r3, #16
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	6859      	ldr	r1, [r3, #4]
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	1acb      	subs	r3, r1, r3
 8009cf4:	69f9      	ldr	r1, [r7, #28]
 8009cf6:	fb01 f303 	mul.w	r3, r1, r3
 8009cfa:	3307      	adds	r3, #7
 8009cfc:	68f9      	ldr	r1, [r7, #12]
 8009cfe:	6809      	ldr	r1, [r1, #0]
 8009d00:	4608      	mov	r0, r1
 8009d02:	6879      	ldr	r1, [r7, #4]
 8009d04:	01c9      	lsls	r1, r1, #7
 8009d06:	4401      	add	r1, r0
 8009d08:	3184      	adds	r1, #132	; 0x84
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	461a      	mov	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	01db      	lsls	r3, r3, #7
 8009d18:	4413      	add	r3, r2
 8009d1a:	3384      	adds	r3, #132	; 0x84
 8009d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4619      	mov	r1, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	01db      	lsls	r3, r3, #7
 8009d28:	440b      	add	r3, r1
 8009d2a:	3384      	adds	r3, #132	; 0x84
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	4b14      	ldr	r3, [pc, #80]	; (8009d80 <LTDC_SetConfig+0x330>)
 8009d30:	4013      	ands	r3, r2
 8009d32:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	461a      	mov	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	01db      	lsls	r3, r3, #7
 8009d3e:	4413      	add	r3, r2
 8009d40:	3384      	adds	r3, #132	; 0x84
 8009d42:	461a      	mov	r2, r3
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d48:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	01db      	lsls	r3, r3, #7
 8009d54:	4413      	add	r3, r2
 8009d56:	3384      	adds	r3, #132	; 0x84
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	6812      	ldr	r2, [r2, #0]
 8009d5e:	4611      	mov	r1, r2
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	01d2      	lsls	r2, r2, #7
 8009d64:	440a      	add	r2, r1
 8009d66:	3284      	adds	r2, #132	; 0x84
 8009d68:	f043 0301 	orr.w	r3, r3, #1
 8009d6c:	6013      	str	r3, [r2, #0]
}
 8009d6e:	bf00      	nop
 8009d70:	3724      	adds	r7, #36	; 0x24
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	fffff8f8 	.word	0xfffff8f8
 8009d80:	fffff800 	.word	0xfffff800

08009d84 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009d8c:	f7fd fa2c 	bl	80071e8 <HAL_GetTick>
 8009d90:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d101      	bne.n	8009d9c <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e03b      	b.n	8009e14 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2202      	movs	r2, #2
 8009da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68da      	ldr	r2, [r3, #12]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f022 0201 	bic.w	r2, r2, #1
 8009dba:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8009dbc:	e00f      	b.n	8009dde <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8009dbe:	f7fd fa13 	bl	80071e8 <HAL_GetTick>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	2b05      	cmp	r3, #5
 8009dca:	d908      	bls.n	8009dde <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2240      	movs	r2, #64	; 0x40
 8009dd0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2203      	movs	r2, #3
 8009dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e01a      	b.n	8009e14 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	f003 0301 	and.w	r3, r3, #1
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1e8      	bne.n	8009dbe <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f86d 	bl	8009ecc <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e048      	b.n	8009ec0 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68da      	ldr	r2, [r3, #12]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f022 0201 	bic.w	r2, r2, #1
 8009e3c:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2200      	movs	r2, #0
 8009e44:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2200      	movs	r2, #0
 8009e54:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2200      	movs	r2, #0
 8009e64:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2200      	movs	r2, #0
 8009e74:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2200      	movs	r2, #0
 8009e84:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	221f      	movs	r2, #31
 8009e94:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68d9      	ldr	r1, [r3, #12]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	691a      	ldr	r2, [r3, #16]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	430a      	orrs	r2, r1
 8009ee2:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	695a      	ldr	r2, [r3, #20]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	699b      	ldr	r3, [r3, #24]
 8009eec:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8009ef2:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a1b      	ldr	r3, [r3, #32]
 8009ef8:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8009efe:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f04:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8009f0a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f10:	3b01      	subs	r3, #1
 8009f12:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8009f14:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8009f20:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8009f22:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f2c:	d107      	bne.n	8009f3e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	691a      	ldr	r2, [r3, #16]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8009f3c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2200      	movs	r2, #0
 8009f44:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	da11      	bge.n	8009f72 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	695a      	ldr	r2, [r3, #20]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8009f5c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f62:	425b      	negs	r3, r3
 8009f64:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	b292      	uxth	r2, r2
 8009f6e:	621a      	str	r2, [r3, #32]
 8009f70:	e006      	b.n	8009f80 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f76:	461a      	mov	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	b292      	uxth	r2, r2
 8009f7e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	da15      	bge.n	8009fb4 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	695a      	ldr	r2, [r3, #20]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009f96:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9c:	425b      	negs	r3, r3
 8009f9e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6a19      	ldr	r1, [r3, #32]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	041a      	lsls	r2, r3, #16
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	430a      	orrs	r2, r1
 8009fb0:	621a      	str	r2, [r3, #32]
 8009fb2:	e009      	b.n	8009fc8 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	6a19      	ldr	r1, [r3, #32]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fbe:	041a      	lsls	r2, r3, #16
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	430a      	orrs	r2, r1
 8009fc6:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fd0:	d006      	beq.n	8009fe0 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	685a      	ldr	r2, [r3, #4]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	b2d2      	uxtb	r2, r2
 8009fdc:	629a      	str	r2, [r3, #40]	; 0x28
 8009fde:	e003      	b.n	8009fe8 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2200      	movs	r2, #0
 8009fee:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009ff0:	bf00      	nop
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	af00      	add	r7, sp, #0

}
 800a000:	bf00      	nop
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
	...

0800a00c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a014:	4b29      	ldr	r3, [pc, #164]	; (800a0bc <HAL_PWREx_ConfigSupply+0xb0>)
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	f003 0307 	and.w	r3, r3, #7
 800a01c:	2b06      	cmp	r3, #6
 800a01e:	d00a      	beq.n	800a036 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a020:	4b26      	ldr	r3, [pc, #152]	; (800a0bc <HAL_PWREx_ConfigSupply+0xb0>)
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d001      	beq.n	800a032 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e040      	b.n	800a0b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a032:	2300      	movs	r3, #0
 800a034:	e03e      	b.n	800a0b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a036:	4b21      	ldr	r3, [pc, #132]	; (800a0bc <HAL_PWREx_ConfigSupply+0xb0>)
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800a03e:	491f      	ldr	r1, [pc, #124]	; (800a0bc <HAL_PWREx_ConfigSupply+0xb0>)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4313      	orrs	r3, r2
 800a044:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a046:	f7fd f8cf 	bl	80071e8 <HAL_GetTick>
 800a04a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a04c:	e009      	b.n	800a062 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a04e:	f7fd f8cb 	bl	80071e8 <HAL_GetTick>
 800a052:	4602      	mov	r2, r0
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a05c:	d901      	bls.n	800a062 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e028      	b.n	800a0b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a062:	4b16      	ldr	r3, [pc, #88]	; (800a0bc <HAL_PWREx_ConfigSupply+0xb0>)
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a06a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a06e:	d1ee      	bne.n	800a04e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2b1e      	cmp	r3, #30
 800a074:	d008      	beq.n	800a088 <HAL_PWREx_ConfigSupply+0x7c>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2b2e      	cmp	r3, #46	; 0x2e
 800a07a:	d005      	beq.n	800a088 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b1d      	cmp	r3, #29
 800a080:	d002      	beq.n	800a088 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b2d      	cmp	r3, #45	; 0x2d
 800a086:	d114      	bne.n	800a0b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800a088:	f7fd f8ae 	bl	80071e8 <HAL_GetTick>
 800a08c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a08e:	e009      	b.n	800a0a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a090:	f7fd f8aa 	bl	80071e8 <HAL_GetTick>
 800a094:	4602      	mov	r2, r0
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a09e:	d901      	bls.n	800a0a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e007      	b.n	800a0b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a0a4:	4b05      	ldr	r3, [pc, #20]	; (800a0bc <HAL_PWREx_ConfigSupply+0xb0>)
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0b0:	d1ee      	bne.n	800a090 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	58024800 	.word	0x58024800

0800a0c0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af02      	add	r7, sp, #8
 800a0c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a0c8:	f7fd f88e 	bl	80071e8 <HAL_GetTick>
 800a0cc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d101      	bne.n	800a0d8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e05f      	b.n	800a198 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d107      	bne.n	800a0f4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 f85f 	bl	800a1a8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a0ea:	f241 3188 	movw	r1, #5000	; 0x1388
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 faca 	bl	800a688 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	3b01      	subs	r3, #1
 800a104:	021a      	lsls	r2, r3, #8
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	430a      	orrs	r2, r1
 800a10c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2200      	movs	r2, #0
 800a118:	2120      	movs	r1, #32
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 fac2 	bl	800a6a4 <QSPI_WaitFlagStateUntilTimeout>
 800a120:	4603      	mov	r3, r0
 800a122:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a124:	7afb      	ldrb	r3, [r7, #11]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d135      	bne.n	800a196 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	4b1b      	ldr	r3, [pc, #108]	; (800a1a0 <HAL_QSPI_Init+0xe0>)
 800a132:	4013      	ands	r3, r2
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	6852      	ldr	r2, [r2, #4]
 800a138:	0611      	lsls	r1, r2, #24
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	68d2      	ldr	r2, [r2, #12]
 800a13e:	4311      	orrs	r1, r2
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	69d2      	ldr	r2, [r2, #28]
 800a144:	4311      	orrs	r1, r2
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	6a12      	ldr	r2, [r2, #32]
 800a14a:	4311      	orrs	r1, r2
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	6812      	ldr	r2, [r2, #0]
 800a150:	430b      	orrs	r3, r1
 800a152:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	685a      	ldr	r2, [r3, #4]
 800a15a:	4b12      	ldr	r3, [pc, #72]	; (800a1a4 <HAL_QSPI_Init+0xe4>)
 800a15c:	4013      	ands	r3, r2
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	6912      	ldr	r2, [r2, #16]
 800a162:	0411      	lsls	r1, r2, #16
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	6952      	ldr	r2, [r2, #20]
 800a168:	4311      	orrs	r1, r2
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	6992      	ldr	r2, [r2, #24]
 800a16e:	4311      	orrs	r1, r2
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	6812      	ldr	r2, [r2, #0]
 800a174:	430b      	orrs	r3, r1
 800a176:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f042 0201 	orr.w	r2, r2, #1
 800a186:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2201      	movs	r2, #1
 800a192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800a196:	7afb      	ldrb	r3, [r7, #11]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	00ffff2f 	.word	0x00ffff2f
 800a1a4:	ffe0f8fe 	.word	0xffe0f8fe

0800a1a8 <HAL_QSPI_MspInit>:
  * @brief Initialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b088      	sub	sp, #32
 800a1c0:	af02      	add	r7, sp, #8
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a1c8:	f7fd f80e 	bl	80071e8 <HAL_GetTick>
 800a1cc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d101      	bne.n	800a1de <HAL_QSPI_Command+0x22>
 800a1da:	2302      	movs	r3, #2
 800a1dc:	e048      	b.n	800a270 <HAL_QSPI_Command+0xb4>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d137      	bne.n	800a262 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	2200      	movs	r2, #0
 800a208:	2120      	movs	r1, #32
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f000 fa4a 	bl	800a6a4 <QSPI_WaitFlagStateUntilTimeout>
 800a210:	4603      	mov	r3, r0
 800a212:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800a214:	7dfb      	ldrb	r3, [r7, #23]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d125      	bne.n	800a266 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a21a:	2200      	movs	r2, #0
 800a21c:	68b9      	ldr	r1, [r7, #8]
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f000 fa77 	bl	800a712 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d115      	bne.n	800a258 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	9300      	str	r3, [sp, #0]
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	2201      	movs	r2, #1
 800a234:	2102      	movs	r1, #2
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f000 fa34 	bl	800a6a4 <QSPI_WaitFlagStateUntilTimeout>
 800a23c:	4603      	mov	r3, r0
 800a23e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800a240:	7dfb      	ldrb	r3, [r7, #23]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10f      	bne.n	800a266 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2202      	movs	r2, #2
 800a24c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a256:	e006      	b.n	800a266 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a260:	e001      	b.n	800a266 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800a262:	2302      	movs	r3, #2
 800a264:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a26e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3718      	adds	r7, #24
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b08a      	sub	sp, #40	; 0x28
 800a27c:	af02      	add	r7, sp, #8
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800a288:	f7fc ffae 	bl	80071e8 <HAL_GetTick>
 800a28c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	3320      	adds	r3, #32
 800a294:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d101      	bne.n	800a2a6 <HAL_QSPI_Transmit+0x2e>
 800a2a2:	2302      	movs	r3, #2
 800a2a4:	e076      	b.n	800a394 <HAL_QSPI_Transmit+0x11c>
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d165      	bne.n	800a386 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d056      	beq.n	800a374 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2212      	movs	r2, #18
 800a2ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	1c5a      	adds	r2, r3, #1
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	1c5a      	adds	r2, r3, #1
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	695a      	ldr	r2, [r3, #20]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800a2fa:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800a2fc:	e01b      	b.n	800a336 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	2201      	movs	r2, #1
 800a306:	2104      	movs	r1, #4
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f000 f9cb 	bl	800a6a4 <QSPI_WaitFlagStateUntilTimeout>
 800a30e:	4603      	mov	r3, r0
 800a310:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800a312:	7ffb      	ldrb	r3, [r7, #31]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d113      	bne.n	800a340 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31c:	781a      	ldrb	r2, [r3, #0]
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a326:	1c5a      	adds	r2, r3, #1
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a330:	1e5a      	subs	r2, r3, #1
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1df      	bne.n	800a2fe <HAL_QSPI_Transmit+0x86>
 800a33e:	e000      	b.n	800a342 <HAL_QSPI_Transmit+0xca>
          break;
 800a340:	bf00      	nop
      }

      if (status == HAL_OK)
 800a342:	7ffb      	ldrb	r3, [r7, #31]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d110      	bne.n	800a36a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	2201      	movs	r2, #1
 800a350:	2102      	movs	r1, #2
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f000 f9a6 	bl	800a6a4 <QSPI_WaitFlagStateUntilTimeout>
 800a358:	4603      	mov	r3, r0
 800a35a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800a35c:	7ffb      	ldrb	r3, [r7, #31]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d103      	bne.n	800a36a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2202      	movs	r2, #2
 800a368:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a372:	e00a      	b.n	800a38a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a378:	f043 0208 	orr.w	r2, r3, #8
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800a380:	2301      	movs	r3, #1
 800a382:	77fb      	strb	r3, [r7, #31]
 800a384:	e001      	b.n	800a38a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800a386:	2302      	movs	r3, #2
 800a388:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800a392:	7ffb      	ldrb	r3, [r7, #31]
}
 800a394:	4618      	mov	r0, r3
 800a396:	3720      	adds	r7, #32
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b08a      	sub	sp, #40	; 0x28
 800a3a0:	af02      	add	r7, sp, #8
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800a3ac:	f7fc ff1c 	bl	80071e8 <HAL_GetTick>
 800a3b0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	699b      	ldr	r3, [r3, #24]
 800a3b8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	3320      	adds	r3, #32
 800a3c0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d101      	bne.n	800a3d2 <HAL_QSPI_Receive+0x36>
 800a3ce:	2302      	movs	r3, #2
 800a3d0:	e07d      	b.n	800a4ce <HAL_QSPI_Receive+0x132>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d16c      	bne.n	800a4c0 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d05d      	beq.n	800a4ae <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2222      	movs	r2, #34	; 0x22
 800a3f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	691b      	ldr	r3, [r3, #16]
 800a400:	1c5a      	adds	r2, r3, #1
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	1c5a      	adds	r2, r3, #1
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	695b      	ldr	r3, [r3, #20]
 800a41e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a42a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	697a      	ldr	r2, [r7, #20]
 800a432:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800a434:	e01c      	b.n	800a470 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	9300      	str	r3, [sp, #0]
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	2201      	movs	r2, #1
 800a43e:	2106      	movs	r1, #6
 800a440:	68f8      	ldr	r0, [r7, #12]
 800a442:	f000 f92f 	bl	800a6a4 <QSPI_WaitFlagStateUntilTimeout>
 800a446:	4603      	mov	r3, r0
 800a448:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800a44a:	7ffb      	ldrb	r3, [r7, #31]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d114      	bne.n	800a47a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a454:	693a      	ldr	r2, [r7, #16]
 800a456:	7812      	ldrb	r2, [r2, #0]
 800a458:	b2d2      	uxtb	r2, r2
 800a45a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a460:	1c5a      	adds	r2, r3, #1
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46a:	1e5a      	subs	r2, r3, #1
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1de      	bne.n	800a436 <HAL_QSPI_Receive+0x9a>
 800a478:	e000      	b.n	800a47c <HAL_QSPI_Receive+0xe0>
          break;
 800a47a:	bf00      	nop
      }

      if (status == HAL_OK)
 800a47c:	7ffb      	ldrb	r3, [r7, #31]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d110      	bne.n	800a4a4 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	2201      	movs	r2, #1
 800a48a:	2102      	movs	r1, #2
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f000 f909 	bl	800a6a4 <QSPI_WaitFlagStateUntilTimeout>
 800a492:	4603      	mov	r3, r0
 800a494:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800a496:	7ffb      	ldrb	r3, [r7, #31]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d103      	bne.n	800a4a4 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2202      	movs	r2, #2
 800a4a2:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a4ac:	e00a      	b.n	800a4c4 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b2:	f043 0208 	orr.w	r2, r3, #8
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	77fb      	strb	r3, [r7, #31]
 800a4be:	e001      	b.n	800a4c4 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800a4cc:	7ffb      	ldrb	r3, [r7, #31]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3720      	adds	r7, #32
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b088      	sub	sp, #32
 800a4da:	af02      	add	r7, sp, #8
 800a4dc:	60f8      	str	r0, [r7, #12]
 800a4de:	60b9      	str	r1, [r7, #8]
 800a4e0:	607a      	str	r2, [r7, #4]
 800a4e2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a4e4:	f7fc fe80 	bl	80071e8 <HAL_GetTick>
 800a4e8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d101      	bne.n	800a4fa <HAL_QSPI_AutoPolling+0x24>
 800a4f6:	2302      	movs	r3, #2
 800a4f8:	e060      	b.n	800a5bc <HAL_QSPI_AutoPolling+0xe6>
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d14f      	bne.n	800a5ae <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2242      	movs	r2, #66	; 0x42
 800a518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	2200      	movs	r2, #0
 800a524:	2120      	movs	r1, #32
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 f8bc 	bl	800a6a4 <QSPI_WaitFlagStateUntilTimeout>
 800a52c:	4603      	mov	r3, r0
 800a52e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800a530:	7dfb      	ldrb	r3, [r7, #23]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d13d      	bne.n	800a5b2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	6812      	ldr	r2, [r2, #0]
 800a53e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	6852      	ldr	r2, [r2, #4]
 800a548:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	6892      	ldr	r2, [r2, #8]
 800a552:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	431a      	orrs	r2, r3
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800a56c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	68da      	ldr	r2, [r3, #12]
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a576:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a57a:	68b9      	ldr	r1, [r7, #8]
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f000 f8c8 	bl	800a712 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	2201      	movs	r2, #1
 800a58a:	2108      	movs	r1, #8
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f000 f889 	bl	800a6a4 <QSPI_WaitFlagStateUntilTimeout>
 800a592:	4603      	mov	r3, r0
 800a594:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800a596:	7dfb      	ldrb	r3, [r7, #23]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10a      	bne.n	800a5b2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2208      	movs	r2, #8
 800a5a2:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5ac:	e001      	b.n	800a5b2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800a5ae:	2302      	movs	r3, #2
 800a5b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3718      	adds	r7, #24
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b088      	sub	sp, #32
 800a5c8:	af02      	add	r7, sp, #8
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a5d0:	f7fc fe0a 	bl	80071e8 <HAL_GetTick>
 800a5d4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d101      	bne.n	800a5e6 <HAL_QSPI_MemoryMapped+0x22>
 800a5e2:	2302      	movs	r3, #2
 800a5e4:	e04c      	b.n	800a680 <HAL_QSPI_MemoryMapped+0xbc>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d13b      	bne.n	800a672 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2282      	movs	r2, #130	; 0x82
 800a604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	2200      	movs	r2, #0
 800a612:	2120      	movs	r1, #32
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f000 f845 	bl	800a6a4 <QSPI_WaitFlagStateUntilTimeout>
 800a61a:	4603      	mov	r3, r0
 800a61c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800a61e:	7dfb      	ldrb	r3, [r7, #23]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d128      	bne.n	800a676 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f023 0108 	bic.w	r1, r3, #8
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	685a      	ldr	r2, [r3, #4]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	430a      	orrs	r2, r1
 800a638:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	2b08      	cmp	r3, #8
 800a640:	d110      	bne.n	800a664 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	6812      	ldr	r2, [r2, #0]
 800a64a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2210      	movs	r2, #16
 800a652:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a662:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800a664:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800a668:	68b9      	ldr	r1, [r7, #8]
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f000 f851 	bl	800a712 <QSPI_Config>
 800a670:	e001      	b.n	800a676 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800a672:	2302      	movs	r3, #2
 800a674:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a67e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3718      	adds	r7, #24
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	683a      	ldr	r2, [r7, #0]
 800a696:	649a      	str	r2, [r3, #72]	; 0x48
}
 800a698:	bf00      	nop
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	603b      	str	r3, [r7, #0]
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a6b4:	e01a      	b.n	800a6ec <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6bc:	d016      	beq.n	800a6ec <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6be:	f7fc fd93 	bl	80071e8 <HAL_GetTick>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	1ad3      	subs	r3, r2, r3
 800a6c8:	69ba      	ldr	r2, [r7, #24]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d302      	bcc.n	800a6d4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d10b      	bne.n	800a6ec <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2204      	movs	r2, #4
 800a6d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6e0:	f043 0201 	orr.w	r2, r3, #1
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e00e      	b.n	800a70a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	689a      	ldr	r2, [r3, #8]
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	bf14      	ite	ne
 800a6fa:	2301      	movne	r3, #1
 800a6fc:	2300      	moveq	r3, #0
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	461a      	mov	r2, r3
 800a702:	79fb      	ldrb	r3, [r7, #7]
 800a704:	429a      	cmp	r2, r3
 800a706:	d1d6      	bne.n	800a6b6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800a712:	b480      	push	{r7}
 800a714:	b085      	sub	sp, #20
 800a716:	af00      	add	r7, sp, #0
 800a718:	60f8      	str	r0, [r7, #12]
 800a71a:	60b9      	str	r1, [r7, #8]
 800a71c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a722:	2b00      	cmp	r3, #0
 800a724:	d009      	beq.n	800a73a <QSPI_Config+0x28>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a72c:	d005      	beq.n	800a73a <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	3a01      	subs	r2, #1
 800a738:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	699b      	ldr	r3, [r3, #24]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f000 80b9 	beq.w	800a8b6 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	6a1b      	ldr	r3, [r3, #32]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d05f      	beq.n	800a80c <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	68ba      	ldr	r2, [r7, #8]
 800a752:	6892      	ldr	r2, [r2, #8]
 800a754:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	69db      	ldr	r3, [r3, #28]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d031      	beq.n	800a7c2 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a766:	431a      	orrs	r2, r3
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a76c:	431a      	orrs	r2, r3
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a772:	431a      	orrs	r2, r3
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	695b      	ldr	r3, [r3, #20]
 800a778:	049b      	lsls	r3, r3, #18
 800a77a:	431a      	orrs	r2, r3
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	691b      	ldr	r3, [r3, #16]
 800a780:	431a      	orrs	r2, r3
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	6a1b      	ldr	r3, [r3, #32]
 800a786:	431a      	orrs	r2, r3
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	431a      	orrs	r2, r3
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	69db      	ldr	r3, [r3, #28]
 800a792:	431a      	orrs	r2, r3
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	431a      	orrs	r2, r3
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	ea42 0103 	orr.w	r1, r2, r3
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	430a      	orrs	r2, r1
 800a7aa:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a7b2:	f000 812e 	beq.w	800aa12 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68ba      	ldr	r2, [r7, #8]
 800a7bc:	6852      	ldr	r2, [r2, #4]
 800a7be:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800a7c0:	e127      	b.n	800aa12 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ca:	431a      	orrs	r2, r3
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7d0:	431a      	orrs	r2, r3
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d6:	431a      	orrs	r2, r3
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	695b      	ldr	r3, [r3, #20]
 800a7dc:	049b      	lsls	r3, r3, #18
 800a7de:	431a      	orrs	r2, r3
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	431a      	orrs	r2, r3
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	6a1b      	ldr	r3, [r3, #32]
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	69db      	ldr	r3, [r3, #28]
 800a7f0:	431a      	orrs	r2, r3
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	431a      	orrs	r2, r3
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	ea42 0103 	orr.w	r1, r2, r3
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	430a      	orrs	r2, r1
 800a808:	615a      	str	r2, [r3, #20]
}
 800a80a:	e102      	b.n	800aa12 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	69db      	ldr	r3, [r3, #28]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d02e      	beq.n	800a872 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a81c:	431a      	orrs	r2, r3
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a822:	431a      	orrs	r2, r3
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a828:	431a      	orrs	r2, r3
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	695b      	ldr	r3, [r3, #20]
 800a82e:	049b      	lsls	r3, r3, #18
 800a830:	431a      	orrs	r2, r3
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	6a1b      	ldr	r3, [r3, #32]
 800a836:	431a      	orrs	r2, r3
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	431a      	orrs	r2, r3
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	69db      	ldr	r3, [r3, #28]
 800a842:	431a      	orrs	r2, r3
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	431a      	orrs	r2, r3
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	ea42 0103 	orr.w	r1, r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	430a      	orrs	r2, r1
 800a85a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a862:	f000 80d6 	beq.w	800aa12 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	6852      	ldr	r2, [r2, #4]
 800a86e:	619a      	str	r2, [r3, #24]
}
 800a870:	e0cf      	b.n	800aa12 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a87a:	431a      	orrs	r2, r3
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a880:	431a      	orrs	r2, r3
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	431a      	orrs	r2, r3
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	695b      	ldr	r3, [r3, #20]
 800a88c:	049b      	lsls	r3, r3, #18
 800a88e:	431a      	orrs	r2, r3
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	6a1b      	ldr	r3, [r3, #32]
 800a894:	431a      	orrs	r2, r3
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	69db      	ldr	r3, [r3, #28]
 800a89a:	431a      	orrs	r2, r3
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	699b      	ldr	r3, [r3, #24]
 800a8a0:	431a      	orrs	r2, r3
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	ea42 0103 	orr.w	r1, r2, r3
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	430a      	orrs	r2, r1
 800a8b2:	615a      	str	r2, [r3, #20]
}
 800a8b4:	e0ad      	b.n	800aa12 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	6a1b      	ldr	r3, [r3, #32]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d058      	beq.n	800a970 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	6892      	ldr	r2, [r2, #8]
 800a8c6:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	69db      	ldr	r3, [r3, #28]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d02d      	beq.n	800a92c <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d8:	431a      	orrs	r2, r3
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8de:	431a      	orrs	r2, r3
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e4:	431a      	orrs	r2, r3
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	049b      	lsls	r3, r3, #18
 800a8ec:	431a      	orrs	r2, r3
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	431a      	orrs	r2, r3
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	6a1b      	ldr	r3, [r3, #32]
 800a8f8:	431a      	orrs	r2, r3
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	431a      	orrs	r2, r3
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	69db      	ldr	r3, [r3, #28]
 800a904:	431a      	orrs	r2, r3
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	ea42 0103 	orr.w	r1, r2, r3
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	430a      	orrs	r2, r1
 800a916:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a91e:	d078      	beq.n	800aa12 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68ba      	ldr	r2, [r7, #8]
 800a926:	6852      	ldr	r2, [r2, #4]
 800a928:	619a      	str	r2, [r3, #24]
}
 800a92a:	e072      	b.n	800aa12 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a934:	431a      	orrs	r2, r3
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a93a:	431a      	orrs	r2, r3
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a940:	431a      	orrs	r2, r3
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	049b      	lsls	r3, r3, #18
 800a948:	431a      	orrs	r2, r3
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	431a      	orrs	r2, r3
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	6a1b      	ldr	r3, [r3, #32]
 800a954:	431a      	orrs	r2, r3
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	69db      	ldr	r3, [r3, #28]
 800a95a:	431a      	orrs	r2, r3
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	699b      	ldr	r3, [r3, #24]
 800a960:	ea42 0103 	orr.w	r1, r2, r3
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	430a      	orrs	r2, r1
 800a96c:	615a      	str	r2, [r3, #20]
}
 800a96e:	e050      	b.n	800aa12 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	69db      	ldr	r3, [r3, #28]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d02a      	beq.n	800a9ce <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a980:	431a      	orrs	r2, r3
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a986:	431a      	orrs	r2, r3
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98c:	431a      	orrs	r2, r3
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	695b      	ldr	r3, [r3, #20]
 800a992:	049b      	lsls	r3, r3, #18
 800a994:	431a      	orrs	r2, r3
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	431a      	orrs	r2, r3
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	431a      	orrs	r2, r3
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	69db      	ldr	r3, [r3, #28]
 800a9a6:	431a      	orrs	r2, r3
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	699b      	ldr	r3, [r3, #24]
 800a9ac:	ea42 0103 	orr.w	r1, r2, r3
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	430a      	orrs	r2, r1
 800a9b8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a9c0:	d027      	beq.n	800aa12 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	6852      	ldr	r2, [r2, #4]
 800a9ca:	619a      	str	r2, [r3, #24]
}
 800a9cc:	e021      	b.n	800aa12 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d01d      	beq.n	800aa12 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9de:	431a      	orrs	r2, r3
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9e4:	431a      	orrs	r2, r3
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ea:	431a      	orrs	r2, r3
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	695b      	ldr	r3, [r3, #20]
 800a9f0:	049b      	lsls	r3, r3, #18
 800a9f2:	431a      	orrs	r2, r3
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	6a1b      	ldr	r3, [r3, #32]
 800a9f8:	431a      	orrs	r2, r3
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	69db      	ldr	r3, [r3, #28]
 800a9fe:	431a      	orrs	r2, r3
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	ea42 0103 	orr.w	r1, r2, r3
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	615a      	str	r2, [r3, #20]
}
 800aa12:	bf00      	nop
 800aa14:	3714      	adds	r7, #20
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
	...

0800aa20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b08c      	sub	sp, #48	; 0x30
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d102      	bne.n	800aa34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	f000 bc1d 	b.w	800b26e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 0301 	and.w	r3, r3, #1
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f000 8087 	beq.w	800ab50 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa42:	4b99      	ldr	r3, [pc, #612]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800aa44:	691b      	ldr	r3, [r3, #16]
 800aa46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa4c:	4b96      	ldr	r3, [pc, #600]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800aa4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa50:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800aa52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa54:	2b10      	cmp	r3, #16
 800aa56:	d007      	beq.n	800aa68 <HAL_RCC_OscConfig+0x48>
 800aa58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5a:	2b18      	cmp	r3, #24
 800aa5c:	d110      	bne.n	800aa80 <HAL_RCC_OscConfig+0x60>
 800aa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa60:	f003 0303 	and.w	r3, r3, #3
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d10b      	bne.n	800aa80 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa68:	4b8f      	ldr	r3, [pc, #572]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d06c      	beq.n	800ab4e <HAL_RCC_OscConfig+0x12e>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d168      	bne.n	800ab4e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e3f6      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa88:	d106      	bne.n	800aa98 <HAL_RCC_OscConfig+0x78>
 800aa8a:	4b87      	ldr	r3, [pc, #540]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a86      	ldr	r2, [pc, #536]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800aa90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa94:	6013      	str	r3, [r2, #0]
 800aa96:	e02e      	b.n	800aaf6 <HAL_RCC_OscConfig+0xd6>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10c      	bne.n	800aaba <HAL_RCC_OscConfig+0x9a>
 800aaa0:	4b81      	ldr	r3, [pc, #516]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a80      	ldr	r2, [pc, #512]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800aaa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aaaa:	6013      	str	r3, [r2, #0]
 800aaac:	4b7e      	ldr	r3, [pc, #504]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a7d      	ldr	r2, [pc, #500]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800aab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	e01d      	b.n	800aaf6 <HAL_RCC_OscConfig+0xd6>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aac2:	d10c      	bne.n	800aade <HAL_RCC_OscConfig+0xbe>
 800aac4:	4b78      	ldr	r3, [pc, #480]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a77      	ldr	r2, [pc, #476]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800aaca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aace:	6013      	str	r3, [r2, #0]
 800aad0:	4b75      	ldr	r3, [pc, #468]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a74      	ldr	r2, [pc, #464]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800aad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aada:	6013      	str	r3, [r2, #0]
 800aadc:	e00b      	b.n	800aaf6 <HAL_RCC_OscConfig+0xd6>
 800aade:	4b72      	ldr	r3, [pc, #456]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a71      	ldr	r2, [pc, #452]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800aae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aae8:	6013      	str	r3, [r2, #0]
 800aaea:	4b6f      	ldr	r3, [pc, #444]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a6e      	ldr	r2, [pc, #440]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800aaf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aaf4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d013      	beq.n	800ab26 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aafe:	f7fc fb73 	bl	80071e8 <HAL_GetTick>
 800ab02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab04:	e008      	b.n	800ab18 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab06:	f7fc fb6f 	bl	80071e8 <HAL_GetTick>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	2b64      	cmp	r3, #100	; 0x64
 800ab12:	d901      	bls.n	800ab18 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800ab14:	2303      	movs	r3, #3
 800ab16:	e3aa      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab18:	4b63      	ldr	r3, [pc, #396]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d0f0      	beq.n	800ab06 <HAL_RCC_OscConfig+0xe6>
 800ab24:	e014      	b.n	800ab50 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab26:	f7fc fb5f 	bl	80071e8 <HAL_GetTick>
 800ab2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab2c:	e008      	b.n	800ab40 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab2e:	f7fc fb5b 	bl	80071e8 <HAL_GetTick>
 800ab32:	4602      	mov	r2, r0
 800ab34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	2b64      	cmp	r3, #100	; 0x64
 800ab3a:	d901      	bls.n	800ab40 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800ab3c:	2303      	movs	r3, #3
 800ab3e:	e396      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab40:	4b59      	ldr	r3, [pc, #356]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1f0      	bne.n	800ab2e <HAL_RCC_OscConfig+0x10e>
 800ab4c:	e000      	b.n	800ab50 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f003 0302 	and.w	r3, r3, #2
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f000 80cb 	beq.w	800acf4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab5e:	4b52      	ldr	r3, [pc, #328]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab66:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ab68:	4b4f      	ldr	r3, [pc, #316]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800ab6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab6c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ab6e:	6a3b      	ldr	r3, [r7, #32]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d007      	beq.n	800ab84 <HAL_RCC_OscConfig+0x164>
 800ab74:	6a3b      	ldr	r3, [r7, #32]
 800ab76:	2b18      	cmp	r3, #24
 800ab78:	d156      	bne.n	800ac28 <HAL_RCC_OscConfig+0x208>
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	f003 0303 	and.w	r3, r3, #3
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d151      	bne.n	800ac28 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab84:	4b48      	ldr	r3, [pc, #288]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 0304 	and.w	r3, r3, #4
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d005      	beq.n	800ab9c <HAL_RCC_OscConfig+0x17c>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d101      	bne.n	800ab9c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e368      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ab9c:	4b42      	ldr	r3, [pc, #264]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f023 0219 	bic.w	r2, r3, #25
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	493f      	ldr	r1, [pc, #252]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800abaa:	4313      	orrs	r3, r2
 800abac:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800abae:	f7fc fb1b 	bl	80071e8 <HAL_GetTick>
 800abb2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800abb4:	e008      	b.n	800abc8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800abb6:	f7fc fb17 	bl	80071e8 <HAL_GetTick>
 800abba:	4602      	mov	r2, r0
 800abbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbe:	1ad3      	subs	r3, r2, r3
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	d901      	bls.n	800abc8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e352      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800abc8:	4b37      	ldr	r3, [pc, #220]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0304 	and.w	r3, r3, #4
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d0f0      	beq.n	800abb6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abd4:	f7fc fb38 	bl	8007248 <HAL_GetREVID>
 800abd8:	4603      	mov	r3, r0
 800abda:	f241 0203 	movw	r2, #4099	; 0x1003
 800abde:	4293      	cmp	r3, r2
 800abe0:	d817      	bhi.n	800ac12 <HAL_RCC_OscConfig+0x1f2>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	2b40      	cmp	r3, #64	; 0x40
 800abe8:	d108      	bne.n	800abfc <HAL_RCC_OscConfig+0x1dc>
 800abea:	4b2f      	ldr	r3, [pc, #188]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800abf2:	4a2d      	ldr	r2, [pc, #180]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800abf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abf8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800abfa:	e07b      	b.n	800acf4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abfc:	4b2a      	ldr	r3, [pc, #168]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	691b      	ldr	r3, [r3, #16]
 800ac08:	031b      	lsls	r3, r3, #12
 800ac0a:	4927      	ldr	r1, [pc, #156]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac10:	e070      	b.n	800acf4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac12:	4b25      	ldr	r3, [pc, #148]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	061b      	lsls	r3, r3, #24
 800ac20:	4921      	ldr	r1, [pc, #132]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800ac22:	4313      	orrs	r3, r2
 800ac24:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac26:	e065      	b.n	800acf4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d048      	beq.n	800acc2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ac30:	4b1d      	ldr	r3, [pc, #116]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f023 0219 	bic.w	r2, r3, #25
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	491a      	ldr	r1, [pc, #104]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac42:	f7fc fad1 	bl	80071e8 <HAL_GetTick>
 800ac46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac48:	e008      	b.n	800ac5c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac4a:	f7fc facd 	bl	80071e8 <HAL_GetTick>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac52:	1ad3      	subs	r3, r2, r3
 800ac54:	2b02      	cmp	r3, #2
 800ac56:	d901      	bls.n	800ac5c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800ac58:	2303      	movs	r3, #3
 800ac5a:	e308      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac5c:	4b12      	ldr	r3, [pc, #72]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 0304 	and.w	r3, r3, #4
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d0f0      	beq.n	800ac4a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac68:	f7fc faee 	bl	8007248 <HAL_GetREVID>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	f241 0203 	movw	r2, #4099	; 0x1003
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d81a      	bhi.n	800acac <HAL_RCC_OscConfig+0x28c>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	2b40      	cmp	r3, #64	; 0x40
 800ac7c:	d108      	bne.n	800ac90 <HAL_RCC_OscConfig+0x270>
 800ac7e:	4b0a      	ldr	r3, [pc, #40]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ac86:	4a08      	ldr	r2, [pc, #32]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800ac88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac8c:	6053      	str	r3, [r2, #4]
 800ac8e:	e031      	b.n	800acf4 <HAL_RCC_OscConfig+0x2d4>
 800ac90:	4b05      	ldr	r3, [pc, #20]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	691b      	ldr	r3, [r3, #16]
 800ac9c:	031b      	lsls	r3, r3, #12
 800ac9e:	4902      	ldr	r1, [pc, #8]	; (800aca8 <HAL_RCC_OscConfig+0x288>)
 800aca0:	4313      	orrs	r3, r2
 800aca2:	604b      	str	r3, [r1, #4]
 800aca4:	e026      	b.n	800acf4 <HAL_RCC_OscConfig+0x2d4>
 800aca6:	bf00      	nop
 800aca8:	58024400 	.word	0x58024400
 800acac:	4b9a      	ldr	r3, [pc, #616]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	691b      	ldr	r3, [r3, #16]
 800acb8:	061b      	lsls	r3, r3, #24
 800acba:	4997      	ldr	r1, [pc, #604]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800acbc:	4313      	orrs	r3, r2
 800acbe:	604b      	str	r3, [r1, #4]
 800acc0:	e018      	b.n	800acf4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800acc2:	4b95      	ldr	r3, [pc, #596]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a94      	ldr	r2, [pc, #592]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800acc8:	f023 0301 	bic.w	r3, r3, #1
 800accc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acce:	f7fc fa8b 	bl	80071e8 <HAL_GetTick>
 800acd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800acd4:	e008      	b.n	800ace8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800acd6:	f7fc fa87 	bl	80071e8 <HAL_GetTick>
 800acda:	4602      	mov	r2, r0
 800acdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acde:	1ad3      	subs	r3, r2, r3
 800ace0:	2b02      	cmp	r3, #2
 800ace2:	d901      	bls.n	800ace8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800ace4:	2303      	movs	r3, #3
 800ace6:	e2c2      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ace8:	4b8b      	ldr	r3, [pc, #556]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f003 0304 	and.w	r3, r3, #4
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1f0      	bne.n	800acd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f003 0310 	and.w	r3, r3, #16
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f000 80a9 	beq.w	800ae54 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad02:	4b85      	ldr	r3, [pc, #532]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ad04:	691b      	ldr	r3, [r3, #16]
 800ad06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ad0c:	4b82      	ldr	r3, [pc, #520]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ad0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad10:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	2b08      	cmp	r3, #8
 800ad16:	d007      	beq.n	800ad28 <HAL_RCC_OscConfig+0x308>
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	2b18      	cmp	r3, #24
 800ad1c:	d13a      	bne.n	800ad94 <HAL_RCC_OscConfig+0x374>
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	f003 0303 	and.w	r3, r3, #3
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d135      	bne.n	800ad94 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad28:	4b7b      	ldr	r3, [pc, #492]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d005      	beq.n	800ad40 <HAL_RCC_OscConfig+0x320>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	69db      	ldr	r3, [r3, #28]
 800ad38:	2b80      	cmp	r3, #128	; 0x80
 800ad3a:	d001      	beq.n	800ad40 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e296      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad40:	f7fc fa82 	bl	8007248 <HAL_GetREVID>
 800ad44:	4603      	mov	r3, r0
 800ad46:	f241 0203 	movw	r2, #4099	; 0x1003
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d817      	bhi.n	800ad7e <HAL_RCC_OscConfig+0x35e>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a1b      	ldr	r3, [r3, #32]
 800ad52:	2b20      	cmp	r3, #32
 800ad54:	d108      	bne.n	800ad68 <HAL_RCC_OscConfig+0x348>
 800ad56:	4b70      	ldr	r3, [pc, #448]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ad5e:	4a6e      	ldr	r2, [pc, #440]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ad60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad64:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad66:	e075      	b.n	800ae54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad68:	4b6b      	ldr	r3, [pc, #428]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6a1b      	ldr	r3, [r3, #32]
 800ad74:	069b      	lsls	r3, r3, #26
 800ad76:	4968      	ldr	r1, [pc, #416]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad7c:	e06a      	b.n	800ae54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad7e:	4b66      	ldr	r3, [pc, #408]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	061b      	lsls	r3, r3, #24
 800ad8c:	4962      	ldr	r1, [pc, #392]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad92:	e05f      	b.n	800ae54 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	69db      	ldr	r3, [r3, #28]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d042      	beq.n	800ae22 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ad9c:	4b5e      	ldr	r3, [pc, #376]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a5d      	ldr	r2, [pc, #372]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ada2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ada6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ada8:	f7fc fa1e 	bl	80071e8 <HAL_GetTick>
 800adac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800adae:	e008      	b.n	800adc2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800adb0:	f7fc fa1a 	bl	80071e8 <HAL_GetTick>
 800adb4:	4602      	mov	r2, r0
 800adb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d901      	bls.n	800adc2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800adbe:	2303      	movs	r3, #3
 800adc0:	e255      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800adc2:	4b55      	ldr	r3, [pc, #340]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d0f0      	beq.n	800adb0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800adce:	f7fc fa3b 	bl	8007248 <HAL_GetREVID>
 800add2:	4603      	mov	r3, r0
 800add4:	f241 0203 	movw	r2, #4099	; 0x1003
 800add8:	4293      	cmp	r3, r2
 800adda:	d817      	bhi.n	800ae0c <HAL_RCC_OscConfig+0x3ec>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a1b      	ldr	r3, [r3, #32]
 800ade0:	2b20      	cmp	r3, #32
 800ade2:	d108      	bne.n	800adf6 <HAL_RCC_OscConfig+0x3d6>
 800ade4:	4b4c      	ldr	r3, [pc, #304]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800adec:	4a4a      	ldr	r2, [pc, #296]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800adee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800adf2:	6053      	str	r3, [r2, #4]
 800adf4:	e02e      	b.n	800ae54 <HAL_RCC_OscConfig+0x434>
 800adf6:	4b48      	ldr	r3, [pc, #288]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a1b      	ldr	r3, [r3, #32]
 800ae02:	069b      	lsls	r3, r3, #26
 800ae04:	4944      	ldr	r1, [pc, #272]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ae06:	4313      	orrs	r3, r2
 800ae08:	604b      	str	r3, [r1, #4]
 800ae0a:	e023      	b.n	800ae54 <HAL_RCC_OscConfig+0x434>
 800ae0c:	4b42      	ldr	r3, [pc, #264]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ae0e:	68db      	ldr	r3, [r3, #12]
 800ae10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6a1b      	ldr	r3, [r3, #32]
 800ae18:	061b      	lsls	r3, r3, #24
 800ae1a:	493f      	ldr	r1, [pc, #252]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	60cb      	str	r3, [r1, #12]
 800ae20:	e018      	b.n	800ae54 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ae22:	4b3d      	ldr	r3, [pc, #244]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a3c      	ldr	r2, [pc, #240]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ae28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae2e:	f7fc f9db 	bl	80071e8 <HAL_GetTick>
 800ae32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ae34:	e008      	b.n	800ae48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ae36:	f7fc f9d7 	bl	80071e8 <HAL_GetTick>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3e:	1ad3      	subs	r3, r2, r3
 800ae40:	2b02      	cmp	r3, #2
 800ae42:	d901      	bls.n	800ae48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ae44:	2303      	movs	r3, #3
 800ae46:	e212      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ae48:	4b33      	ldr	r3, [pc, #204]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1f0      	bne.n	800ae36 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 0308 	and.w	r3, r3, #8
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d036      	beq.n	800aece <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	695b      	ldr	r3, [r3, #20]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d019      	beq.n	800ae9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae68:	4b2b      	ldr	r3, [pc, #172]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ae6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae6c:	4a2a      	ldr	r2, [pc, #168]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ae6e:	f043 0301 	orr.w	r3, r3, #1
 800ae72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae74:	f7fc f9b8 	bl	80071e8 <HAL_GetTick>
 800ae78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ae7a:	e008      	b.n	800ae8e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae7c:	f7fc f9b4 	bl	80071e8 <HAL_GetTick>
 800ae80:	4602      	mov	r2, r0
 800ae82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	d901      	bls.n	800ae8e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	e1ef      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ae8e:	4b22      	ldr	r3, [pc, #136]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ae90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae92:	f003 0302 	and.w	r3, r3, #2
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d0f0      	beq.n	800ae7c <HAL_RCC_OscConfig+0x45c>
 800ae9a:	e018      	b.n	800aece <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae9c:	4b1e      	ldr	r3, [pc, #120]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800ae9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aea0:	4a1d      	ldr	r2, [pc, #116]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800aea2:	f023 0301 	bic.w	r3, r3, #1
 800aea6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aea8:	f7fc f99e 	bl	80071e8 <HAL_GetTick>
 800aeac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aeae:	e008      	b.n	800aec2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aeb0:	f7fc f99a 	bl	80071e8 <HAL_GetTick>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb8:	1ad3      	subs	r3, r2, r3
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d901      	bls.n	800aec2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800aebe:	2303      	movs	r3, #3
 800aec0:	e1d5      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aec2:	4b15      	ldr	r3, [pc, #84]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800aec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aec6:	f003 0302 	and.w	r3, r3, #2
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1f0      	bne.n	800aeb0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f003 0320 	and.w	r3, r3, #32
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d039      	beq.n	800af4e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	699b      	ldr	r3, [r3, #24]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d01c      	beq.n	800af1c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aee2:	4b0d      	ldr	r3, [pc, #52]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a0c      	ldr	r2, [pc, #48]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800aee8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aeec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aeee:	f7fc f97b 	bl	80071e8 <HAL_GetTick>
 800aef2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aef4:	e008      	b.n	800af08 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800aef6:	f7fc f977 	bl	80071e8 <HAL_GetTick>
 800aefa:	4602      	mov	r2, r0
 800aefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefe:	1ad3      	subs	r3, r2, r3
 800af00:	2b02      	cmp	r3, #2
 800af02:	d901      	bls.n	800af08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800af04:	2303      	movs	r3, #3
 800af06:	e1b2      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800af08:	4b03      	ldr	r3, [pc, #12]	; (800af18 <HAL_RCC_OscConfig+0x4f8>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af10:	2b00      	cmp	r3, #0
 800af12:	d0f0      	beq.n	800aef6 <HAL_RCC_OscConfig+0x4d6>
 800af14:	e01b      	b.n	800af4e <HAL_RCC_OscConfig+0x52e>
 800af16:	bf00      	nop
 800af18:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800af1c:	4b9b      	ldr	r3, [pc, #620]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a9a      	ldr	r2, [pc, #616]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800af22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800af28:	f7fc f95e 	bl	80071e8 <HAL_GetTick>
 800af2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800af2e:	e008      	b.n	800af42 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800af30:	f7fc f95a 	bl	80071e8 <HAL_GetTick>
 800af34:	4602      	mov	r2, r0
 800af36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af38:	1ad3      	subs	r3, r2, r3
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	d901      	bls.n	800af42 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800af3e:	2303      	movs	r3, #3
 800af40:	e195      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800af42:	4b92      	ldr	r3, [pc, #584]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1f0      	bne.n	800af30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 0304 	and.w	r3, r3, #4
 800af56:	2b00      	cmp	r3, #0
 800af58:	f000 8081 	beq.w	800b05e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800af5c:	4b8c      	ldr	r3, [pc, #560]	; (800b190 <HAL_RCC_OscConfig+0x770>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a8b      	ldr	r2, [pc, #556]	; (800b190 <HAL_RCC_OscConfig+0x770>)
 800af62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af68:	f7fc f93e 	bl	80071e8 <HAL_GetTick>
 800af6c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af6e:	e008      	b.n	800af82 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800af70:	f7fc f93a 	bl	80071e8 <HAL_GetTick>
 800af74:	4602      	mov	r2, r0
 800af76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af78:	1ad3      	subs	r3, r2, r3
 800af7a:	2b64      	cmp	r3, #100	; 0x64
 800af7c:	d901      	bls.n	800af82 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800af7e:	2303      	movs	r3, #3
 800af80:	e175      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af82:	4b83      	ldr	r3, [pc, #524]	; (800b190 <HAL_RCC_OscConfig+0x770>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d0f0      	beq.n	800af70 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	2b01      	cmp	r3, #1
 800af94:	d106      	bne.n	800afa4 <HAL_RCC_OscConfig+0x584>
 800af96:	4b7d      	ldr	r3, [pc, #500]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800af98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af9a:	4a7c      	ldr	r2, [pc, #496]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800af9c:	f043 0301 	orr.w	r3, r3, #1
 800afa0:	6713      	str	r3, [r2, #112]	; 0x70
 800afa2:	e02d      	b.n	800b000 <HAL_RCC_OscConfig+0x5e0>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d10c      	bne.n	800afc6 <HAL_RCC_OscConfig+0x5a6>
 800afac:	4b77      	ldr	r3, [pc, #476]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800afae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afb0:	4a76      	ldr	r2, [pc, #472]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800afb2:	f023 0301 	bic.w	r3, r3, #1
 800afb6:	6713      	str	r3, [r2, #112]	; 0x70
 800afb8:	4b74      	ldr	r3, [pc, #464]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800afba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afbc:	4a73      	ldr	r2, [pc, #460]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800afbe:	f023 0304 	bic.w	r3, r3, #4
 800afc2:	6713      	str	r3, [r2, #112]	; 0x70
 800afc4:	e01c      	b.n	800b000 <HAL_RCC_OscConfig+0x5e0>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	2b05      	cmp	r3, #5
 800afcc:	d10c      	bne.n	800afe8 <HAL_RCC_OscConfig+0x5c8>
 800afce:	4b6f      	ldr	r3, [pc, #444]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800afd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd2:	4a6e      	ldr	r2, [pc, #440]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800afd4:	f043 0304 	orr.w	r3, r3, #4
 800afd8:	6713      	str	r3, [r2, #112]	; 0x70
 800afda:	4b6c      	ldr	r3, [pc, #432]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800afdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afde:	4a6b      	ldr	r2, [pc, #428]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800afe0:	f043 0301 	orr.w	r3, r3, #1
 800afe4:	6713      	str	r3, [r2, #112]	; 0x70
 800afe6:	e00b      	b.n	800b000 <HAL_RCC_OscConfig+0x5e0>
 800afe8:	4b68      	ldr	r3, [pc, #416]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800afea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afec:	4a67      	ldr	r2, [pc, #412]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800afee:	f023 0301 	bic.w	r3, r3, #1
 800aff2:	6713      	str	r3, [r2, #112]	; 0x70
 800aff4:	4b65      	ldr	r3, [pc, #404]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800aff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff8:	4a64      	ldr	r2, [pc, #400]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800affa:	f023 0304 	bic.w	r3, r3, #4
 800affe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d015      	beq.n	800b034 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b008:	f7fc f8ee 	bl	80071e8 <HAL_GetTick>
 800b00c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b00e:	e00a      	b.n	800b026 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b010:	f7fc f8ea 	bl	80071e8 <HAL_GetTick>
 800b014:	4602      	mov	r2, r0
 800b016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b018:	1ad3      	subs	r3, r2, r3
 800b01a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b01e:	4293      	cmp	r3, r2
 800b020:	d901      	bls.n	800b026 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800b022:	2303      	movs	r3, #3
 800b024:	e123      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b026:	4b59      	ldr	r3, [pc, #356]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b02a:	f003 0302 	and.w	r3, r3, #2
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d0ee      	beq.n	800b010 <HAL_RCC_OscConfig+0x5f0>
 800b032:	e014      	b.n	800b05e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b034:	f7fc f8d8 	bl	80071e8 <HAL_GetTick>
 800b038:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b03a:	e00a      	b.n	800b052 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b03c:	f7fc f8d4 	bl	80071e8 <HAL_GetTick>
 800b040:	4602      	mov	r2, r0
 800b042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b044:	1ad3      	subs	r3, r2, r3
 800b046:	f241 3288 	movw	r2, #5000	; 0x1388
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d901      	bls.n	800b052 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800b04e:	2303      	movs	r3, #3
 800b050:	e10d      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b052:	4b4e      	ldr	r3, [pc, #312]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b056:	f003 0302 	and.w	r3, r3, #2
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d1ee      	bne.n	800b03c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b062:	2b00      	cmp	r3, #0
 800b064:	f000 8102 	beq.w	800b26c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b068:	4b48      	ldr	r3, [pc, #288]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b06a:	691b      	ldr	r3, [r3, #16]
 800b06c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b070:	2b18      	cmp	r3, #24
 800b072:	f000 80bd 	beq.w	800b1f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	f040 809e 	bne.w	800b1bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b080:	4b42      	ldr	r3, [pc, #264]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a41      	ldr	r2, [pc, #260]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b08a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b08c:	f7fc f8ac 	bl	80071e8 <HAL_GetTick>
 800b090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b092:	e008      	b.n	800b0a6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b094:	f7fc f8a8 	bl	80071e8 <HAL_GetTick>
 800b098:	4602      	mov	r2, r0
 800b09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09c:	1ad3      	subs	r3, r2, r3
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d901      	bls.n	800b0a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800b0a2:	2303      	movs	r3, #3
 800b0a4:	e0e3      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b0a6:	4b39      	ldr	r3, [pc, #228]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1f0      	bne.n	800b094 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b0b2:	4b36      	ldr	r3, [pc, #216]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b0b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0b6:	4b37      	ldr	r3, [pc, #220]	; (800b194 <HAL_RCC_OscConfig+0x774>)
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b0c2:	0112      	lsls	r2, r2, #4
 800b0c4:	430a      	orrs	r2, r1
 800b0c6:	4931      	ldr	r1, [pc, #196]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	628b      	str	r3, [r1, #40]	; 0x28
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	025b      	lsls	r3, r3, #9
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	431a      	orrs	r2, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	041b      	lsls	r3, r3, #16
 800b0ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b0ee:	431a      	orrs	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0f4:	3b01      	subs	r3, #1
 800b0f6:	061b      	lsls	r3, r3, #24
 800b0f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b0fc:	4923      	ldr	r1, [pc, #140]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b0fe:	4313      	orrs	r3, r2
 800b100:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800b102:	4b22      	ldr	r3, [pc, #136]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b106:	4a21      	ldr	r2, [pc, #132]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b108:	f023 0301 	bic.w	r3, r3, #1
 800b10c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b10e:	4b1f      	ldr	r3, [pc, #124]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b112:	4b21      	ldr	r3, [pc, #132]	; (800b198 <HAL_RCC_OscConfig+0x778>)
 800b114:	4013      	ands	r3, r2
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b11a:	00d2      	lsls	r2, r2, #3
 800b11c:	491b      	ldr	r1, [pc, #108]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b11e:	4313      	orrs	r3, r2
 800b120:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b122:	4b1a      	ldr	r3, [pc, #104]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b126:	f023 020c 	bic.w	r2, r3, #12
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12e:	4917      	ldr	r1, [pc, #92]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b130:	4313      	orrs	r3, r2
 800b132:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b134:	4b15      	ldr	r3, [pc, #84]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b138:	f023 0202 	bic.w	r2, r3, #2
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b140:	4912      	ldr	r1, [pc, #72]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b142:	4313      	orrs	r3, r2
 800b144:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b146:	4b11      	ldr	r3, [pc, #68]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14a:	4a10      	ldr	r2, [pc, #64]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b14c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b150:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b152:	4b0e      	ldr	r3, [pc, #56]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b156:	4a0d      	ldr	r2, [pc, #52]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b15c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b15e:	4b0b      	ldr	r3, [pc, #44]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b162:	4a0a      	ldr	r2, [pc, #40]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b168:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800b16a:	4b08      	ldr	r3, [pc, #32]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b16e:	4a07      	ldr	r2, [pc, #28]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b170:	f043 0301 	orr.w	r3, r3, #1
 800b174:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b176:	4b05      	ldr	r3, [pc, #20]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a04      	ldr	r2, [pc, #16]	; (800b18c <HAL_RCC_OscConfig+0x76c>)
 800b17c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b182:	f7fc f831 	bl	80071e8 <HAL_GetTick>
 800b186:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b188:	e011      	b.n	800b1ae <HAL_RCC_OscConfig+0x78e>
 800b18a:	bf00      	nop
 800b18c:	58024400 	.word	0x58024400
 800b190:	58024800 	.word	0x58024800
 800b194:	fffffc0c 	.word	0xfffffc0c
 800b198:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b19c:	f7fc f824 	bl	80071e8 <HAL_GetTick>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d901      	bls.n	800b1ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800b1aa:	2303      	movs	r3, #3
 800b1ac:	e05f      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b1ae:	4b32      	ldr	r3, [pc, #200]	; (800b278 <HAL_RCC_OscConfig+0x858>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d0f0      	beq.n	800b19c <HAL_RCC_OscConfig+0x77c>
 800b1ba:	e057      	b.n	800b26c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1bc:	4b2e      	ldr	r3, [pc, #184]	; (800b278 <HAL_RCC_OscConfig+0x858>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a2d      	ldr	r2, [pc, #180]	; (800b278 <HAL_RCC_OscConfig+0x858>)
 800b1c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b1c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1c8:	f7fc f80e 	bl	80071e8 <HAL_GetTick>
 800b1cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b1ce:	e008      	b.n	800b1e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b1d0:	f7fc f80a 	bl	80071e8 <HAL_GetTick>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	2b02      	cmp	r3, #2
 800b1dc:	d901      	bls.n	800b1e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800b1de:	2303      	movs	r3, #3
 800b1e0:	e045      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b1e2:	4b25      	ldr	r3, [pc, #148]	; (800b278 <HAL_RCC_OscConfig+0x858>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1f0      	bne.n	800b1d0 <HAL_RCC_OscConfig+0x7b0>
 800b1ee:	e03d      	b.n	800b26c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b1f0:	4b21      	ldr	r3, [pc, #132]	; (800b278 <HAL_RCC_OscConfig+0x858>)
 800b1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b1f6:	4b20      	ldr	r3, [pc, #128]	; (800b278 <HAL_RCC_OscConfig+0x858>)
 800b1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1fa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b200:	2b01      	cmp	r3, #1
 800b202:	d031      	beq.n	800b268 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	f003 0203 	and.w	r2, r3, #3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b20e:	429a      	cmp	r2, r3
 800b210:	d12a      	bne.n	800b268 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	091b      	lsrs	r3, r3, #4
 800b216:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b21e:	429a      	cmp	r2, r3
 800b220:	d122      	bne.n	800b268 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b22c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b22e:	429a      	cmp	r2, r3
 800b230:	d11a      	bne.n	800b268 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	0a5b      	lsrs	r3, r3, #9
 800b236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b23e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b240:	429a      	cmp	r2, r3
 800b242:	d111      	bne.n	800b268 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	0c1b      	lsrs	r3, r3, #16
 800b248:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b250:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b252:	429a      	cmp	r2, r3
 800b254:	d108      	bne.n	800b268 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	0e1b      	lsrs	r3, r3, #24
 800b25a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b262:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b264:	429a      	cmp	r2, r3
 800b266:	d001      	beq.n	800b26c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800b268:	2301      	movs	r3, #1
 800b26a:	e000      	b.n	800b26e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3730      	adds	r7, #48	; 0x30
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	58024400 	.word	0x58024400

0800b27c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b086      	sub	sp, #24
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d101      	bne.n	800b290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b28c:	2301      	movs	r3, #1
 800b28e:	e19c      	b.n	800b5ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b290:	4b8a      	ldr	r3, [pc, #552]	; (800b4bc <HAL_RCC_ClockConfig+0x240>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f003 030f 	and.w	r3, r3, #15
 800b298:	683a      	ldr	r2, [r7, #0]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d910      	bls.n	800b2c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b29e:	4b87      	ldr	r3, [pc, #540]	; (800b4bc <HAL_RCC_ClockConfig+0x240>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f023 020f 	bic.w	r2, r3, #15
 800b2a6:	4985      	ldr	r1, [pc, #532]	; (800b4bc <HAL_RCC_ClockConfig+0x240>)
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2ae:	4b83      	ldr	r3, [pc, #524]	; (800b4bc <HAL_RCC_ClockConfig+0x240>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 030f 	and.w	r3, r3, #15
 800b2b6:	683a      	ldr	r2, [r7, #0]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d001      	beq.n	800b2c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e184      	b.n	800b5ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f003 0304 	and.w	r3, r3, #4
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d010      	beq.n	800b2ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	691a      	ldr	r2, [r3, #16]
 800b2d0:	4b7b      	ldr	r3, [pc, #492]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b2d2:	699b      	ldr	r3, [r3, #24]
 800b2d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d908      	bls.n	800b2ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b2dc:	4b78      	ldr	r3, [pc, #480]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b2de:	699b      	ldr	r3, [r3, #24]
 800b2e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	4975      	ldr	r1, [pc, #468]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f003 0308 	and.w	r3, r3, #8
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d010      	beq.n	800b31c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	695a      	ldr	r2, [r3, #20]
 800b2fe:	4b70      	ldr	r3, [pc, #448]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b300:	69db      	ldr	r3, [r3, #28]
 800b302:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b306:	429a      	cmp	r2, r3
 800b308:	d908      	bls.n	800b31c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b30a:	4b6d      	ldr	r3, [pc, #436]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b30c:	69db      	ldr	r3, [r3, #28]
 800b30e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	695b      	ldr	r3, [r3, #20]
 800b316:	496a      	ldr	r1, [pc, #424]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b318:	4313      	orrs	r3, r2
 800b31a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f003 0310 	and.w	r3, r3, #16
 800b324:	2b00      	cmp	r3, #0
 800b326:	d010      	beq.n	800b34a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	699a      	ldr	r2, [r3, #24]
 800b32c:	4b64      	ldr	r3, [pc, #400]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b32e:	69db      	ldr	r3, [r3, #28]
 800b330:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b334:	429a      	cmp	r2, r3
 800b336:	d908      	bls.n	800b34a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b338:	4b61      	ldr	r3, [pc, #388]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b33a:	69db      	ldr	r3, [r3, #28]
 800b33c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	699b      	ldr	r3, [r3, #24]
 800b344:	495e      	ldr	r1, [pc, #376]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b346:	4313      	orrs	r3, r2
 800b348:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f003 0320 	and.w	r3, r3, #32
 800b352:	2b00      	cmp	r3, #0
 800b354:	d010      	beq.n	800b378 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	69da      	ldr	r2, [r3, #28]
 800b35a:	4b59      	ldr	r3, [pc, #356]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b362:	429a      	cmp	r2, r3
 800b364:	d908      	bls.n	800b378 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b366:	4b56      	ldr	r3, [pc, #344]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b368:	6a1b      	ldr	r3, [r3, #32]
 800b36a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	69db      	ldr	r3, [r3, #28]
 800b372:	4953      	ldr	r1, [pc, #332]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b374:	4313      	orrs	r3, r2
 800b376:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f003 0302 	and.w	r3, r3, #2
 800b380:	2b00      	cmp	r3, #0
 800b382:	d010      	beq.n	800b3a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	68da      	ldr	r2, [r3, #12]
 800b388:	4b4d      	ldr	r3, [pc, #308]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b38a:	699b      	ldr	r3, [r3, #24]
 800b38c:	f003 030f 	and.w	r3, r3, #15
 800b390:	429a      	cmp	r2, r3
 800b392:	d908      	bls.n	800b3a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b394:	4b4a      	ldr	r3, [pc, #296]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b396:	699b      	ldr	r3, [r3, #24]
 800b398:	f023 020f 	bic.w	r2, r3, #15
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	4947      	ldr	r1, [pc, #284]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f003 0301 	and.w	r3, r3, #1
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d055      	beq.n	800b45e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b3b2:	4b43      	ldr	r3, [pc, #268]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b3b4:	699b      	ldr	r3, [r3, #24]
 800b3b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	4940      	ldr	r1, [pc, #256]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	d107      	bne.n	800b3dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b3cc:	4b3c      	ldr	r3, [pc, #240]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d121      	bne.n	800b41c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e0f6      	b.n	800b5ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	2b03      	cmp	r3, #3
 800b3e2:	d107      	bne.n	800b3f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b3e4:	4b36      	ldr	r3, [pc, #216]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d115      	bne.n	800b41c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e0ea      	b.n	800b5ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d107      	bne.n	800b40c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b3fc:	4b30      	ldr	r3, [pc, #192]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b404:	2b00      	cmp	r3, #0
 800b406:	d109      	bne.n	800b41c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b408:	2301      	movs	r3, #1
 800b40a:	e0de      	b.n	800b5ca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b40c:	4b2c      	ldr	r3, [pc, #176]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f003 0304 	and.w	r3, r3, #4
 800b414:	2b00      	cmp	r3, #0
 800b416:	d101      	bne.n	800b41c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b418:	2301      	movs	r3, #1
 800b41a:	e0d6      	b.n	800b5ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b41c:	4b28      	ldr	r3, [pc, #160]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b41e:	691b      	ldr	r3, [r3, #16]
 800b420:	f023 0207 	bic.w	r2, r3, #7
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	4925      	ldr	r1, [pc, #148]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b42a:	4313      	orrs	r3, r2
 800b42c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b42e:	f7fb fedb 	bl	80071e8 <HAL_GetTick>
 800b432:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b434:	e00a      	b.n	800b44c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b436:	f7fb fed7 	bl	80071e8 <HAL_GetTick>
 800b43a:	4602      	mov	r2, r0
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	f241 3288 	movw	r2, #5000	; 0x1388
 800b444:	4293      	cmp	r3, r2
 800b446:	d901      	bls.n	800b44c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b448:	2303      	movs	r3, #3
 800b44a:	e0be      	b.n	800b5ca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b44c:	4b1c      	ldr	r3, [pc, #112]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	00db      	lsls	r3, r3, #3
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d1eb      	bne.n	800b436 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f003 0302 	and.w	r3, r3, #2
 800b466:	2b00      	cmp	r3, #0
 800b468:	d010      	beq.n	800b48c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	68da      	ldr	r2, [r3, #12]
 800b46e:	4b14      	ldr	r3, [pc, #80]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b470:	699b      	ldr	r3, [r3, #24]
 800b472:	f003 030f 	and.w	r3, r3, #15
 800b476:	429a      	cmp	r2, r3
 800b478:	d208      	bcs.n	800b48c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b47a:	4b11      	ldr	r3, [pc, #68]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b47c:	699b      	ldr	r3, [r3, #24]
 800b47e:	f023 020f 	bic.w	r2, r3, #15
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	490e      	ldr	r1, [pc, #56]	; (800b4c0 <HAL_RCC_ClockConfig+0x244>)
 800b488:	4313      	orrs	r3, r2
 800b48a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b48c:	4b0b      	ldr	r3, [pc, #44]	; (800b4bc <HAL_RCC_ClockConfig+0x240>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f003 030f 	and.w	r3, r3, #15
 800b494:	683a      	ldr	r2, [r7, #0]
 800b496:	429a      	cmp	r2, r3
 800b498:	d214      	bcs.n	800b4c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b49a:	4b08      	ldr	r3, [pc, #32]	; (800b4bc <HAL_RCC_ClockConfig+0x240>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f023 020f 	bic.w	r2, r3, #15
 800b4a2:	4906      	ldr	r1, [pc, #24]	; (800b4bc <HAL_RCC_ClockConfig+0x240>)
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4aa:	4b04      	ldr	r3, [pc, #16]	; (800b4bc <HAL_RCC_ClockConfig+0x240>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f003 030f 	and.w	r3, r3, #15
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d005      	beq.n	800b4c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	e086      	b.n	800b5ca <HAL_RCC_ClockConfig+0x34e>
 800b4bc:	52002000 	.word	0x52002000
 800b4c0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f003 0304 	and.w	r3, r3, #4
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d010      	beq.n	800b4f2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	691a      	ldr	r2, [r3, #16]
 800b4d4:	4b3f      	ldr	r3, [pc, #252]	; (800b5d4 <HAL_RCC_ClockConfig+0x358>)
 800b4d6:	699b      	ldr	r3, [r3, #24]
 800b4d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d208      	bcs.n	800b4f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b4e0:	4b3c      	ldr	r3, [pc, #240]	; (800b5d4 <HAL_RCC_ClockConfig+0x358>)
 800b4e2:	699b      	ldr	r3, [r3, #24]
 800b4e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	691b      	ldr	r3, [r3, #16]
 800b4ec:	4939      	ldr	r1, [pc, #228]	; (800b5d4 <HAL_RCC_ClockConfig+0x358>)
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f003 0308 	and.w	r3, r3, #8
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d010      	beq.n	800b520 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	695a      	ldr	r2, [r3, #20]
 800b502:	4b34      	ldr	r3, [pc, #208]	; (800b5d4 <HAL_RCC_ClockConfig+0x358>)
 800b504:	69db      	ldr	r3, [r3, #28]
 800b506:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d208      	bcs.n	800b520 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b50e:	4b31      	ldr	r3, [pc, #196]	; (800b5d4 <HAL_RCC_ClockConfig+0x358>)
 800b510:	69db      	ldr	r3, [r3, #28]
 800b512:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	695b      	ldr	r3, [r3, #20]
 800b51a:	492e      	ldr	r1, [pc, #184]	; (800b5d4 <HAL_RCC_ClockConfig+0x358>)
 800b51c:	4313      	orrs	r3, r2
 800b51e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f003 0310 	and.w	r3, r3, #16
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d010      	beq.n	800b54e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	699a      	ldr	r2, [r3, #24]
 800b530:	4b28      	ldr	r3, [pc, #160]	; (800b5d4 <HAL_RCC_ClockConfig+0x358>)
 800b532:	69db      	ldr	r3, [r3, #28]
 800b534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b538:	429a      	cmp	r2, r3
 800b53a:	d208      	bcs.n	800b54e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b53c:	4b25      	ldr	r3, [pc, #148]	; (800b5d4 <HAL_RCC_ClockConfig+0x358>)
 800b53e:	69db      	ldr	r3, [r3, #28]
 800b540:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	699b      	ldr	r3, [r3, #24]
 800b548:	4922      	ldr	r1, [pc, #136]	; (800b5d4 <HAL_RCC_ClockConfig+0x358>)
 800b54a:	4313      	orrs	r3, r2
 800b54c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f003 0320 	and.w	r3, r3, #32
 800b556:	2b00      	cmp	r3, #0
 800b558:	d010      	beq.n	800b57c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	69da      	ldr	r2, [r3, #28]
 800b55e:	4b1d      	ldr	r3, [pc, #116]	; (800b5d4 <HAL_RCC_ClockConfig+0x358>)
 800b560:	6a1b      	ldr	r3, [r3, #32]
 800b562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b566:	429a      	cmp	r2, r3
 800b568:	d208      	bcs.n	800b57c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b56a:	4b1a      	ldr	r3, [pc, #104]	; (800b5d4 <HAL_RCC_ClockConfig+0x358>)
 800b56c:	6a1b      	ldr	r3, [r3, #32]
 800b56e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	69db      	ldr	r3, [r3, #28]
 800b576:	4917      	ldr	r1, [pc, #92]	; (800b5d4 <HAL_RCC_ClockConfig+0x358>)
 800b578:	4313      	orrs	r3, r2
 800b57a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b57c:	f000 f834 	bl	800b5e8 <HAL_RCC_GetSysClockFreq>
 800b580:	4602      	mov	r2, r0
 800b582:	4b14      	ldr	r3, [pc, #80]	; (800b5d4 <HAL_RCC_ClockConfig+0x358>)
 800b584:	699b      	ldr	r3, [r3, #24]
 800b586:	0a1b      	lsrs	r3, r3, #8
 800b588:	f003 030f 	and.w	r3, r3, #15
 800b58c:	4912      	ldr	r1, [pc, #72]	; (800b5d8 <HAL_RCC_ClockConfig+0x35c>)
 800b58e:	5ccb      	ldrb	r3, [r1, r3]
 800b590:	f003 031f 	and.w	r3, r3, #31
 800b594:	fa22 f303 	lsr.w	r3, r2, r3
 800b598:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b59a:	4b0e      	ldr	r3, [pc, #56]	; (800b5d4 <HAL_RCC_ClockConfig+0x358>)
 800b59c:	699b      	ldr	r3, [r3, #24]
 800b59e:	f003 030f 	and.w	r3, r3, #15
 800b5a2:	4a0d      	ldr	r2, [pc, #52]	; (800b5d8 <HAL_RCC_ClockConfig+0x35c>)
 800b5a4:	5cd3      	ldrb	r3, [r2, r3]
 800b5a6:	f003 031f 	and.w	r3, r3, #31
 800b5aa:	693a      	ldr	r2, [r7, #16]
 800b5ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b5b0:	4a0a      	ldr	r2, [pc, #40]	; (800b5dc <HAL_RCC_ClockConfig+0x360>)
 800b5b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b5b4:	4a0a      	ldr	r2, [pc, #40]	; (800b5e0 <HAL_RCC_ClockConfig+0x364>)
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b5ba:	4b0a      	ldr	r3, [pc, #40]	; (800b5e4 <HAL_RCC_ClockConfig+0x368>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fb fdc8 	bl	8007154 <HAL_InitTick>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3718      	adds	r7, #24
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	58024400 	.word	0x58024400
 800b5d8:	08010c1c 	.word	0x08010c1c
 800b5dc:	24000004 	.word	0x24000004
 800b5e0:	24000000 	.word	0x24000000
 800b5e4:	240000a0 	.word	0x240000a0

0800b5e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b089      	sub	sp, #36	; 0x24
 800b5ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b5ee:	4bb3      	ldr	r3, [pc, #716]	; (800b8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5f0:	691b      	ldr	r3, [r3, #16]
 800b5f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b5f6:	2b18      	cmp	r3, #24
 800b5f8:	f200 8155 	bhi.w	800b8a6 <HAL_RCC_GetSysClockFreq+0x2be>
 800b5fc:	a201      	add	r2, pc, #4	; (adr r2, 800b604 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b602:	bf00      	nop
 800b604:	0800b669 	.word	0x0800b669
 800b608:	0800b8a7 	.word	0x0800b8a7
 800b60c:	0800b8a7 	.word	0x0800b8a7
 800b610:	0800b8a7 	.word	0x0800b8a7
 800b614:	0800b8a7 	.word	0x0800b8a7
 800b618:	0800b8a7 	.word	0x0800b8a7
 800b61c:	0800b8a7 	.word	0x0800b8a7
 800b620:	0800b8a7 	.word	0x0800b8a7
 800b624:	0800b68f 	.word	0x0800b68f
 800b628:	0800b8a7 	.word	0x0800b8a7
 800b62c:	0800b8a7 	.word	0x0800b8a7
 800b630:	0800b8a7 	.word	0x0800b8a7
 800b634:	0800b8a7 	.word	0x0800b8a7
 800b638:	0800b8a7 	.word	0x0800b8a7
 800b63c:	0800b8a7 	.word	0x0800b8a7
 800b640:	0800b8a7 	.word	0x0800b8a7
 800b644:	0800b695 	.word	0x0800b695
 800b648:	0800b8a7 	.word	0x0800b8a7
 800b64c:	0800b8a7 	.word	0x0800b8a7
 800b650:	0800b8a7 	.word	0x0800b8a7
 800b654:	0800b8a7 	.word	0x0800b8a7
 800b658:	0800b8a7 	.word	0x0800b8a7
 800b65c:	0800b8a7 	.word	0x0800b8a7
 800b660:	0800b8a7 	.word	0x0800b8a7
 800b664:	0800b69b 	.word	0x0800b69b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b668:	4b94      	ldr	r3, [pc, #592]	; (800b8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f003 0320 	and.w	r3, r3, #32
 800b670:	2b00      	cmp	r3, #0
 800b672:	d009      	beq.n	800b688 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b674:	4b91      	ldr	r3, [pc, #580]	; (800b8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	08db      	lsrs	r3, r3, #3
 800b67a:	f003 0303 	and.w	r3, r3, #3
 800b67e:	4a90      	ldr	r2, [pc, #576]	; (800b8c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b680:	fa22 f303 	lsr.w	r3, r2, r3
 800b684:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b686:	e111      	b.n	800b8ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b688:	4b8d      	ldr	r3, [pc, #564]	; (800b8c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b68a:	61bb      	str	r3, [r7, #24]
    break;
 800b68c:	e10e      	b.n	800b8ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b68e:	4b8d      	ldr	r3, [pc, #564]	; (800b8c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b690:	61bb      	str	r3, [r7, #24]
    break;
 800b692:	e10b      	b.n	800b8ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b694:	4b8c      	ldr	r3, [pc, #560]	; (800b8c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b696:	61bb      	str	r3, [r7, #24]
    break;
 800b698:	e108      	b.n	800b8ac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b69a:	4b88      	ldr	r3, [pc, #544]	; (800b8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b69e:	f003 0303 	and.w	r3, r3, #3
 800b6a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b6a4:	4b85      	ldr	r3, [pc, #532]	; (800b8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6a8:	091b      	lsrs	r3, r3, #4
 800b6aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b6b0:	4b82      	ldr	r3, [pc, #520]	; (800b8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b4:	f003 0301 	and.w	r3, r3, #1
 800b6b8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b6ba:	4b80      	ldr	r3, [pc, #512]	; (800b8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6be:	08db      	lsrs	r3, r3, #3
 800b6c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b6c4:	68fa      	ldr	r2, [r7, #12]
 800b6c6:	fb02 f303 	mul.w	r3, r2, r3
 800b6ca:	ee07 3a90 	vmov	s15, r3
 800b6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6d2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	f000 80e1 	beq.w	800b8a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	f000 8083 	beq.w	800b7ec <HAL_RCC_GetSysClockFreq+0x204>
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	2b02      	cmp	r3, #2
 800b6ea:	f200 80a1 	bhi.w	800b830 <HAL_RCC_GetSysClockFreq+0x248>
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d003      	beq.n	800b6fc <HAL_RCC_GetSysClockFreq+0x114>
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d056      	beq.n	800b7a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b6fa:	e099      	b.n	800b830 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6fc:	4b6f      	ldr	r3, [pc, #444]	; (800b8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f003 0320 	and.w	r3, r3, #32
 800b704:	2b00      	cmp	r3, #0
 800b706:	d02d      	beq.n	800b764 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b708:	4b6c      	ldr	r3, [pc, #432]	; (800b8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	08db      	lsrs	r3, r3, #3
 800b70e:	f003 0303 	and.w	r3, r3, #3
 800b712:	4a6b      	ldr	r2, [pc, #428]	; (800b8c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b714:	fa22 f303 	lsr.w	r3, r2, r3
 800b718:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	ee07 3a90 	vmov	s15, r3
 800b720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	ee07 3a90 	vmov	s15, r3
 800b72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b72e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b732:	4b62      	ldr	r3, [pc, #392]	; (800b8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b73a:	ee07 3a90 	vmov	s15, r3
 800b73e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b742:	ed97 6a02 	vldr	s12, [r7, #8]
 800b746:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b8cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b74a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b74e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b75a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b75e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b762:	e087      	b.n	800b874 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	ee07 3a90 	vmov	s15, r3
 800b76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b76e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b8d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b776:	4b51      	ldr	r3, [pc, #324]	; (800b8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b77e:	ee07 3a90 	vmov	s15, r3
 800b782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b786:	ed97 6a02 	vldr	s12, [r7, #8]
 800b78a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b8cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b78e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b79a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b79e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7a6:	e065      	b.n	800b874 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	ee07 3a90 	vmov	s15, r3
 800b7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b8d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b7b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ba:	4b40      	ldr	r3, [pc, #256]	; (800b8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7c2:	ee07 3a90 	vmov	s15, r3
 800b7c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b8cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b7d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7ea:	e043      	b.n	800b874 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	ee07 3a90 	vmov	s15, r3
 800b7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b8d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b7fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7fe:	4b2f      	ldr	r3, [pc, #188]	; (800b8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b806:	ee07 3a90 	vmov	s15, r3
 800b80a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b80e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b812:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b8cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b81a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b81e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b82a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b82e:	e021      	b.n	800b874 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	ee07 3a90 	vmov	s15, r3
 800b836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b83a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b8d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b83e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b842:	4b1e      	ldr	r3, [pc, #120]	; (800b8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b84a:	ee07 3a90 	vmov	s15, r3
 800b84e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b852:	ed97 6a02 	vldr	s12, [r7, #8]
 800b856:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b8cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b85a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b85e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b86a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b86e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b872:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b874:	4b11      	ldr	r3, [pc, #68]	; (800b8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b878:	0a5b      	lsrs	r3, r3, #9
 800b87a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b87e:	3301      	adds	r3, #1
 800b880:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	ee07 3a90 	vmov	s15, r3
 800b888:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b88c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b898:	ee17 3a90 	vmov	r3, s15
 800b89c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b89e:	e005      	b.n	800b8ac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	61bb      	str	r3, [r7, #24]
    break;
 800b8a4:	e002      	b.n	800b8ac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b8a6:	4b07      	ldr	r3, [pc, #28]	; (800b8c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b8a8:	61bb      	str	r3, [r7, #24]
    break;
 800b8aa:	bf00      	nop
  }

  return sysclockfreq;
 800b8ac:	69bb      	ldr	r3, [r7, #24]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3724      	adds	r7, #36	; 0x24
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	58024400 	.word	0x58024400
 800b8c0:	03d09000 	.word	0x03d09000
 800b8c4:	003d0900 	.word	0x003d0900
 800b8c8:	017d7840 	.word	0x017d7840
 800b8cc:	46000000 	.word	0x46000000
 800b8d0:	4c742400 	.word	0x4c742400
 800b8d4:	4a742400 	.word	0x4a742400
 800b8d8:	4bbebc20 	.word	0x4bbebc20

0800b8dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b8e2:	f7ff fe81 	bl	800b5e8 <HAL_RCC_GetSysClockFreq>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	4b10      	ldr	r3, [pc, #64]	; (800b92c <HAL_RCC_GetHCLKFreq+0x50>)
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	0a1b      	lsrs	r3, r3, #8
 800b8ee:	f003 030f 	and.w	r3, r3, #15
 800b8f2:	490f      	ldr	r1, [pc, #60]	; (800b930 <HAL_RCC_GetHCLKFreq+0x54>)
 800b8f4:	5ccb      	ldrb	r3, [r1, r3]
 800b8f6:	f003 031f 	and.w	r3, r3, #31
 800b8fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b8fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b900:	4b0a      	ldr	r3, [pc, #40]	; (800b92c <HAL_RCC_GetHCLKFreq+0x50>)
 800b902:	699b      	ldr	r3, [r3, #24]
 800b904:	f003 030f 	and.w	r3, r3, #15
 800b908:	4a09      	ldr	r2, [pc, #36]	; (800b930 <HAL_RCC_GetHCLKFreq+0x54>)
 800b90a:	5cd3      	ldrb	r3, [r2, r3]
 800b90c:	f003 031f 	and.w	r3, r3, #31
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	fa22 f303 	lsr.w	r3, r2, r3
 800b916:	4a07      	ldr	r2, [pc, #28]	; (800b934 <HAL_RCC_GetHCLKFreq+0x58>)
 800b918:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b91a:	4a07      	ldr	r2, [pc, #28]	; (800b938 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b920:	4b04      	ldr	r3, [pc, #16]	; (800b934 <HAL_RCC_GetHCLKFreq+0x58>)
 800b922:	681b      	ldr	r3, [r3, #0]
}
 800b924:	4618      	mov	r0, r3
 800b926:	3708      	adds	r7, #8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	58024400 	.word	0x58024400
 800b930:	08010c1c 	.word	0x08010c1c
 800b934:	24000004 	.word	0x24000004
 800b938:	24000000 	.word	0x24000000

0800b93c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b940:	f7ff ffcc 	bl	800b8dc <HAL_RCC_GetHCLKFreq>
 800b944:	4602      	mov	r2, r0
 800b946:	4b06      	ldr	r3, [pc, #24]	; (800b960 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b948:	69db      	ldr	r3, [r3, #28]
 800b94a:	091b      	lsrs	r3, r3, #4
 800b94c:	f003 0307 	and.w	r3, r3, #7
 800b950:	4904      	ldr	r1, [pc, #16]	; (800b964 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b952:	5ccb      	ldrb	r3, [r1, r3]
 800b954:	f003 031f 	and.w	r3, r3, #31
 800b958:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	bd80      	pop	{r7, pc}
 800b960:	58024400 	.word	0x58024400
 800b964:	08010c1c 	.word	0x08010c1c

0800b968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b96c:	f7ff ffb6 	bl	800b8dc <HAL_RCC_GetHCLKFreq>
 800b970:	4602      	mov	r2, r0
 800b972:	4b06      	ldr	r3, [pc, #24]	; (800b98c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b974:	69db      	ldr	r3, [r3, #28]
 800b976:	0a1b      	lsrs	r3, r3, #8
 800b978:	f003 0307 	and.w	r3, r3, #7
 800b97c:	4904      	ldr	r1, [pc, #16]	; (800b990 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b97e:	5ccb      	ldrb	r3, [r1, r3]
 800b980:	f003 031f 	and.w	r3, r3, #31
 800b984:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b988:	4618      	mov	r0, r3
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	58024400 	.word	0x58024400
 800b990:	08010c1c 	.word	0x08010c1c

0800b994 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b086      	sub	sp, #24
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b99c:	2300      	movs	r3, #0
 800b99e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d03f      	beq.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b9b8:	d02a      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b9ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b9be:	d824      	bhi.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b9c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9c4:	d018      	beq.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b9c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9ca:	d81e      	bhi.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d003      	beq.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b9d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9d4:	d007      	beq.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b9d6:	e018      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9d8:	4ba3      	ldr	r3, [pc, #652]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9dc:	4aa2      	ldr	r2, [pc, #648]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b9de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b9e4:	e015      	b.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	3304      	adds	r3, #4
 800b9ea:	2102      	movs	r1, #2
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f001 f9fd 	bl	800cdec <RCCEx_PLL2_Config>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b9f6:	e00c      	b.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	3324      	adds	r3, #36	; 0x24
 800b9fc:	2102      	movs	r1, #2
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f001 faa6 	bl	800cf50 <RCCEx_PLL3_Config>
 800ba04:	4603      	mov	r3, r0
 800ba06:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ba08:	e003      	b.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	75fb      	strb	r3, [r7, #23]
      break;
 800ba0e:	e000      	b.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800ba10:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba12:	7dfb      	ldrb	r3, [r7, #23]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d109      	bne.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ba18:	4b93      	ldr	r3, [pc, #588]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ba1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba24:	4990      	ldr	r1, [pc, #576]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ba26:	4313      	orrs	r3, r2
 800ba28:	650b      	str	r3, [r1, #80]	; 0x50
 800ba2a:	e001      	b.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba2c:	7dfb      	ldrb	r3, [r7, #23]
 800ba2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d03d      	beq.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba40:	2b04      	cmp	r3, #4
 800ba42:	d826      	bhi.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800ba44:	a201      	add	r2, pc, #4	; (adr r2, 800ba4c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800ba46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba4a:	bf00      	nop
 800ba4c:	0800ba61 	.word	0x0800ba61
 800ba50:	0800ba6f 	.word	0x0800ba6f
 800ba54:	0800ba81 	.word	0x0800ba81
 800ba58:	0800ba99 	.word	0x0800ba99
 800ba5c:	0800ba99 	.word	0x0800ba99
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba60:	4b81      	ldr	r3, [pc, #516]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ba62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba64:	4a80      	ldr	r2, [pc, #512]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ba66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba6c:	e015      	b.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	3304      	adds	r3, #4
 800ba72:	2100      	movs	r1, #0
 800ba74:	4618      	mov	r0, r3
 800ba76:	f001 f9b9 	bl	800cdec <RCCEx_PLL2_Config>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba7e:	e00c      	b.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	3324      	adds	r3, #36	; 0x24
 800ba84:	2100      	movs	r1, #0
 800ba86:	4618      	mov	r0, r3
 800ba88:	f001 fa62 	bl	800cf50 <RCCEx_PLL3_Config>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba90:	e003      	b.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	75fb      	strb	r3, [r7, #23]
      break;
 800ba96:	e000      	b.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800ba98:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba9a:	7dfb      	ldrb	r3, [r7, #23]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d109      	bne.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800baa0:	4b71      	ldr	r3, [pc, #452]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800baa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baa4:	f023 0207 	bic.w	r2, r3, #7
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baac:	496e      	ldr	r1, [pc, #440]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800baae:	4313      	orrs	r3, r2
 800bab0:	650b      	str	r3, [r1, #80]	; 0x50
 800bab2:	e001      	b.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bab4:	7dfb      	ldrb	r3, [r7, #23]
 800bab6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d042      	beq.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bacc:	d02b      	beq.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800bace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bad2:	d825      	bhi.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bad4:	2bc0      	cmp	r3, #192	; 0xc0
 800bad6:	d028      	beq.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800bad8:	2bc0      	cmp	r3, #192	; 0xc0
 800bada:	d821      	bhi.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800badc:	2b80      	cmp	r3, #128	; 0x80
 800bade:	d016      	beq.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800bae0:	2b80      	cmp	r3, #128	; 0x80
 800bae2:	d81d      	bhi.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d002      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800bae8:	2b40      	cmp	r3, #64	; 0x40
 800baea:	d007      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x168>
 800baec:	e018      	b.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baee:	4b5e      	ldr	r3, [pc, #376]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800baf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf2:	4a5d      	ldr	r2, [pc, #372]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800baf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800baf8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bafa:	e017      	b.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	3304      	adds	r3, #4
 800bb00:	2100      	movs	r1, #0
 800bb02:	4618      	mov	r0, r3
 800bb04:	f001 f972 	bl	800cdec <RCCEx_PLL2_Config>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bb0c:	e00e      	b.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	3324      	adds	r3, #36	; 0x24
 800bb12:	2100      	movs	r1, #0
 800bb14:	4618      	mov	r0, r3
 800bb16:	f001 fa1b 	bl	800cf50 <RCCEx_PLL3_Config>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bb1e:	e005      	b.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
 800bb22:	75fb      	strb	r3, [r7, #23]
      break;
 800bb24:	e002      	b.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800bb26:	bf00      	nop
 800bb28:	e000      	b.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800bb2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb2c:	7dfb      	ldrb	r3, [r7, #23]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d109      	bne.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800bb32:	4b4d      	ldr	r3, [pc, #308]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bb34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb36:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb3e:	494a      	ldr	r1, [pc, #296]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bb40:	4313      	orrs	r3, r2
 800bb42:	650b      	str	r3, [r1, #80]	; 0x50
 800bb44:	e001      	b.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb46:	7dfb      	ldrb	r3, [r7, #23]
 800bb48:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d049      	beq.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bb5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb60:	d030      	beq.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800bb62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb66:	d82a      	bhi.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bb68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bb6c:	d02c      	beq.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800bb6e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bb72:	d824      	bhi.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bb74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb78:	d018      	beq.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x218>
 800bb7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb7e:	d81e      	bhi.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d003      	beq.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800bb84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb88:	d007      	beq.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bb8a:	e018      	b.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb8c:	4b36      	ldr	r3, [pc, #216]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb90:	4a35      	ldr	r2, [pc, #212]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bb92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bb98:	e017      	b.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	3304      	adds	r3, #4
 800bb9e:	2100      	movs	r1, #0
 800bba0:	4618      	mov	r0, r3
 800bba2:	f001 f923 	bl	800cdec <RCCEx_PLL2_Config>
 800bba6:	4603      	mov	r3, r0
 800bba8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bbaa:	e00e      	b.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	3324      	adds	r3, #36	; 0x24
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f001 f9cc 	bl	800cf50 <RCCEx_PLL3_Config>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bbbc:	e005      	b.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	75fb      	strb	r3, [r7, #23]
      break;
 800bbc2:	e002      	b.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800bbc4:	bf00      	nop
 800bbc6:	e000      	b.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800bbc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbca:	7dfb      	ldrb	r3, [r7, #23]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d10a      	bne.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bbd0:	4b25      	ldr	r3, [pc, #148]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bbd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbd4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bbde:	4922      	ldr	r1, [pc, #136]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	658b      	str	r3, [r1, #88]	; 0x58
 800bbe4:	e001      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbe6:	7dfb      	ldrb	r3, [r7, #23]
 800bbe8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d04b      	beq.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bbfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc00:	d030      	beq.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800bc02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc06:	d82a      	bhi.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bc08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bc0c:	d02e      	beq.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800bc0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bc12:	d824      	bhi.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bc14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc18:	d018      	beq.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800bc1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc1e:	d81e      	bhi.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d003      	beq.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bc24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc28:	d007      	beq.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bc2a:	e018      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc2c:	4b0e      	ldr	r3, [pc, #56]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc30:	4a0d      	ldr	r2, [pc, #52]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bc32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bc38:	e019      	b.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	2100      	movs	r1, #0
 800bc40:	4618      	mov	r0, r3
 800bc42:	f001 f8d3 	bl	800cdec <RCCEx_PLL2_Config>
 800bc46:	4603      	mov	r3, r0
 800bc48:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bc4a:	e010      	b.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	3324      	adds	r3, #36	; 0x24
 800bc50:	2100      	movs	r1, #0
 800bc52:	4618      	mov	r0, r3
 800bc54:	f001 f97c 	bl	800cf50 <RCCEx_PLL3_Config>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bc5c:	e007      	b.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	75fb      	strb	r3, [r7, #23]
      break;
 800bc62:	e004      	b.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800bc64:	bf00      	nop
 800bc66:	e002      	b.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bc68:	58024400 	.word	0x58024400
      break;
 800bc6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc6e:	7dfb      	ldrb	r3, [r7, #23]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d10a      	bne.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bc74:	4b99      	ldr	r3, [pc, #612]	; (800bedc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bc76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc78:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bc82:	4996      	ldr	r1, [pc, #600]	; (800bedc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bc84:	4313      	orrs	r3, r2
 800bc86:	658b      	str	r3, [r1, #88]	; 0x58
 800bc88:	e001      	b.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc8a:	7dfb      	ldrb	r3, [r7, #23]
 800bc8c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d032      	beq.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc9e:	2b30      	cmp	r3, #48	; 0x30
 800bca0:	d01c      	beq.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x348>
 800bca2:	2b30      	cmp	r3, #48	; 0x30
 800bca4:	d817      	bhi.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800bca6:	2b20      	cmp	r3, #32
 800bca8:	d00c      	beq.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800bcaa:	2b20      	cmp	r3, #32
 800bcac:	d813      	bhi.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d016      	beq.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800bcb2:	2b10      	cmp	r3, #16
 800bcb4:	d10f      	bne.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcb6:	4b89      	ldr	r3, [pc, #548]	; (800bedc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bcb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcba:	4a88      	ldr	r2, [pc, #544]	; (800bedc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bcbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800bcc2:	e00e      	b.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	3304      	adds	r3, #4
 800bcc8:	2102      	movs	r1, #2
 800bcca:	4618      	mov	r0, r3
 800bccc:	f001 f88e 	bl	800cdec <RCCEx_PLL2_Config>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800bcd4:	e005      	b.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	75fb      	strb	r3, [r7, #23]
      break;
 800bcda:	e002      	b.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800bcdc:	bf00      	nop
 800bcde:	e000      	b.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800bce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d109      	bne.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bce8:	4b7c      	ldr	r3, [pc, #496]	; (800bedc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bcea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcf4:	4979      	ldr	r1, [pc, #484]	; (800bedc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bcfa:	e001      	b.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcfc:	7dfb      	ldrb	r3, [r7, #23]
 800bcfe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d047      	beq.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd14:	d030      	beq.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800bd16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd1a:	d82a      	bhi.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bd1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bd20:	d02c      	beq.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800bd22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bd26:	d824      	bhi.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bd28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd2c:	d018      	beq.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800bd2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd32:	d81e      	bhi.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d003      	beq.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800bd38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd3c:	d007      	beq.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800bd3e:	e018      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd40:	4b66      	ldr	r3, [pc, #408]	; (800bedc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bd42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd44:	4a65      	ldr	r2, [pc, #404]	; (800bedc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bd46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bd4c:	e017      	b.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	3304      	adds	r3, #4
 800bd52:	2100      	movs	r1, #0
 800bd54:	4618      	mov	r0, r3
 800bd56:	f001 f849 	bl	800cdec <RCCEx_PLL2_Config>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bd5e:	e00e      	b.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	3324      	adds	r3, #36	; 0x24
 800bd64:	2100      	movs	r1, #0
 800bd66:	4618      	mov	r0, r3
 800bd68:	f001 f8f2 	bl	800cf50 <RCCEx_PLL3_Config>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bd70:	e005      	b.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd72:	2301      	movs	r3, #1
 800bd74:	75fb      	strb	r3, [r7, #23]
      break;
 800bd76:	e002      	b.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800bd78:	bf00      	nop
 800bd7a:	e000      	b.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800bd7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd7e:	7dfb      	ldrb	r3, [r7, #23]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d109      	bne.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bd84:	4b55      	ldr	r3, [pc, #340]	; (800bedc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bd86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd88:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd90:	4952      	ldr	r1, [pc, #328]	; (800bedc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bd92:	4313      	orrs	r3, r2
 800bd94:	650b      	str	r3, [r1, #80]	; 0x50
 800bd96:	e001      	b.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd98:	7dfb      	ldrb	r3, [r7, #23]
 800bd9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d049      	beq.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bdb0:	d02e      	beq.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800bdb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bdb6:	d828      	bhi.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bdb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bdbc:	d02a      	beq.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800bdbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bdc2:	d822      	bhi.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bdc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bdc8:	d026      	beq.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800bdca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bdce:	d81c      	bhi.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bdd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdd4:	d010      	beq.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800bdd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdda:	d816      	bhi.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d01d      	beq.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x488>
 800bde0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bde4:	d111      	bne.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	3304      	adds	r3, #4
 800bdea:	2101      	movs	r1, #1
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 fffd 	bl	800cdec <RCCEx_PLL2_Config>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bdf6:	e012      	b.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	3324      	adds	r3, #36	; 0x24
 800bdfc:	2101      	movs	r1, #1
 800bdfe:	4618      	mov	r0, r3
 800be00:	f001 f8a6 	bl	800cf50 <RCCEx_PLL3_Config>
 800be04:	4603      	mov	r3, r0
 800be06:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800be08:	e009      	b.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be0a:	2301      	movs	r3, #1
 800be0c:	75fb      	strb	r3, [r7, #23]
      break;
 800be0e:	e006      	b.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800be10:	bf00      	nop
 800be12:	e004      	b.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800be14:	bf00      	nop
 800be16:	e002      	b.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800be18:	bf00      	nop
 800be1a:	e000      	b.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800be1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be1e:	7dfb      	ldrb	r3, [r7, #23]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d109      	bne.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800be24:	4b2d      	ldr	r3, [pc, #180]	; (800bedc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800be26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be28:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be30:	492a      	ldr	r1, [pc, #168]	; (800bedc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800be32:	4313      	orrs	r3, r2
 800be34:	650b      	str	r3, [r1, #80]	; 0x50
 800be36:	e001      	b.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be38:	7dfb      	ldrb	r3, [r7, #23]
 800be3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be44:	2b00      	cmp	r3, #0
 800be46:	d04d      	beq.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be52:	d02e      	beq.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800be54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be58:	d828      	bhi.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x518>
 800be5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be5e:	d02a      	beq.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800be60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be64:	d822      	bhi.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x518>
 800be66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be6a:	d026      	beq.n	800beba <HAL_RCCEx_PeriphCLKConfig+0x526>
 800be6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be70:	d81c      	bhi.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x518>
 800be72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be76:	d010      	beq.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800be78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be7c:	d816      	bhi.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x518>
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d01d      	beq.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800be82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be86:	d111      	bne.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	3304      	adds	r3, #4
 800be8c:	2101      	movs	r1, #1
 800be8e:	4618      	mov	r0, r3
 800be90:	f000 ffac 	bl	800cdec <RCCEx_PLL2_Config>
 800be94:	4603      	mov	r3, r0
 800be96:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800be98:	e012      	b.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	3324      	adds	r3, #36	; 0x24
 800be9e:	2101      	movs	r1, #1
 800bea0:	4618      	mov	r0, r3
 800bea2:	f001 f855 	bl	800cf50 <RCCEx_PLL3_Config>
 800bea6:	4603      	mov	r3, r0
 800bea8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800beaa:	e009      	b.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800beac:	2301      	movs	r3, #1
 800beae:	75fb      	strb	r3, [r7, #23]
      break;
 800beb0:	e006      	b.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800beb2:	bf00      	nop
 800beb4:	e004      	b.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800beb6:	bf00      	nop
 800beb8:	e002      	b.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800beba:	bf00      	nop
 800bebc:	e000      	b.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bec0:	7dfb      	ldrb	r3, [r7, #23]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d10c      	bne.n	800bee0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bec6:	4b05      	ldr	r3, [pc, #20]	; (800bedc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bed4:	4901      	ldr	r1, [pc, #4]	; (800bedc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bed6:	4313      	orrs	r3, r2
 800bed8:	658b      	str	r3, [r1, #88]	; 0x58
 800beda:	e003      	b.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800bedc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bee0:	7dfb      	ldrb	r3, [r7, #23]
 800bee2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800beec:	2b00      	cmp	r3, #0
 800beee:	d022      	beq.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    switch(PeriphClkInit->DsiClockSelection)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00e      	beq.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800bef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800befc:	d108      	bne.n	800bf10 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	3304      	adds	r3, #4
 800bf02:	2101      	movs	r1, #1
 800bf04:	4618      	mov	r0, r3
 800bf06:	f000 ff71 	bl	800cdec <RCCEx_PLL2_Config>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 800bf0e:	e003      	b.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x584>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf10:	2301      	movs	r3, #1
 800bf12:	75fb      	strb	r3, [r7, #23]
      break;
 800bf14:	e000      	b.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x584>
      break;
 800bf16:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf18:	7dfb      	ldrb	r3, [r7, #23]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d109      	bne.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800bf1e:	4b82      	ldr	r3, [pc, #520]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800bf20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf2a:	497f      	ldr	r1, [pc, #508]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bf30:	e001      	b.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf32:	7dfb      	ldrb	r3, [r7, #23]
 800bf34:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d02f      	beq.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0x60e>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf4a:	d00e      	beq.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800bf4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf50:	d814      	bhi.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d015      	beq.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 800bf56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf5a:	d10f      	bne.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf5c:	4b72      	ldr	r3, [pc, #456]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800bf5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf60:	4a71      	ldr	r2, [pc, #452]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800bf62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bf68:	e00c      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	3304      	adds	r3, #4
 800bf6e:	2101      	movs	r1, #1
 800bf70:	4618      	mov	r0, r3
 800bf72:	f000 ff3b 	bl	800cdec <RCCEx_PLL2_Config>
 800bf76:	4603      	mov	r3, r0
 800bf78:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bf7a:	e003      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	75fb      	strb	r3, [r7, #23]
      break;
 800bf80:	e000      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      break;
 800bf82:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf84:	7dfb      	ldrb	r3, [r7, #23]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d109      	bne.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x60a>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bf8a:	4b67      	ldr	r3, [pc, #412]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800bf8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf96:	4964      	ldr	r1, [pc, #400]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	650b      	str	r3, [r1, #80]	; 0x50
 800bf9c:	e001      	b.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf9e:	7dfb      	ldrb	r3, [r7, #23]
 800bfa0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d031      	beq.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x67e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfb2:	2b03      	cmp	r3, #3
 800bfb4:	d81a      	bhi.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x658>
 800bfb6:	a201      	add	r2, pc, #4	; (adr r2, 800bfbc <HAL_RCCEx_PeriphCLKConfig+0x628>)
 800bfb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfbc:	0800bff3 	.word	0x0800bff3
 800bfc0:	0800bfcd 	.word	0x0800bfcd
 800bfc4:	0800bfdb 	.word	0x0800bfdb
 800bfc8:	0800bff3 	.word	0x0800bff3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfcc:	4b56      	ldr	r3, [pc, #344]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800bfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd0:	4a55      	ldr	r2, [pc, #340]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800bfd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bfd8:	e00c      	b.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x660>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	3304      	adds	r3, #4
 800bfde:	2102      	movs	r1, #2
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f000 ff03 	bl	800cdec <RCCEx_PLL2_Config>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bfea:	e003      	b.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	75fb      	strb	r3, [r7, #23]
      break;
 800bff0:	e000      	b.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      break;
 800bff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bff4:	7dfb      	ldrb	r3, [r7, #23]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d109      	bne.n	800c00e <HAL_RCCEx_PeriphCLKConfig+0x67a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bffa:	4b4b      	ldr	r3, [pc, #300]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800bffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bffe:	f023 0203 	bic.w	r2, r3, #3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c006:	4948      	ldr	r1, [pc, #288]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800c008:	4313      	orrs	r3, r2
 800c00a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c00c:	e001      	b.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c00e:	7dfb      	ldrb	r3, [r7, #23]
 800c010:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	f000 808c 	beq.w	800c138 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c020:	4b42      	ldr	r3, [pc, #264]	; (800c12c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4a41      	ldr	r2, [pc, #260]	; (800c12c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800c026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c02a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c02c:	f7fb f8dc 	bl	80071e8 <HAL_GetTick>
 800c030:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c032:	e009      	b.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c034:	f7fb f8d8 	bl	80071e8 <HAL_GetTick>
 800c038:	4602      	mov	r2, r0
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	1ad3      	subs	r3, r2, r3
 800c03e:	2b64      	cmp	r3, #100	; 0x64
 800c040:	d902      	bls.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
      {
        ret = HAL_TIMEOUT;
 800c042:	2303      	movs	r3, #3
 800c044:	75fb      	strb	r3, [r7, #23]
        break;
 800c046:	e005      	b.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c048:	4b38      	ldr	r3, [pc, #224]	; (800c12c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c050:	2b00      	cmp	r3, #0
 800c052:	d0ef      	beq.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      }
    }

    if(ret == HAL_OK)
 800c054:	7dfb      	ldrb	r3, [r7, #23]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d16c      	bne.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c05a:	4b33      	ldr	r3, [pc, #204]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800c05c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c064:	4053      	eors	r3, r2
 800c066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d013      	beq.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x702>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c06e:	4b2e      	ldr	r3, [pc, #184]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800c070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c076:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c078:	4b2b      	ldr	r3, [pc, #172]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800c07a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c07c:	4a2a      	ldr	r2, [pc, #168]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800c07e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c082:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c084:	4b28      	ldr	r3, [pc, #160]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800c086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c088:	4a27      	ldr	r2, [pc, #156]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800c08a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c08e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c090:	4a25      	ldr	r2, [pc, #148]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c09c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0a0:	d115      	bne.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0x73a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0a2:	f7fb f8a1 	bl	80071e8 <HAL_GetTick>
 800c0a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c0a8:	e00b      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0aa:	f7fb f89d 	bl	80071e8 <HAL_GetTick>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	1ad3      	subs	r3, r2, r3
 800c0b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d902      	bls.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0x72e>
          {
            ret = HAL_TIMEOUT;
 800c0bc:	2303      	movs	r3, #3
 800c0be:	75fb      	strb	r3, [r7, #23]
            break;
 800c0c0:	e005      	b.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0x73a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c0c2:	4b19      	ldr	r3, [pc, #100]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800c0c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0c6:	f003 0302 	and.w	r3, r3, #2
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d0ed      	beq.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x716>
          }
        }
      }

      if(ret == HAL_OK)
 800c0ce:	7dfb      	ldrb	r3, [r7, #23]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d126      	bne.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c0da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c0e2:	d10d      	bne.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x76c>
 800c0e4:	4b10      	ldr	r3, [pc, #64]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c0f2:	0919      	lsrs	r1, r3, #4
 800c0f4:	4b0e      	ldr	r3, [pc, #56]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800c0f6:	400b      	ands	r3, r1
 800c0f8:	490b      	ldr	r1, [pc, #44]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	610b      	str	r3, [r1, #16]
 800c0fe:	e005      	b.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x778>
 800c100:	4b09      	ldr	r3, [pc, #36]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	4a08      	ldr	r2, [pc, #32]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800c106:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c10a:	6113      	str	r3, [r2, #16]
 800c10c:	4b06      	ldr	r3, [pc, #24]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800c10e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c11a:	4903      	ldr	r1, [pc, #12]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800c11c:	4313      	orrs	r3, r2
 800c11e:	670b      	str	r3, [r1, #112]	; 0x70
 800c120:	e00a      	b.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c122:	7dfb      	ldrb	r3, [r7, #23]
 800c124:	75bb      	strb	r3, [r7, #22]
 800c126:	e007      	b.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 800c128:	58024400 	.word	0x58024400
 800c12c:	58024800 	.word	0x58024800
 800c130:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c134:	7dfb      	ldrb	r3, [r7, #23]
 800c136:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f003 0301 	and.w	r3, r3, #1
 800c140:	2b00      	cmp	r3, #0
 800c142:	d07e      	beq.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c148:	2b28      	cmp	r3, #40	; 0x28
 800c14a:	d867      	bhi.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0x888>
 800c14c:	a201      	add	r2, pc, #4	; (adr r2, 800c154 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800c14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c152:	bf00      	nop
 800c154:	0800c223 	.word	0x0800c223
 800c158:	0800c21d 	.word	0x0800c21d
 800c15c:	0800c21d 	.word	0x0800c21d
 800c160:	0800c21d 	.word	0x0800c21d
 800c164:	0800c21d 	.word	0x0800c21d
 800c168:	0800c21d 	.word	0x0800c21d
 800c16c:	0800c21d 	.word	0x0800c21d
 800c170:	0800c21d 	.word	0x0800c21d
 800c174:	0800c1f9 	.word	0x0800c1f9
 800c178:	0800c21d 	.word	0x0800c21d
 800c17c:	0800c21d 	.word	0x0800c21d
 800c180:	0800c21d 	.word	0x0800c21d
 800c184:	0800c21d 	.word	0x0800c21d
 800c188:	0800c21d 	.word	0x0800c21d
 800c18c:	0800c21d 	.word	0x0800c21d
 800c190:	0800c21d 	.word	0x0800c21d
 800c194:	0800c20b 	.word	0x0800c20b
 800c198:	0800c21d 	.word	0x0800c21d
 800c19c:	0800c21d 	.word	0x0800c21d
 800c1a0:	0800c21d 	.word	0x0800c21d
 800c1a4:	0800c21d 	.word	0x0800c21d
 800c1a8:	0800c21d 	.word	0x0800c21d
 800c1ac:	0800c21d 	.word	0x0800c21d
 800c1b0:	0800c21d 	.word	0x0800c21d
 800c1b4:	0800c223 	.word	0x0800c223
 800c1b8:	0800c21d 	.word	0x0800c21d
 800c1bc:	0800c21d 	.word	0x0800c21d
 800c1c0:	0800c21d 	.word	0x0800c21d
 800c1c4:	0800c21d 	.word	0x0800c21d
 800c1c8:	0800c21d 	.word	0x0800c21d
 800c1cc:	0800c21d 	.word	0x0800c21d
 800c1d0:	0800c21d 	.word	0x0800c21d
 800c1d4:	0800c223 	.word	0x0800c223
 800c1d8:	0800c21d 	.word	0x0800c21d
 800c1dc:	0800c21d 	.word	0x0800c21d
 800c1e0:	0800c21d 	.word	0x0800c21d
 800c1e4:	0800c21d 	.word	0x0800c21d
 800c1e8:	0800c21d 	.word	0x0800c21d
 800c1ec:	0800c21d 	.word	0x0800c21d
 800c1f0:	0800c21d 	.word	0x0800c21d
 800c1f4:	0800c223 	.word	0x0800c223
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	2101      	movs	r1, #1
 800c1fe:	4618      	mov	r0, r3
 800c200:	f000 fdf4 	bl	800cdec <RCCEx_PLL2_Config>
 800c204:	4603      	mov	r3, r0
 800c206:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c208:	e00c      	b.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x890>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	3324      	adds	r3, #36	; 0x24
 800c20e:	2101      	movs	r1, #1
 800c210:	4618      	mov	r0, r3
 800c212:	f000 fe9d 	bl	800cf50 <RCCEx_PLL3_Config>
 800c216:	4603      	mov	r3, r0
 800c218:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c21a:	e003      	b.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x890>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c21c:	2301      	movs	r3, #1
 800c21e:	75fb      	strb	r3, [r7, #23]
      break;
 800c220:	e000      	b.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x890>
      break;
 800c222:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c224:	7dfb      	ldrb	r3, [r7, #23]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d109      	bne.n	800c23e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c22a:	4b96      	ldr	r3, [pc, #600]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800c22c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c22e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c236:	4993      	ldr	r1, [pc, #588]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800c238:	4313      	orrs	r3, r2
 800c23a:	654b      	str	r3, [r1, #84]	; 0x54
 800c23c:	e001      	b.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c23e:	7dfb      	ldrb	r3, [r7, #23]
 800c240:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f003 0302 	and.w	r3, r3, #2
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d037      	beq.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x92a>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c252:	2b05      	cmp	r3, #5
 800c254:	d820      	bhi.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0x904>
 800c256:	a201      	add	r2, pc, #4	; (adr r2, 800c25c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800c258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c25c:	0800c29f 	.word	0x0800c29f
 800c260:	0800c275 	.word	0x0800c275
 800c264:	0800c287 	.word	0x0800c287
 800c268:	0800c29f 	.word	0x0800c29f
 800c26c:	0800c29f 	.word	0x0800c29f
 800c270:	0800c29f 	.word	0x0800c29f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	3304      	adds	r3, #4
 800c278:	2101      	movs	r1, #1
 800c27a:	4618      	mov	r0, r3
 800c27c:	f000 fdb6 	bl	800cdec <RCCEx_PLL2_Config>
 800c280:	4603      	mov	r3, r0
 800c282:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c284:	e00c      	b.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x90c>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	3324      	adds	r3, #36	; 0x24
 800c28a:	2101      	movs	r1, #1
 800c28c:	4618      	mov	r0, r3
 800c28e:	f000 fe5f 	bl	800cf50 <RCCEx_PLL3_Config>
 800c292:	4603      	mov	r3, r0
 800c294:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c296:	e003      	b.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c298:	2301      	movs	r3, #1
 800c29a:	75fb      	strb	r3, [r7, #23]
      break;
 800c29c:	e000      	b.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      break;
 800c29e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c2a0:	7dfb      	ldrb	r3, [r7, #23]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d109      	bne.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0x926>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c2a6:	4b77      	ldr	r3, [pc, #476]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800c2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2aa:	f023 0207 	bic.w	r2, r3, #7
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2b2:	4974      	ldr	r1, [pc, #464]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	654b      	str	r3, [r1, #84]	; 0x54
 800c2b8:	e001      	b.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x92a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2ba:	7dfb      	ldrb	r3, [r7, #23]
 800c2bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f003 0304 	and.w	r3, r3, #4
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d03a      	beq.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2d0:	2b05      	cmp	r3, #5
 800c2d2:	d821      	bhi.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800c2d4:	a201      	add	r2, pc, #4	; (adr r2, 800c2dc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 800c2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2da:	bf00      	nop
 800c2dc:	0800c31f 	.word	0x0800c31f
 800c2e0:	0800c2f5 	.word	0x0800c2f5
 800c2e4:	0800c307 	.word	0x0800c307
 800c2e8:	0800c31f 	.word	0x0800c31f
 800c2ec:	0800c31f 	.word	0x0800c31f
 800c2f0:	0800c31f 	.word	0x0800c31f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	3304      	adds	r3, #4
 800c2f8:	2101      	movs	r1, #1
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f000 fd76 	bl	800cdec <RCCEx_PLL2_Config>
 800c300:	4603      	mov	r3, r0
 800c302:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c304:	e00c      	b.n	800c320 <HAL_RCCEx_PeriphCLKConfig+0x98c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	3324      	adds	r3, #36	; 0x24
 800c30a:	2101      	movs	r1, #1
 800c30c:	4618      	mov	r0, r3
 800c30e:	f000 fe1f 	bl	800cf50 <RCCEx_PLL3_Config>
 800c312:	4603      	mov	r3, r0
 800c314:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c316:	e003      	b.n	800c320 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c318:	2301      	movs	r3, #1
 800c31a:	75fb      	strb	r3, [r7, #23]
      break;
 800c31c:	e000      	b.n	800c320 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      break;
 800c31e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c320:	7dfb      	ldrb	r3, [r7, #23]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d10a      	bne.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c326:	4b57      	ldr	r3, [pc, #348]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800c328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c32a:	f023 0207 	bic.w	r2, r3, #7
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c334:	4953      	ldr	r1, [pc, #332]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800c336:	4313      	orrs	r3, r2
 800c338:	658b      	str	r3, [r1, #88]	; 0x58
 800c33a:	e001      	b.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c33c:	7dfb      	ldrb	r3, [r7, #23]
 800c33e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f003 0320 	and.w	r3, r3, #32
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d04b      	beq.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c352:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c356:	d02e      	beq.n	800c3b6 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 800c358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c35c:	d828      	bhi.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 800c35e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c362:	d02a      	beq.n	800c3ba <HAL_RCCEx_PeriphCLKConfig+0xa26>
 800c364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c368:	d822      	bhi.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 800c36a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c36e:	d026      	beq.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800c370:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c374:	d81c      	bhi.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 800c376:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c37a:	d010      	beq.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800c37c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c380:	d816      	bhi.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 800c382:	2b00      	cmp	r3, #0
 800c384:	d01d      	beq.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 800c386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c38a:	d111      	bne.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	3304      	adds	r3, #4
 800c390:	2100      	movs	r1, #0
 800c392:	4618      	mov	r0, r3
 800c394:	f000 fd2a 	bl	800cdec <RCCEx_PLL2_Config>
 800c398:	4603      	mov	r3, r0
 800c39a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c39c:	e012      	b.n	800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xa30>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	3324      	adds	r3, #36	; 0x24
 800c3a2:	2102      	movs	r1, #2
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f000 fdd3 	bl	800cf50 <RCCEx_PLL3_Config>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c3ae:	e009      	b.n	800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	75fb      	strb	r3, [r7, #23]
      break;
 800c3b4:	e006      	b.n	800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 800c3b6:	bf00      	nop
 800c3b8:	e004      	b.n	800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 800c3ba:	bf00      	nop
 800c3bc:	e002      	b.n	800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 800c3be:	bf00      	nop
 800c3c0:	e000      	b.n	800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 800c3c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c3c4:	7dfb      	ldrb	r3, [r7, #23]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d10a      	bne.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c3ca:	4b2e      	ldr	r3, [pc, #184]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800c3cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3d8:	492a      	ldr	r1, [pc, #168]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	654b      	str	r3, [r1, #84]	; 0x54
 800c3de:	e001      	b.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3e0:	7dfb      	ldrb	r3, [r7, #23]
 800c3e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d04d      	beq.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c3f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c3fa:	d02e      	beq.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0xac6>
 800c3fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c400:	d828      	bhi.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 800c402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c406:	d02a      	beq.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800c408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c40c:	d822      	bhi.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 800c40e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c412:	d026      	beq.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0xace>
 800c414:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c418:	d81c      	bhi.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 800c41a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c41e:	d010      	beq.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800c420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c424:	d816      	bhi.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 800c426:	2b00      	cmp	r3, #0
 800c428:	d01d      	beq.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 800c42a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c42e:	d111      	bne.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0xac0>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	3304      	adds	r3, #4
 800c434:	2100      	movs	r1, #0
 800c436:	4618      	mov	r0, r3
 800c438:	f000 fcd8 	bl	800cdec <RCCEx_PLL2_Config>
 800c43c:	4603      	mov	r3, r0
 800c43e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c440:	e012      	b.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0xad4>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	3324      	adds	r3, #36	; 0x24
 800c446:	2102      	movs	r1, #2
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 fd81 	bl	800cf50 <RCCEx_PLL3_Config>
 800c44e:	4603      	mov	r3, r0
 800c450:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c452:	e009      	b.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c454:	2301      	movs	r3, #1
 800c456:	75fb      	strb	r3, [r7, #23]
      break;
 800c458:	e006      	b.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 800c45a:	bf00      	nop
 800c45c:	e004      	b.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 800c45e:	bf00      	nop
 800c460:	e002      	b.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 800c462:	bf00      	nop
 800c464:	e000      	b.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 800c466:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c468:	7dfb      	ldrb	r3, [r7, #23]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d10c      	bne.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c46e:	4b05      	ldr	r3, [pc, #20]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800c470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c472:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c47c:	4901      	ldr	r1, [pc, #4]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800c47e:	4313      	orrs	r3, r2
 800c480:	658b      	str	r3, [r1, #88]	; 0x58
 800c482:	e003      	b.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 800c484:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c488:	7dfb      	ldrb	r3, [r7, #23]
 800c48a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c494:	2b00      	cmp	r3, #0
 800c496:	d04b      	beq.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c49e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c4a2:	d02e      	beq.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 800c4a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c4a8:	d828      	bhi.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800c4aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c4ae:	d02a      	beq.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 800c4b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c4b4:	d822      	bhi.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800c4b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c4ba:	d026      	beq.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0xb76>
 800c4bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c4c0:	d81c      	bhi.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800c4c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c4c6:	d010      	beq.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xb56>
 800c4c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c4cc:	d816      	bhi.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d01d      	beq.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 800c4d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4d6:	d111      	bne.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	3304      	adds	r3, #4
 800c4dc:	2100      	movs	r1, #0
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f000 fc84 	bl	800cdec <RCCEx_PLL2_Config>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c4e8:	e012      	b.n	800c510 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	3324      	adds	r3, #36	; 0x24
 800c4ee:	2102      	movs	r1, #2
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f000 fd2d 	bl	800cf50 <RCCEx_PLL3_Config>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c4fa:	e009      	b.n	800c510 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	75fb      	strb	r3, [r7, #23]
      break;
 800c500:	e006      	b.n	800c510 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800c502:	bf00      	nop
 800c504:	e004      	b.n	800c510 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800c506:	bf00      	nop
 800c508:	e002      	b.n	800c510 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800c50a:	bf00      	nop
 800c50c:	e000      	b.n	800c510 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800c50e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c510:	7dfb      	ldrb	r3, [r7, #23]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d10a      	bne.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c516:	4b9e      	ldr	r3, [pc, #632]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c51a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c524:	499a      	ldr	r1, [pc, #616]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c526:	4313      	orrs	r3, r2
 800c528:	658b      	str	r3, [r1, #88]	; 0x58
 800c52a:	e001      	b.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c52c:	7dfb      	ldrb	r3, [r7, #23]
 800c52e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f003 0308 	and.w	r3, r3, #8
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d01a      	beq.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0xbde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c546:	d10a      	bne.n	800c55e <HAL_RCCEx_PeriphCLKConfig+0xbca>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	3324      	adds	r3, #36	; 0x24
 800c54c:	2102      	movs	r1, #2
 800c54e:	4618      	mov	r0, r3
 800c550:	f000 fcfe 	bl	800cf50 <RCCEx_PLL3_Config>
 800c554:	4603      	mov	r3, r0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d001      	beq.n	800c55e <HAL_RCCEx_PeriphCLKConfig+0xbca>
        {
          status = HAL_ERROR;
 800c55a:	2301      	movs	r3, #1
 800c55c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c55e:	4b8c      	ldr	r3, [pc, #560]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c562:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c56c:	4988      	ldr	r1, [pc, #544]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c56e:	4313      	orrs	r3, r2
 800c570:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f003 0310 	and.w	r3, r3, #16
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d01a      	beq.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c588:	d10a      	bne.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	3324      	adds	r3, #36	; 0x24
 800c58e:	2102      	movs	r1, #2
 800c590:	4618      	mov	r0, r3
 800c592:	f000 fcdd 	bl	800cf50 <RCCEx_PLL3_Config>
 800c596:	4603      	mov	r3, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d001      	beq.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
      {
        status = HAL_ERROR;
 800c59c:	2301      	movs	r3, #1
 800c59e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c5a0:	4b7b      	ldr	r3, [pc, #492]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c5a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c5ae:	4978      	ldr	r1, [pc, #480]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d034      	beq.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0xc96>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c5c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5ca:	d01d      	beq.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c5cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5d0:	d817      	bhi.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xc6e>
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d003      	beq.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
 800c5d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5da:	d009      	beq.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800c5dc:	e011      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xc6e>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	3304      	adds	r3, #4
 800c5e2:	2100      	movs	r1, #0
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f000 fc01 	bl	800cdec <RCCEx_PLL2_Config>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c5ee:	e00c      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0xc76>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	3324      	adds	r3, #36	; 0x24
 800c5f4:	2102      	movs	r1, #2
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f000 fcaa 	bl	800cf50 <RCCEx_PLL3_Config>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c600:	e003      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0xc76>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c602:	2301      	movs	r3, #1
 800c604:	75fb      	strb	r3, [r7, #23]
      break;
 800c606:	e000      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0xc76>
      break;
 800c608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c60a:	7dfb      	ldrb	r3, [r7, #23]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10a      	bne.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c610:	4b5f      	ldr	r3, [pc, #380]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c614:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c61e:	495c      	ldr	r1, [pc, #368]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c620:	4313      	orrs	r3, r2
 800c622:	658b      	str	r3, [r1, #88]	; 0x58
 800c624:	e001      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c626:	7dfb      	ldrb	r3, [r7, #23]
 800c628:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c632:	2b00      	cmp	r3, #0
 800c634:	d033      	beq.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0xd0a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c63c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c640:	d01c      	beq.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800c642:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c646:	d816      	bhi.n	800c676 <HAL_RCCEx_PeriphCLKConfig+0xce2>
 800c648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c64c:	d003      	beq.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800c64e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c652:	d007      	beq.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 800c654:	e00f      	b.n	800c676 <HAL_RCCEx_PeriphCLKConfig+0xce2>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c656:	4b4e      	ldr	r3, [pc, #312]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65a:	4a4d      	ldr	r2, [pc, #308]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c65c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c660:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c662:	e00c      	b.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0xcea>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	3324      	adds	r3, #36	; 0x24
 800c668:	2101      	movs	r1, #1
 800c66a:	4618      	mov	r0, r3
 800c66c:	f000 fc70 	bl	800cf50 <RCCEx_PLL3_Config>
 800c670:	4603      	mov	r3, r0
 800c672:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c674:	e003      	b.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0xcea>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c676:	2301      	movs	r3, #1
 800c678:	75fb      	strb	r3, [r7, #23]
      break;
 800c67a:	e000      	b.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0xcea>
      break;
 800c67c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c67e:	7dfb      	ldrb	r3, [r7, #23]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10a      	bne.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0xd06>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c684:	4b42      	ldr	r3, [pc, #264]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c688:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c692:	493f      	ldr	r1, [pc, #252]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c694:	4313      	orrs	r3, r2
 800c696:	654b      	str	r3, [r1, #84]	; 0x54
 800c698:	e001      	b.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c69a:	7dfb      	ldrb	r3, [r7, #23]
 800c69c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d029      	beq.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0xd6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d003      	beq.n	800c6ba <HAL_RCCEx_PeriphCLKConfig+0xd26>
 800c6b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6b6:	d007      	beq.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 800c6b8:	e00f      	b.n	800c6da <HAL_RCCEx_PeriphCLKConfig+0xd46>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6ba:	4b35      	ldr	r3, [pc, #212]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6be:	4a34      	ldr	r2, [pc, #208]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c6c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c6c6:	e00b      	b.n	800c6e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	3304      	adds	r3, #4
 800c6cc:	2102      	movs	r1, #2
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f000 fb8c 	bl	800cdec <RCCEx_PLL2_Config>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c6d8:	e002      	b.n	800c6e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    default:
      ret = HAL_ERROR;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	75fb      	strb	r3, [r7, #23]
      break;
 800c6de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6e0:	7dfb      	ldrb	r3, [r7, #23]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d109      	bne.n	800c6fa <HAL_RCCEx_PeriphCLKConfig+0xd66>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c6e6:	4b2a      	ldr	r3, [pc, #168]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c6e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6f2:	4927      	ldr	r1, [pc, #156]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c6f8:	e001      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6fa:	7dfb      	ldrb	r3, [r7, #23]
 800c6fc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c706:	2b00      	cmp	r3, #0
 800c708:	d00a      	beq.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	3324      	adds	r3, #36	; 0x24
 800c70e:	2102      	movs	r1, #2
 800c710:	4618      	mov	r0, r3
 800c712:	f000 fc1d 	bl	800cf50 <RCCEx_PLL3_Config>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d001      	beq.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
    {
      status=HAL_ERROR;
 800c71c:	2301      	movs	r3, #1
 800c71e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d035      	beq.n	800c798 <HAL_RCCEx_PeriphCLKConfig+0xe04>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c736:	d017      	beq.n	800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
 800c738:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c73c:	d811      	bhi.n	800c762 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 800c73e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c742:	d013      	beq.n	800c76c <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 800c744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c748:	d80b      	bhi.n	800c762 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d010      	beq.n	800c770 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 800c74e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c752:	d106      	bne.n	800c762 <HAL_RCCEx_PeriphCLKConfig+0xdce>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c754:	4b0e      	ldr	r3, [pc, #56]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c758:	4a0d      	ldr	r2, [pc, #52]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c75a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c75e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c760:	e007      	b.n	800c772 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c762:	2301      	movs	r3, #1
 800c764:	75fb      	strb	r3, [r7, #23]
      break;
 800c766:	e004      	b.n	800c772 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 800c768:	bf00      	nop
 800c76a:	e002      	b.n	800c772 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 800c76c:	bf00      	nop
 800c76e:	e000      	b.n	800c772 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 800c770:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c772:	7dfb      	ldrb	r3, [r7, #23]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d10d      	bne.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0xe00>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c778:	4b05      	ldr	r3, [pc, #20]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c77a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c77c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c786:	4902      	ldr	r1, [pc, #8]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800c788:	4313      	orrs	r3, r2
 800c78a:	654b      	str	r3, [r1, #84]	; 0x54
 800c78c:	e004      	b.n	800c798 <HAL_RCCEx_PeriphCLKConfig+0xe04>
 800c78e:	bf00      	nop
 800c790:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c794:	7dfb      	ldrb	r3, [r7, #23]
 800c796:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d008      	beq.n	800c7b6 <HAL_RCCEx_PeriphCLKConfig+0xe22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c7a4:	4b31      	ldr	r3, [pc, #196]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800c7a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7b0:	492e      	ldr	r1, [pc, #184]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d009      	beq.n	800c7d6 <HAL_RCCEx_PeriphCLKConfig+0xe42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c7c2:	4b2a      	ldr	r3, [pc, #168]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800c7c4:	691b      	ldr	r3, [r3, #16]
 800c7c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c7d0:	4926      	ldr	r1, [pc, #152]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d008      	beq.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c7e2:	4b22      	ldr	r3, [pc, #136]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800c7e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7ee:	491f      	ldr	r1, [pc, #124]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800c7f0:	4313      	orrs	r3, r2
 800c7f2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d00d      	beq.n	800c81c <HAL_RCCEx_PeriphCLKConfig+0xe88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c800:	4b1a      	ldr	r3, [pc, #104]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800c802:	691b      	ldr	r3, [r3, #16]
 800c804:	4a19      	ldr	r2, [pc, #100]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800c806:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c80a:	6113      	str	r3, [r2, #16]
 800c80c:	4b17      	ldr	r3, [pc, #92]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800c80e:	691a      	ldr	r2, [r3, #16]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c816:	4915      	ldr	r1, [pc, #84]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800c818:	4313      	orrs	r3, r2
 800c81a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	da08      	bge.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0xea2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c824:	4b11      	ldr	r3, [pc, #68]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800c826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c828:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c830:	490e      	ldr	r1, [pc, #56]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800c832:	4313      	orrs	r3, r2
 800c834:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d009      	beq.n	800c856 <HAL_RCCEx_PeriphCLKConfig+0xec2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c842:	4b0a      	ldr	r3, [pc, #40]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800c844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c846:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c850:	4906      	ldr	r1, [pc, #24]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800c852:	4313      	orrs	r3, r2
 800c854:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c856:	7dbb      	ldrb	r3, [r7, #22]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d101      	bne.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    return HAL_OK;
 800c85c:	2300      	movs	r3, #0
 800c85e:	e000      	b.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0xece>
  }
  return HAL_ERROR;
 800c860:	2301      	movs	r3, #1
}
 800c862:	4618      	mov	r0, r3
 800c864:	3718      	adds	r7, #24
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	58024400 	.word	0x58024400

0800c870 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c874:	f7ff f832 	bl	800b8dc <HAL_RCC_GetHCLKFreq>
 800c878:	4602      	mov	r2, r0
 800c87a:	4b06      	ldr	r3, [pc, #24]	; (800c894 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c87c:	6a1b      	ldr	r3, [r3, #32]
 800c87e:	091b      	lsrs	r3, r3, #4
 800c880:	f003 0307 	and.w	r3, r3, #7
 800c884:	4904      	ldr	r1, [pc, #16]	; (800c898 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c886:	5ccb      	ldrb	r3, [r1, r3]
 800c888:	f003 031f 	and.w	r3, r3, #31
 800c88c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c890:	4618      	mov	r0, r3
 800c892:	bd80      	pop	{r7, pc}
 800c894:	58024400 	.word	0x58024400
 800c898:	08010c1c 	.word	0x08010c1c

0800c89c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b089      	sub	sp, #36	; 0x24
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c8a4:	4ba1      	ldr	r3, [pc, #644]	; (800cb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a8:	f003 0303 	and.w	r3, r3, #3
 800c8ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c8ae:	4b9f      	ldr	r3, [pc, #636]	; (800cb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8b2:	0b1b      	lsrs	r3, r3, #12
 800c8b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c8ba:	4b9c      	ldr	r3, [pc, #624]	; (800cb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8be:	091b      	lsrs	r3, r3, #4
 800c8c0:	f003 0301 	and.w	r3, r3, #1
 800c8c4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c8c6:	4b99      	ldr	r3, [pc, #612]	; (800cb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ca:	08db      	lsrs	r3, r3, #3
 800c8cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c8d0:	693a      	ldr	r2, [r7, #16]
 800c8d2:	fb02 f303 	mul.w	r3, r2, r3
 800c8d6:	ee07 3a90 	vmov	s15, r3
 800c8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	f000 8111 	beq.w	800cb0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c8ea:	69bb      	ldr	r3, [r7, #24]
 800c8ec:	2b02      	cmp	r3, #2
 800c8ee:	f000 8083 	beq.w	800c9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c8f2:	69bb      	ldr	r3, [r7, #24]
 800c8f4:	2b02      	cmp	r3, #2
 800c8f6:	f200 80a1 	bhi.w	800ca3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c8fa:	69bb      	ldr	r3, [r7, #24]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d003      	beq.n	800c908 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d056      	beq.n	800c9b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c906:	e099      	b.n	800ca3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c908:	4b88      	ldr	r3, [pc, #544]	; (800cb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f003 0320 	and.w	r3, r3, #32
 800c910:	2b00      	cmp	r3, #0
 800c912:	d02d      	beq.n	800c970 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c914:	4b85      	ldr	r3, [pc, #532]	; (800cb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	08db      	lsrs	r3, r3, #3
 800c91a:	f003 0303 	and.w	r3, r3, #3
 800c91e:	4a84      	ldr	r2, [pc, #528]	; (800cb30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c920:	fa22 f303 	lsr.w	r3, r2, r3
 800c924:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	ee07 3a90 	vmov	s15, r3
 800c92c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	ee07 3a90 	vmov	s15, r3
 800c936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c93a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c93e:	4b7b      	ldr	r3, [pc, #492]	; (800cb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c946:	ee07 3a90 	vmov	s15, r3
 800c94a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c94e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c952:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cb34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c95a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c95e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c96a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c96e:	e087      	b.n	800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	ee07 3a90 	vmov	s15, r3
 800c976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c97a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cb38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c97e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c982:	4b6a      	ldr	r3, [pc, #424]	; (800cb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c98a:	ee07 3a90 	vmov	s15, r3
 800c98e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c992:	ed97 6a03 	vldr	s12, [r7, #12]
 800c996:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cb34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c99a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c99e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c9b2:	e065      	b.n	800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	ee07 3a90 	vmov	s15, r3
 800c9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cb3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c9c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9c6:	4b59      	ldr	r3, [pc, #356]	; (800cb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9ce:	ee07 3a90 	vmov	s15, r3
 800c9d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9da:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cb34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c9f6:	e043      	b.n	800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	ee07 3a90 	vmov	s15, r3
 800c9fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cb40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ca06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca0a:	4b48      	ldr	r3, [pc, #288]	; (800cb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca12:	ee07 3a90 	vmov	s15, r3
 800ca16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cb34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca3a:	e021      	b.n	800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	ee07 3a90 	vmov	s15, r3
 800ca42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cb3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ca4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca4e:	4b37      	ldr	r3, [pc, #220]	; (800cb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca56:	ee07 3a90 	vmov	s15, r3
 800ca5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca62:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cb34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ca80:	4b2a      	ldr	r3, [pc, #168]	; (800cb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca84:	0a5b      	lsrs	r3, r3, #9
 800ca86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca8a:	ee07 3a90 	vmov	s15, r3
 800ca8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caa6:	ee17 2a90 	vmov	r2, s15
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800caae:	4b1f      	ldr	r3, [pc, #124]	; (800cb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab2:	0c1b      	lsrs	r3, r3, #16
 800cab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cab8:	ee07 3a90 	vmov	s15, r3
 800cabc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cac0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cac4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cac8:	edd7 6a07 	vldr	s13, [r7, #28]
 800cacc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cad4:	ee17 2a90 	vmov	r2, s15
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800cadc:	4b13      	ldr	r3, [pc, #76]	; (800cb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae0:	0e1b      	lsrs	r3, r3, #24
 800cae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cae6:	ee07 3a90 	vmov	s15, r3
 800caea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800caf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800caf6:	edd7 6a07 	vldr	s13, [r7, #28]
 800cafa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cafe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb02:	ee17 2a90 	vmov	r2, s15
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cb0a:	e008      	b.n	800cb1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2200      	movs	r2, #0
 800cb16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	609a      	str	r2, [r3, #8]
}
 800cb1e:	bf00      	nop
 800cb20:	3724      	adds	r7, #36	; 0x24
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	58024400 	.word	0x58024400
 800cb30:	03d09000 	.word	0x03d09000
 800cb34:	46000000 	.word	0x46000000
 800cb38:	4c742400 	.word	0x4c742400
 800cb3c:	4a742400 	.word	0x4a742400
 800cb40:	4bbebc20 	.word	0x4bbebc20

0800cb44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b089      	sub	sp, #36	; 0x24
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb4c:	4ba1      	ldr	r3, [pc, #644]	; (800cdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb50:	f003 0303 	and.w	r3, r3, #3
 800cb54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800cb56:	4b9f      	ldr	r3, [pc, #636]	; (800cdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb5a:	0d1b      	lsrs	r3, r3, #20
 800cb5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cb62:	4b9c      	ldr	r3, [pc, #624]	; (800cdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb66:	0a1b      	lsrs	r3, r3, #8
 800cb68:	f003 0301 	and.w	r3, r3, #1
 800cb6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800cb6e:	4b99      	ldr	r3, [pc, #612]	; (800cdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb72:	08db      	lsrs	r3, r3, #3
 800cb74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb78:	693a      	ldr	r2, [r7, #16]
 800cb7a:	fb02 f303 	mul.w	r3, r2, r3
 800cb7e:	ee07 3a90 	vmov	s15, r3
 800cb82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	f000 8111 	beq.w	800cdb4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cb92:	69bb      	ldr	r3, [r7, #24]
 800cb94:	2b02      	cmp	r3, #2
 800cb96:	f000 8083 	beq.w	800cca0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	f200 80a1 	bhi.w	800cce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d003      	beq.n	800cbb0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d056      	beq.n	800cc5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cbae:	e099      	b.n	800cce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbb0:	4b88      	ldr	r3, [pc, #544]	; (800cdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f003 0320 	and.w	r3, r3, #32
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d02d      	beq.n	800cc18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cbbc:	4b85      	ldr	r3, [pc, #532]	; (800cdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	08db      	lsrs	r3, r3, #3
 800cbc2:	f003 0303 	and.w	r3, r3, #3
 800cbc6:	4a84      	ldr	r2, [pc, #528]	; (800cdd8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cbc8:	fa22 f303 	lsr.w	r3, r2, r3
 800cbcc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	ee07 3a90 	vmov	s15, r3
 800cbd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	ee07 3a90 	vmov	s15, r3
 800cbde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbe6:	4b7b      	ldr	r3, [pc, #492]	; (800cdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbee:	ee07 3a90 	vmov	s15, r3
 800cbf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cbfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800cc16:	e087      	b.n	800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	ee07 3a90 	vmov	s15, r3
 800cc1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cc26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc2a:	4b6a      	ldr	r3, [pc, #424]	; (800cdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc32:	ee07 3a90 	vmov	s15, r3
 800cc36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cc5a:	e065      	b.n	800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	ee07 3a90 	vmov	s15, r3
 800cc62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cde4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cc6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc6e:	4b59      	ldr	r3, [pc, #356]	; (800cdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc76:	ee07 3a90 	vmov	s15, r3
 800cc7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc82:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cc9e:	e043      	b.n	800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	ee07 3a90 	vmov	s15, r3
 800cca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccaa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cde8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ccae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccb2:	4b48      	ldr	r3, [pc, #288]	; (800cdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccba:	ee07 3a90 	vmov	s15, r3
 800ccbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cce2:	e021      	b.n	800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	ee07 3a90 	vmov	s15, r3
 800ccea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cde4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ccf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccf6:	4b37      	ldr	r3, [pc, #220]	; (800cdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccfe:	ee07 3a90 	vmov	s15, r3
 800cd02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd06:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800cd28:	4b2a      	ldr	r3, [pc, #168]	; (800cdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd2c:	0a5b      	lsrs	r3, r3, #9
 800cd2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd32:	ee07 3a90 	vmov	s15, r3
 800cd36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd42:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd4e:	ee17 2a90 	vmov	r2, s15
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800cd56:	4b1f      	ldr	r3, [pc, #124]	; (800cdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd5a:	0c1b      	lsrs	r3, r3, #16
 800cd5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd60:	ee07 3a90 	vmov	s15, r3
 800cd64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd70:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd7c:	ee17 2a90 	vmov	r2, s15
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800cd84:	4b13      	ldr	r3, [pc, #76]	; (800cdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd88:	0e1b      	lsrs	r3, r3, #24
 800cd8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd8e:	ee07 3a90 	vmov	s15, r3
 800cd92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cda2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cda6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdaa:	ee17 2a90 	vmov	r2, s15
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cdb2:	e008      	b.n	800cdc6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	609a      	str	r2, [r3, #8]
}
 800cdc6:	bf00      	nop
 800cdc8:	3724      	adds	r7, #36	; 0x24
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr
 800cdd2:	bf00      	nop
 800cdd4:	58024400 	.word	0x58024400
 800cdd8:	03d09000 	.word	0x03d09000
 800cddc:	46000000 	.word	0x46000000
 800cde0:	4c742400 	.word	0x4c742400
 800cde4:	4a742400 	.word	0x4a742400
 800cde8:	4bbebc20 	.word	0x4bbebc20

0800cdec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cdfa:	4b53      	ldr	r3, [pc, #332]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800cdfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdfe:	f003 0303 	and.w	r3, r3, #3
 800ce02:	2b03      	cmp	r3, #3
 800ce04:	d101      	bne.n	800ce0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ce06:	2301      	movs	r3, #1
 800ce08:	e099      	b.n	800cf3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ce0a:	4b4f      	ldr	r3, [pc, #316]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a4e      	ldr	r2, [pc, #312]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800ce10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce16:	f7fa f9e7 	bl	80071e8 <HAL_GetTick>
 800ce1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce1c:	e008      	b.n	800ce30 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ce1e:	f7fa f9e3 	bl	80071e8 <HAL_GetTick>
 800ce22:	4602      	mov	r2, r0
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	1ad3      	subs	r3, r2, r3
 800ce28:	2b02      	cmp	r3, #2
 800ce2a:	d901      	bls.n	800ce30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce2c:	2303      	movs	r3, #3
 800ce2e:	e086      	b.n	800cf3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce30:	4b45      	ldr	r3, [pc, #276]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d1f0      	bne.n	800ce1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ce3c:	4b42      	ldr	r3, [pc, #264]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800ce3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	031b      	lsls	r3, r3, #12
 800ce4a:	493f      	ldr	r1, [pc, #252]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	628b      	str	r3, [r1, #40]	; 0x28
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	3b01      	subs	r3, #1
 800ce56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	689b      	ldr	r3, [r3, #8]
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	025b      	lsls	r3, r3, #9
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	431a      	orrs	r2, r3
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	68db      	ldr	r3, [r3, #12]
 800ce6a:	3b01      	subs	r3, #1
 800ce6c:	041b      	lsls	r3, r3, #16
 800ce6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ce72:	431a      	orrs	r2, r3
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	691b      	ldr	r3, [r3, #16]
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	061b      	lsls	r3, r3, #24
 800ce7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ce80:	4931      	ldr	r1, [pc, #196]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800ce82:	4313      	orrs	r3, r2
 800ce84:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ce86:	4b30      	ldr	r3, [pc, #192]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800ce88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	695b      	ldr	r3, [r3, #20]
 800ce92:	492d      	ldr	r1, [pc, #180]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800ce94:	4313      	orrs	r3, r2
 800ce96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ce98:	4b2b      	ldr	r3, [pc, #172]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800ce9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9c:	f023 0220 	bic.w	r2, r3, #32
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	699b      	ldr	r3, [r3, #24]
 800cea4:	4928      	ldr	r1, [pc, #160]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800cea6:	4313      	orrs	r3, r2
 800cea8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ceaa:	4b27      	ldr	r3, [pc, #156]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800ceac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceae:	4a26      	ldr	r2, [pc, #152]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800ceb0:	f023 0310 	bic.w	r3, r3, #16
 800ceb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ceb6:	4b24      	ldr	r3, [pc, #144]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800ceb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ceba:	4b24      	ldr	r3, [pc, #144]	; (800cf4c <RCCEx_PLL2_Config+0x160>)
 800cebc:	4013      	ands	r3, r2
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	69d2      	ldr	r2, [r2, #28]
 800cec2:	00d2      	lsls	r2, r2, #3
 800cec4:	4920      	ldr	r1, [pc, #128]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800cec6:	4313      	orrs	r3, r2
 800cec8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ceca:	4b1f      	ldr	r3, [pc, #124]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800cecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cece:	4a1e      	ldr	r2, [pc, #120]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800ced0:	f043 0310 	orr.w	r3, r3, #16
 800ced4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d106      	bne.n	800ceea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cedc:	4b1a      	ldr	r3, [pc, #104]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800cede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee0:	4a19      	ldr	r2, [pc, #100]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800cee2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cee8:	e00f      	b.n	800cf0a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d106      	bne.n	800cefe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cef0:	4b15      	ldr	r3, [pc, #84]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800cef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef4:	4a14      	ldr	r2, [pc, #80]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800cef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cefa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cefc:	e005      	b.n	800cf0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cefe:	4b12      	ldr	r3, [pc, #72]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800cf00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf02:	4a11      	ldr	r2, [pc, #68]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800cf04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cf0a:	4b0f      	ldr	r3, [pc, #60]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	4a0e      	ldr	r2, [pc, #56]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800cf10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cf14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf16:	f7fa f967 	bl	80071e8 <HAL_GetTick>
 800cf1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf1c:	e008      	b.n	800cf30 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cf1e:	f7fa f963 	bl	80071e8 <HAL_GetTick>
 800cf22:	4602      	mov	r2, r0
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	1ad3      	subs	r3, r2, r3
 800cf28:	2b02      	cmp	r3, #2
 800cf2a:	d901      	bls.n	800cf30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf2c:	2303      	movs	r3, #3
 800cf2e:	e006      	b.n	800cf3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf30:	4b05      	ldr	r3, [pc, #20]	; (800cf48 <RCCEx_PLL2_Config+0x15c>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d0f0      	beq.n	800cf1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cf3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	58024400 	.word	0x58024400
 800cf4c:	ffff0007 	.word	0xffff0007

0800cf50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cf5e:	4b53      	ldr	r3, [pc, #332]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800cf60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf62:	f003 0303 	and.w	r3, r3, #3
 800cf66:	2b03      	cmp	r3, #3
 800cf68:	d101      	bne.n	800cf6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	e099      	b.n	800d0a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cf6e:	4b4f      	ldr	r3, [pc, #316]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	4a4e      	ldr	r2, [pc, #312]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800cf74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf7a:	f7fa f935 	bl	80071e8 <HAL_GetTick>
 800cf7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cf80:	e008      	b.n	800cf94 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cf82:	f7fa f931 	bl	80071e8 <HAL_GetTick>
 800cf86:	4602      	mov	r2, r0
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	1ad3      	subs	r3, r2, r3
 800cf8c:	2b02      	cmp	r3, #2
 800cf8e:	d901      	bls.n	800cf94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cf90:	2303      	movs	r3, #3
 800cf92:	e086      	b.n	800d0a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cf94:	4b45      	ldr	r3, [pc, #276]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d1f0      	bne.n	800cf82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cfa0:	4b42      	ldr	r3, [pc, #264]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800cfa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfa4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	051b      	lsls	r3, r3, #20
 800cfae:	493f      	ldr	r1, [pc, #252]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	628b      	str	r3, [r1, #40]	; 0x28
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	689b      	ldr	r3, [r3, #8]
 800cfc2:	3b01      	subs	r3, #1
 800cfc4:	025b      	lsls	r3, r3, #9
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	431a      	orrs	r2, r3
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	3b01      	subs	r3, #1
 800cfd0:	041b      	lsls	r3, r3, #16
 800cfd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cfd6:	431a      	orrs	r2, r3
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	691b      	ldr	r3, [r3, #16]
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	061b      	lsls	r3, r3, #24
 800cfe0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cfe4:	4931      	ldr	r1, [pc, #196]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cfea:	4b30      	ldr	r3, [pc, #192]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800cfec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	695b      	ldr	r3, [r3, #20]
 800cff6:	492d      	ldr	r1, [pc, #180]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800cff8:	4313      	orrs	r3, r2
 800cffa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cffc:	4b2b      	ldr	r3, [pc, #172]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800cffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d000:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	699b      	ldr	r3, [r3, #24]
 800d008:	4928      	ldr	r1, [pc, #160]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800d00a:	4313      	orrs	r3, r2
 800d00c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d00e:	4b27      	ldr	r3, [pc, #156]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800d010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d012:	4a26      	ldr	r2, [pc, #152]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800d014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d018:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d01a:	4b24      	ldr	r3, [pc, #144]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800d01c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d01e:	4b24      	ldr	r3, [pc, #144]	; (800d0b0 <RCCEx_PLL3_Config+0x160>)
 800d020:	4013      	ands	r3, r2
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	69d2      	ldr	r2, [r2, #28]
 800d026:	00d2      	lsls	r2, r2, #3
 800d028:	4920      	ldr	r1, [pc, #128]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800d02a:	4313      	orrs	r3, r2
 800d02c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d02e:	4b1f      	ldr	r3, [pc, #124]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800d030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d032:	4a1e      	ldr	r2, [pc, #120]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800d034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d038:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d106      	bne.n	800d04e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d040:	4b1a      	ldr	r3, [pc, #104]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800d042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d044:	4a19      	ldr	r2, [pc, #100]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800d046:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d04a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d04c:	e00f      	b.n	800d06e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	2b01      	cmp	r3, #1
 800d052:	d106      	bne.n	800d062 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d054:	4b15      	ldr	r3, [pc, #84]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800d056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d058:	4a14      	ldr	r2, [pc, #80]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800d05a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d05e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d060:	e005      	b.n	800d06e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d062:	4b12      	ldr	r3, [pc, #72]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800d064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d066:	4a11      	ldr	r2, [pc, #68]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800d068:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d06c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d06e:	4b0f      	ldr	r3, [pc, #60]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	4a0e      	ldr	r2, [pc, #56]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800d074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d07a:	f7fa f8b5 	bl	80071e8 <HAL_GetTick>
 800d07e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d080:	e008      	b.n	800d094 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d082:	f7fa f8b1 	bl	80071e8 <HAL_GetTick>
 800d086:	4602      	mov	r2, r0
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	1ad3      	subs	r3, r2, r3
 800d08c:	2b02      	cmp	r3, #2
 800d08e:	d901      	bls.n	800d094 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d090:	2303      	movs	r3, #3
 800d092:	e006      	b.n	800d0a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d094:	4b05      	ldr	r3, [pc, #20]	; (800d0ac <RCCEx_PLL3_Config+0x15c>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d0f0      	beq.n	800d082 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3710      	adds	r7, #16
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	58024400 	.word	0x58024400
 800d0b0:	ffff0007 	.word	0xffff0007

0800d0b4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d101      	bne.n	800d0c8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	e02b      	b.n	800d120 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d106      	bne.n	800d0e2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 f825 	bl	800d12c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2202      	movs	r2, #2
 800d0e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	3304      	adds	r3, #4
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	4610      	mov	r0, r2
 800d0f6:	f001 f993 	bl	800e420 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6818      	ldr	r0, [r3, #0]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	461a      	mov	r2, r3
 800d104:	6839      	ldr	r1, [r7, #0]
 800d106:	f001 f9e7 	bl	800e4d8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d10a:	4b07      	ldr	r3, [pc, #28]	; (800d128 <HAL_SDRAM_Init+0x74>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4a06      	ldr	r2, [pc, #24]	; (800d128 <HAL_SDRAM_Init+0x74>)
 800d110:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d114:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2201      	movs	r2, #1
 800d11a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d11e:	2300      	movs	r3, #0
}
 800d120:	4618      	mov	r0, r3
 800d122:	3708      	adds	r7, #8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	52004000 	.word	0x52004000

0800d12c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b083      	sub	sp, #12
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800d134:	bf00      	nop
 800d136:	370c      	adds	r7, #12
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr

0800d140 <HAL_SDRAM_Read_32b>:
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer,
                                     uint32_t BufferSize)
{
 800d140:	b480      	push	{r7}
 800d142:	b089      	sub	sp, #36	; 0x24
 800d144:	af00      	add	r7, sp, #0
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	607a      	str	r2, [r7, #4]
 800d14c:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	61bb      	str	r3, [r7, #24]
  uint32_t *pdestbuff = pDstBuffer;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	617b      	str	r3, [r7, #20]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d15c:	74fb      	strb	r3, [r7, #19]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d15e:	7cfb      	ldrb	r3, [r7, #19]
 800d160:	2b02      	cmp	r3, #2
 800d162:	d101      	bne.n	800d168 <HAL_SDRAM_Read_32b+0x28>
  {
    return HAL_BUSY;
 800d164:	2302      	movs	r3, #2
 800d166:	e032      	b.n	800d1ce <HAL_SDRAM_Read_32b+0x8e>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_WRITE_PROTECTED))
 800d168:	7cfb      	ldrb	r3, [r7, #19]
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d002      	beq.n	800d174 <HAL_SDRAM_Read_32b+0x34>
 800d16e:	7cfb      	ldrb	r3, [r7, #19]
 800d170:	2b04      	cmp	r3, #4
 800d172:	d12b      	bne.n	800d1cc <HAL_SDRAM_Read_32b+0x8c>
  {
    /* Process Locked */
    __HAL_LOCK(hsdram);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d101      	bne.n	800d182 <HAL_SDRAM_Read_32b+0x42>
 800d17e:	2302      	movs	r3, #2
 800d180:	e025      	b.n	800d1ce <HAL_SDRAM_Read_32b+0x8e>
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2201      	movs	r2, #1
 800d186:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Update the SDRAM controller state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2202      	movs	r2, #2
 800d18e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Read data from source */
    for (size = BufferSize; size != 0U; size--)
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	61fb      	str	r3, [r7, #28]
 800d196:	e00c      	b.n	800d1b2 <HAL_SDRAM_Read_32b+0x72>
    {
      *pdestbuff = *(__IO uint32_t *)pSdramAddress;
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	601a      	str	r2, [r3, #0]
      pdestbuff++;
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	3304      	adds	r3, #4
 800d1a4:	617b      	str	r3, [r7, #20]
      pSdramAddress++;
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	3304      	adds	r3, #4
 800d1aa:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	3b01      	subs	r3, #1
 800d1b0:	61fb      	str	r3, [r7, #28]
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d1ef      	bne.n	800d198 <HAL_SDRAM_Read_32b+0x58>
    }

    /* Update the SDRAM controller state */
    hsdram->State = state;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	7cfa      	ldrb	r2, [r7, #19]
 800d1bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Process Unlocked */
    __HAL_UNLOCK(hsdram);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  else
  {
    return  HAL_ERROR;
  }

  return HAL_OK;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	e000      	b.n	800d1ce <HAL_SDRAM_Read_32b+0x8e>
    return  HAL_ERROR;
 800d1cc:	2301      	movs	r3, #1
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3724      	adds	r7, #36	; 0x24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr

0800d1da <HAL_SDRAM_Write_32b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pSrcBuffer,
                                      uint32_t BufferSize)
{
 800d1da:	b480      	push	{r7}
 800d1dc:	b089      	sub	sp, #36	; 0x24
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	60f8      	str	r0, [r7, #12]
 800d1e2:	60b9      	str	r1, [r7, #8]
 800d1e4:	607a      	str	r2, [r7, #4]
 800d1e6:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint32_t *pSdramAddress = pAddress;
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	61bb      	str	r3, [r7, #24]
  uint32_t *psrcbuff = pSrcBuffer;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	617b      	str	r3, [r7, #20]

  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	2b02      	cmp	r3, #2
 800d1fa:	d101      	bne.n	800d200 <HAL_SDRAM_Write_32b+0x26>
  {
    return HAL_BUSY;
 800d1fc:	2302      	movs	r3, #2
 800d1fe:	e032      	b.n	800d266 <HAL_SDRAM_Write_32b+0x8c>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d206:	b2db      	uxtb	r3, r3
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d12b      	bne.n	800d264 <HAL_SDRAM_Write_32b+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hsdram);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d212:	2b01      	cmp	r3, #1
 800d214:	d101      	bne.n	800d21a <HAL_SDRAM_Write_32b+0x40>
 800d216:	2302      	movs	r3, #2
 800d218:	e025      	b.n	800d266 <HAL_SDRAM_Write_32b+0x8c>
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2201      	movs	r2, #1
 800d21e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Update the SDRAM controller state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2202      	movs	r2, #2
 800d226:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	61fb      	str	r3, [r7, #28]
 800d22e:	e00c      	b.n	800d24a <HAL_SDRAM_Write_32b+0x70>
    {
      *pSdramAddress = *psrcbuff;
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	601a      	str	r2, [r3, #0]
      psrcbuff++;
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	3304      	adds	r3, #4
 800d23c:	617b      	str	r3, [r7, #20]
      pSdramAddress++;
 800d23e:	69bb      	ldr	r3, [r7, #24]
 800d240:	3304      	adds	r3, #4
 800d242:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	3b01      	subs	r3, #1
 800d248:	61fb      	str	r3, [r7, #28]
 800d24a:	69fb      	ldr	r3, [r7, #28]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d1ef      	bne.n	800d230 <HAL_SDRAM_Write_32b+0x56>
    }

    /* Update the SDRAM controller state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2201      	movs	r2, #1
 800d254:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Process Unlocked */
    __HAL_UNLOCK(hsdram);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2200      	movs	r2, #0
 800d25c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  else
  {
    return  HAL_ERROR;
  }

  return HAL_OK;
 800d260:	2300      	movs	r3, #0
 800d262:	e000      	b.n	800d266 <HAL_SDRAM_Write_32b+0x8c>
    return  HAL_ERROR;
 800d264:	2301      	movs	r3, #1
}
 800d266:	4618      	mov	r0, r3
 800d268:	3724      	adds	r7, #36	; 0x24
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr

0800d272 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d272:	b580      	push	{r7, lr}
 800d274:	b086      	sub	sp, #24
 800d276:	af00      	add	r7, sp, #0
 800d278:	60f8      	str	r0, [r7, #12]
 800d27a:	60b9      	str	r1, [r7, #8]
 800d27c:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d284:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d286:	7dfb      	ldrb	r3, [r7, #23]
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d101      	bne.n	800d290 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800d28c:	2302      	movs	r3, #2
 800d28e:	e021      	b.n	800d2d4 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d290:	7dfb      	ldrb	r3, [r7, #23]
 800d292:	2b01      	cmp	r3, #1
 800d294:	d002      	beq.n	800d29c <HAL_SDRAM_SendCommand+0x2a>
 800d296:	7dfb      	ldrb	r3, [r7, #23]
 800d298:	2b05      	cmp	r3, #5
 800d29a:	d118      	bne.n	800d2ce <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2202      	movs	r2, #2
 800d2a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	687a      	ldr	r2, [r7, #4]
 800d2aa:	68b9      	ldr	r1, [r7, #8]
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f001 f97d 	bl	800e5ac <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	2b02      	cmp	r3, #2
 800d2b8:	d104      	bne.n	800d2c4 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2205      	movs	r2, #5
 800d2be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d2c2:	e006      	b.n	800d2d2 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d2cc:	e001      	b.n	800d2d2 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e000      	b.n	800d2d4 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3718      	adds	r7, #24
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	2b02      	cmp	r3, #2
 800d2f0:	d101      	bne.n	800d2f6 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d2f2:	2302      	movs	r3, #2
 800d2f4:	e016      	b.n	800d324 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d2fc:	b2db      	uxtb	r3, r3
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	d10f      	bne.n	800d322 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2202      	movs	r2, #2
 800d306:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	6839      	ldr	r1, [r7, #0]
 800d310:	4618      	mov	r0, r3
 800d312:	f001 f96f 	bl	800e5f4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2201      	movs	r2, #1
 800d31a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d31e:	2300      	movs	r3, #0
 800d320:	e000      	b.n	800d324 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800d322:	2301      	movs	r3, #1
}
 800d324:	4618      	mov	r0, r3
 800d326:	3708      	adds	r7, #8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b082      	sub	sp, #8
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d101      	bne.n	800d33e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d33a:	2301      	movs	r3, #1
 800d33c:	e042      	b.n	800d3c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d344:	2b00      	cmp	r3, #0
 800d346:	d106      	bne.n	800d356 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2200      	movs	r2, #0
 800d34c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f000 f83b 	bl	800d3cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2224      	movs	r2, #36	; 0x24
 800d35a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f022 0201 	bic.w	r2, r2, #1
 800d36c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 f836 	bl	800d3e0 <UART_SetConfig>
 800d374:	4603      	mov	r3, r0
 800d376:	2b01      	cmp	r3, #1
 800d378:	d101      	bne.n	800d37e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d37a:	2301      	movs	r3, #1
 800d37c:	e022      	b.n	800d3c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d382:	2b00      	cmp	r3, #0
 800d384:	d002      	beq.n	800d38c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 fd92 	bl	800deb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	685a      	ldr	r2, [r3, #4]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d39a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	689a      	ldr	r2, [r3, #8]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d3aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f042 0201 	orr.w	r2, r2, #1
 800d3ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 fe19 	bl	800dff4 <UART_CheckIdleState>
 800d3c2:	4603      	mov	r3, r0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3708      	adds	r7, #8
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800d3d4:	bf00      	nop
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d3e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d3e4:	b092      	sub	sp, #72	; 0x48
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	689a      	ldr	r2, [r3, #8]
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	691b      	ldr	r3, [r3, #16]
 800d3f8:	431a      	orrs	r2, r3
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	695b      	ldr	r3, [r3, #20]
 800d3fe:	431a      	orrs	r2, r3
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	69db      	ldr	r3, [r3, #28]
 800d404:	4313      	orrs	r3, r2
 800d406:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	681a      	ldr	r2, [r3, #0]
 800d40e:	4bbe      	ldr	r3, [pc, #760]	; (800d708 <UART_SetConfig+0x328>)
 800d410:	4013      	ands	r3, r2
 800d412:	697a      	ldr	r2, [r7, #20]
 800d414:	6812      	ldr	r2, [r2, #0]
 800d416:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d418:	430b      	orrs	r3, r1
 800d41a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	68da      	ldr	r2, [r3, #12]
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	430a      	orrs	r2, r1
 800d430:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	699b      	ldr	r3, [r3, #24]
 800d436:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	4ab3      	ldr	r2, [pc, #716]	; (800d70c <UART_SetConfig+0x32c>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d004      	beq.n	800d44c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	6a1b      	ldr	r3, [r3, #32]
 800d446:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d448:	4313      	orrs	r3, r2
 800d44a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	689a      	ldr	r2, [r3, #8]
 800d452:	4baf      	ldr	r3, [pc, #700]	; (800d710 <UART_SetConfig+0x330>)
 800d454:	4013      	ands	r3, r2
 800d456:	697a      	ldr	r2, [r7, #20]
 800d458:	6812      	ldr	r2, [r2, #0]
 800d45a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d45c:	430b      	orrs	r3, r1
 800d45e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d466:	f023 010f 	bic.w	r1, r3, #15
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	430a      	orrs	r2, r1
 800d474:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4aa6      	ldr	r2, [pc, #664]	; (800d714 <UART_SetConfig+0x334>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d177      	bne.n	800d570 <UART_SetConfig+0x190>
 800d480:	4ba5      	ldr	r3, [pc, #660]	; (800d718 <UART_SetConfig+0x338>)
 800d482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d484:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d488:	2b28      	cmp	r3, #40	; 0x28
 800d48a:	d86d      	bhi.n	800d568 <UART_SetConfig+0x188>
 800d48c:	a201      	add	r2, pc, #4	; (adr r2, 800d494 <UART_SetConfig+0xb4>)
 800d48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d492:	bf00      	nop
 800d494:	0800d539 	.word	0x0800d539
 800d498:	0800d569 	.word	0x0800d569
 800d49c:	0800d569 	.word	0x0800d569
 800d4a0:	0800d569 	.word	0x0800d569
 800d4a4:	0800d569 	.word	0x0800d569
 800d4a8:	0800d569 	.word	0x0800d569
 800d4ac:	0800d569 	.word	0x0800d569
 800d4b0:	0800d569 	.word	0x0800d569
 800d4b4:	0800d541 	.word	0x0800d541
 800d4b8:	0800d569 	.word	0x0800d569
 800d4bc:	0800d569 	.word	0x0800d569
 800d4c0:	0800d569 	.word	0x0800d569
 800d4c4:	0800d569 	.word	0x0800d569
 800d4c8:	0800d569 	.word	0x0800d569
 800d4cc:	0800d569 	.word	0x0800d569
 800d4d0:	0800d569 	.word	0x0800d569
 800d4d4:	0800d549 	.word	0x0800d549
 800d4d8:	0800d569 	.word	0x0800d569
 800d4dc:	0800d569 	.word	0x0800d569
 800d4e0:	0800d569 	.word	0x0800d569
 800d4e4:	0800d569 	.word	0x0800d569
 800d4e8:	0800d569 	.word	0x0800d569
 800d4ec:	0800d569 	.word	0x0800d569
 800d4f0:	0800d569 	.word	0x0800d569
 800d4f4:	0800d551 	.word	0x0800d551
 800d4f8:	0800d569 	.word	0x0800d569
 800d4fc:	0800d569 	.word	0x0800d569
 800d500:	0800d569 	.word	0x0800d569
 800d504:	0800d569 	.word	0x0800d569
 800d508:	0800d569 	.word	0x0800d569
 800d50c:	0800d569 	.word	0x0800d569
 800d510:	0800d569 	.word	0x0800d569
 800d514:	0800d559 	.word	0x0800d559
 800d518:	0800d569 	.word	0x0800d569
 800d51c:	0800d569 	.word	0x0800d569
 800d520:	0800d569 	.word	0x0800d569
 800d524:	0800d569 	.word	0x0800d569
 800d528:	0800d569 	.word	0x0800d569
 800d52c:	0800d569 	.word	0x0800d569
 800d530:	0800d569 	.word	0x0800d569
 800d534:	0800d561 	.word	0x0800d561
 800d538:	2301      	movs	r3, #1
 800d53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d53e:	e222      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d540:	2304      	movs	r3, #4
 800d542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d546:	e21e      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d548:	2308      	movs	r3, #8
 800d54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d54e:	e21a      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d550:	2310      	movs	r3, #16
 800d552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d556:	e216      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d558:	2320      	movs	r3, #32
 800d55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d55e:	e212      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d560:	2340      	movs	r3, #64	; 0x40
 800d562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d566:	e20e      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d568:	2380      	movs	r3, #128	; 0x80
 800d56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d56e:	e20a      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4a69      	ldr	r2, [pc, #420]	; (800d71c <UART_SetConfig+0x33c>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d130      	bne.n	800d5dc <UART_SetConfig+0x1fc>
 800d57a:	4b67      	ldr	r3, [pc, #412]	; (800d718 <UART_SetConfig+0x338>)
 800d57c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d57e:	f003 0307 	and.w	r3, r3, #7
 800d582:	2b05      	cmp	r3, #5
 800d584:	d826      	bhi.n	800d5d4 <UART_SetConfig+0x1f4>
 800d586:	a201      	add	r2, pc, #4	; (adr r2, 800d58c <UART_SetConfig+0x1ac>)
 800d588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d58c:	0800d5a5 	.word	0x0800d5a5
 800d590:	0800d5ad 	.word	0x0800d5ad
 800d594:	0800d5b5 	.word	0x0800d5b5
 800d598:	0800d5bd 	.word	0x0800d5bd
 800d59c:	0800d5c5 	.word	0x0800d5c5
 800d5a0:	0800d5cd 	.word	0x0800d5cd
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5aa:	e1ec      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d5ac:	2304      	movs	r3, #4
 800d5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5b2:	e1e8      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d5b4:	2308      	movs	r3, #8
 800d5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ba:	e1e4      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d5bc:	2310      	movs	r3, #16
 800d5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5c2:	e1e0      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d5c4:	2320      	movs	r3, #32
 800d5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ca:	e1dc      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d5cc:	2340      	movs	r3, #64	; 0x40
 800d5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5d2:	e1d8      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d5d4:	2380      	movs	r3, #128	; 0x80
 800d5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5da:	e1d4      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a4f      	ldr	r2, [pc, #316]	; (800d720 <UART_SetConfig+0x340>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d130      	bne.n	800d648 <UART_SetConfig+0x268>
 800d5e6:	4b4c      	ldr	r3, [pc, #304]	; (800d718 <UART_SetConfig+0x338>)
 800d5e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5ea:	f003 0307 	and.w	r3, r3, #7
 800d5ee:	2b05      	cmp	r3, #5
 800d5f0:	d826      	bhi.n	800d640 <UART_SetConfig+0x260>
 800d5f2:	a201      	add	r2, pc, #4	; (adr r2, 800d5f8 <UART_SetConfig+0x218>)
 800d5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f8:	0800d611 	.word	0x0800d611
 800d5fc:	0800d619 	.word	0x0800d619
 800d600:	0800d621 	.word	0x0800d621
 800d604:	0800d629 	.word	0x0800d629
 800d608:	0800d631 	.word	0x0800d631
 800d60c:	0800d639 	.word	0x0800d639
 800d610:	2300      	movs	r3, #0
 800d612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d616:	e1b6      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d618:	2304      	movs	r3, #4
 800d61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d61e:	e1b2      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d620:	2308      	movs	r3, #8
 800d622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d626:	e1ae      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d628:	2310      	movs	r3, #16
 800d62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d62e:	e1aa      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d630:	2320      	movs	r3, #32
 800d632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d636:	e1a6      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d638:	2340      	movs	r3, #64	; 0x40
 800d63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d63e:	e1a2      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d640:	2380      	movs	r3, #128	; 0x80
 800d642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d646:	e19e      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a35      	ldr	r2, [pc, #212]	; (800d724 <UART_SetConfig+0x344>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d130      	bne.n	800d6b4 <UART_SetConfig+0x2d4>
 800d652:	4b31      	ldr	r3, [pc, #196]	; (800d718 <UART_SetConfig+0x338>)
 800d654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d656:	f003 0307 	and.w	r3, r3, #7
 800d65a:	2b05      	cmp	r3, #5
 800d65c:	d826      	bhi.n	800d6ac <UART_SetConfig+0x2cc>
 800d65e:	a201      	add	r2, pc, #4	; (adr r2, 800d664 <UART_SetConfig+0x284>)
 800d660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d664:	0800d67d 	.word	0x0800d67d
 800d668:	0800d685 	.word	0x0800d685
 800d66c:	0800d68d 	.word	0x0800d68d
 800d670:	0800d695 	.word	0x0800d695
 800d674:	0800d69d 	.word	0x0800d69d
 800d678:	0800d6a5 	.word	0x0800d6a5
 800d67c:	2300      	movs	r3, #0
 800d67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d682:	e180      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d684:	2304      	movs	r3, #4
 800d686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d68a:	e17c      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d68c:	2308      	movs	r3, #8
 800d68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d692:	e178      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d694:	2310      	movs	r3, #16
 800d696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d69a:	e174      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d69c:	2320      	movs	r3, #32
 800d69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6a2:	e170      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d6a4:	2340      	movs	r3, #64	; 0x40
 800d6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6aa:	e16c      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d6ac:	2380      	movs	r3, #128	; 0x80
 800d6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6b2:	e168      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a1b      	ldr	r2, [pc, #108]	; (800d728 <UART_SetConfig+0x348>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d142      	bne.n	800d744 <UART_SetConfig+0x364>
 800d6be:	4b16      	ldr	r3, [pc, #88]	; (800d718 <UART_SetConfig+0x338>)
 800d6c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6c2:	f003 0307 	and.w	r3, r3, #7
 800d6c6:	2b05      	cmp	r3, #5
 800d6c8:	d838      	bhi.n	800d73c <UART_SetConfig+0x35c>
 800d6ca:	a201      	add	r2, pc, #4	; (adr r2, 800d6d0 <UART_SetConfig+0x2f0>)
 800d6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6d0:	0800d6e9 	.word	0x0800d6e9
 800d6d4:	0800d6f1 	.word	0x0800d6f1
 800d6d8:	0800d6f9 	.word	0x0800d6f9
 800d6dc:	0800d701 	.word	0x0800d701
 800d6e0:	0800d72d 	.word	0x0800d72d
 800d6e4:	0800d735 	.word	0x0800d735
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ee:	e14a      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d6f0:	2304      	movs	r3, #4
 800d6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6f6:	e146      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d6f8:	2308      	movs	r3, #8
 800d6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6fe:	e142      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d700:	2310      	movs	r3, #16
 800d702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d706:	e13e      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d708:	cfff69f3 	.word	0xcfff69f3
 800d70c:	58000c00 	.word	0x58000c00
 800d710:	11fff4ff 	.word	0x11fff4ff
 800d714:	40011000 	.word	0x40011000
 800d718:	58024400 	.word	0x58024400
 800d71c:	40004400 	.word	0x40004400
 800d720:	40004800 	.word	0x40004800
 800d724:	40004c00 	.word	0x40004c00
 800d728:	40005000 	.word	0x40005000
 800d72c:	2320      	movs	r3, #32
 800d72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d732:	e128      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d734:	2340      	movs	r3, #64	; 0x40
 800d736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d73a:	e124      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d73c:	2380      	movs	r3, #128	; 0x80
 800d73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d742:	e120      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4acb      	ldr	r2, [pc, #812]	; (800da78 <UART_SetConfig+0x698>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d176      	bne.n	800d83c <UART_SetConfig+0x45c>
 800d74e:	4bcb      	ldr	r3, [pc, #812]	; (800da7c <UART_SetConfig+0x69c>)
 800d750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d756:	2b28      	cmp	r3, #40	; 0x28
 800d758:	d86c      	bhi.n	800d834 <UART_SetConfig+0x454>
 800d75a:	a201      	add	r2, pc, #4	; (adr r2, 800d760 <UART_SetConfig+0x380>)
 800d75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d760:	0800d805 	.word	0x0800d805
 800d764:	0800d835 	.word	0x0800d835
 800d768:	0800d835 	.word	0x0800d835
 800d76c:	0800d835 	.word	0x0800d835
 800d770:	0800d835 	.word	0x0800d835
 800d774:	0800d835 	.word	0x0800d835
 800d778:	0800d835 	.word	0x0800d835
 800d77c:	0800d835 	.word	0x0800d835
 800d780:	0800d80d 	.word	0x0800d80d
 800d784:	0800d835 	.word	0x0800d835
 800d788:	0800d835 	.word	0x0800d835
 800d78c:	0800d835 	.word	0x0800d835
 800d790:	0800d835 	.word	0x0800d835
 800d794:	0800d835 	.word	0x0800d835
 800d798:	0800d835 	.word	0x0800d835
 800d79c:	0800d835 	.word	0x0800d835
 800d7a0:	0800d815 	.word	0x0800d815
 800d7a4:	0800d835 	.word	0x0800d835
 800d7a8:	0800d835 	.word	0x0800d835
 800d7ac:	0800d835 	.word	0x0800d835
 800d7b0:	0800d835 	.word	0x0800d835
 800d7b4:	0800d835 	.word	0x0800d835
 800d7b8:	0800d835 	.word	0x0800d835
 800d7bc:	0800d835 	.word	0x0800d835
 800d7c0:	0800d81d 	.word	0x0800d81d
 800d7c4:	0800d835 	.word	0x0800d835
 800d7c8:	0800d835 	.word	0x0800d835
 800d7cc:	0800d835 	.word	0x0800d835
 800d7d0:	0800d835 	.word	0x0800d835
 800d7d4:	0800d835 	.word	0x0800d835
 800d7d8:	0800d835 	.word	0x0800d835
 800d7dc:	0800d835 	.word	0x0800d835
 800d7e0:	0800d825 	.word	0x0800d825
 800d7e4:	0800d835 	.word	0x0800d835
 800d7e8:	0800d835 	.word	0x0800d835
 800d7ec:	0800d835 	.word	0x0800d835
 800d7f0:	0800d835 	.word	0x0800d835
 800d7f4:	0800d835 	.word	0x0800d835
 800d7f8:	0800d835 	.word	0x0800d835
 800d7fc:	0800d835 	.word	0x0800d835
 800d800:	0800d82d 	.word	0x0800d82d
 800d804:	2301      	movs	r3, #1
 800d806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d80a:	e0bc      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d80c:	2304      	movs	r3, #4
 800d80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d812:	e0b8      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d814:	2308      	movs	r3, #8
 800d816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d81a:	e0b4      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d81c:	2310      	movs	r3, #16
 800d81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d822:	e0b0      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d824:	2320      	movs	r3, #32
 800d826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d82a:	e0ac      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d82c:	2340      	movs	r3, #64	; 0x40
 800d82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d832:	e0a8      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d834:	2380      	movs	r3, #128	; 0x80
 800d836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d83a:	e0a4      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4a8f      	ldr	r2, [pc, #572]	; (800da80 <UART_SetConfig+0x6a0>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d130      	bne.n	800d8a8 <UART_SetConfig+0x4c8>
 800d846:	4b8d      	ldr	r3, [pc, #564]	; (800da7c <UART_SetConfig+0x69c>)
 800d848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d84a:	f003 0307 	and.w	r3, r3, #7
 800d84e:	2b05      	cmp	r3, #5
 800d850:	d826      	bhi.n	800d8a0 <UART_SetConfig+0x4c0>
 800d852:	a201      	add	r2, pc, #4	; (adr r2, 800d858 <UART_SetConfig+0x478>)
 800d854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d858:	0800d871 	.word	0x0800d871
 800d85c:	0800d879 	.word	0x0800d879
 800d860:	0800d881 	.word	0x0800d881
 800d864:	0800d889 	.word	0x0800d889
 800d868:	0800d891 	.word	0x0800d891
 800d86c:	0800d899 	.word	0x0800d899
 800d870:	2300      	movs	r3, #0
 800d872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d876:	e086      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d878:	2304      	movs	r3, #4
 800d87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d87e:	e082      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d880:	2308      	movs	r3, #8
 800d882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d886:	e07e      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d888:	2310      	movs	r3, #16
 800d88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d88e:	e07a      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d890:	2320      	movs	r3, #32
 800d892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d896:	e076      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d898:	2340      	movs	r3, #64	; 0x40
 800d89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d89e:	e072      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d8a0:	2380      	movs	r3, #128	; 0x80
 800d8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8a6:	e06e      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a75      	ldr	r2, [pc, #468]	; (800da84 <UART_SetConfig+0x6a4>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d130      	bne.n	800d914 <UART_SetConfig+0x534>
 800d8b2:	4b72      	ldr	r3, [pc, #456]	; (800da7c <UART_SetConfig+0x69c>)
 800d8b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8b6:	f003 0307 	and.w	r3, r3, #7
 800d8ba:	2b05      	cmp	r3, #5
 800d8bc:	d826      	bhi.n	800d90c <UART_SetConfig+0x52c>
 800d8be:	a201      	add	r2, pc, #4	; (adr r2, 800d8c4 <UART_SetConfig+0x4e4>)
 800d8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8c4:	0800d8dd 	.word	0x0800d8dd
 800d8c8:	0800d8e5 	.word	0x0800d8e5
 800d8cc:	0800d8ed 	.word	0x0800d8ed
 800d8d0:	0800d8f5 	.word	0x0800d8f5
 800d8d4:	0800d8fd 	.word	0x0800d8fd
 800d8d8:	0800d905 	.word	0x0800d905
 800d8dc:	2300      	movs	r3, #0
 800d8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8e2:	e050      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d8e4:	2304      	movs	r3, #4
 800d8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ea:	e04c      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d8ec:	2308      	movs	r3, #8
 800d8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8f2:	e048      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d8f4:	2310      	movs	r3, #16
 800d8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8fa:	e044      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d8fc:	2320      	movs	r3, #32
 800d8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d902:	e040      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d904:	2340      	movs	r3, #64	; 0x40
 800d906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d90a:	e03c      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d90c:	2380      	movs	r3, #128	; 0x80
 800d90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d912:	e038      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4a5b      	ldr	r2, [pc, #364]	; (800da88 <UART_SetConfig+0x6a8>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d130      	bne.n	800d980 <UART_SetConfig+0x5a0>
 800d91e:	4b57      	ldr	r3, [pc, #348]	; (800da7c <UART_SetConfig+0x69c>)
 800d920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d922:	f003 0307 	and.w	r3, r3, #7
 800d926:	2b05      	cmp	r3, #5
 800d928:	d826      	bhi.n	800d978 <UART_SetConfig+0x598>
 800d92a:	a201      	add	r2, pc, #4	; (adr r2, 800d930 <UART_SetConfig+0x550>)
 800d92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d930:	0800d949 	.word	0x0800d949
 800d934:	0800d951 	.word	0x0800d951
 800d938:	0800d959 	.word	0x0800d959
 800d93c:	0800d961 	.word	0x0800d961
 800d940:	0800d969 	.word	0x0800d969
 800d944:	0800d971 	.word	0x0800d971
 800d948:	2302      	movs	r3, #2
 800d94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d94e:	e01a      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d950:	2304      	movs	r3, #4
 800d952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d956:	e016      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d958:	2308      	movs	r3, #8
 800d95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d95e:	e012      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d960:	2310      	movs	r3, #16
 800d962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d966:	e00e      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d968:	2320      	movs	r3, #32
 800d96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d96e:	e00a      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d970:	2340      	movs	r3, #64	; 0x40
 800d972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d976:	e006      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d978:	2380      	movs	r3, #128	; 0x80
 800d97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d97e:	e002      	b.n	800d986 <UART_SetConfig+0x5a6>
 800d980:	2380      	movs	r3, #128	; 0x80
 800d982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a3f      	ldr	r2, [pc, #252]	; (800da88 <UART_SetConfig+0x6a8>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	f040 80f8 	bne.w	800db82 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d992:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d996:	2b20      	cmp	r3, #32
 800d998:	dc46      	bgt.n	800da28 <UART_SetConfig+0x648>
 800d99a:	2b02      	cmp	r3, #2
 800d99c:	f2c0 8082 	blt.w	800daa4 <UART_SetConfig+0x6c4>
 800d9a0:	3b02      	subs	r3, #2
 800d9a2:	2b1e      	cmp	r3, #30
 800d9a4:	d87e      	bhi.n	800daa4 <UART_SetConfig+0x6c4>
 800d9a6:	a201      	add	r2, pc, #4	; (adr r2, 800d9ac <UART_SetConfig+0x5cc>)
 800d9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ac:	0800da2f 	.word	0x0800da2f
 800d9b0:	0800daa5 	.word	0x0800daa5
 800d9b4:	0800da37 	.word	0x0800da37
 800d9b8:	0800daa5 	.word	0x0800daa5
 800d9bc:	0800daa5 	.word	0x0800daa5
 800d9c0:	0800daa5 	.word	0x0800daa5
 800d9c4:	0800da47 	.word	0x0800da47
 800d9c8:	0800daa5 	.word	0x0800daa5
 800d9cc:	0800daa5 	.word	0x0800daa5
 800d9d0:	0800daa5 	.word	0x0800daa5
 800d9d4:	0800daa5 	.word	0x0800daa5
 800d9d8:	0800daa5 	.word	0x0800daa5
 800d9dc:	0800daa5 	.word	0x0800daa5
 800d9e0:	0800daa5 	.word	0x0800daa5
 800d9e4:	0800da57 	.word	0x0800da57
 800d9e8:	0800daa5 	.word	0x0800daa5
 800d9ec:	0800daa5 	.word	0x0800daa5
 800d9f0:	0800daa5 	.word	0x0800daa5
 800d9f4:	0800daa5 	.word	0x0800daa5
 800d9f8:	0800daa5 	.word	0x0800daa5
 800d9fc:	0800daa5 	.word	0x0800daa5
 800da00:	0800daa5 	.word	0x0800daa5
 800da04:	0800daa5 	.word	0x0800daa5
 800da08:	0800daa5 	.word	0x0800daa5
 800da0c:	0800daa5 	.word	0x0800daa5
 800da10:	0800daa5 	.word	0x0800daa5
 800da14:	0800daa5 	.word	0x0800daa5
 800da18:	0800daa5 	.word	0x0800daa5
 800da1c:	0800daa5 	.word	0x0800daa5
 800da20:	0800daa5 	.word	0x0800daa5
 800da24:	0800da97 	.word	0x0800da97
 800da28:	2b40      	cmp	r3, #64	; 0x40
 800da2a:	d037      	beq.n	800da9c <UART_SetConfig+0x6bc>
 800da2c:	e03a      	b.n	800daa4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800da2e:	f7fe ff1f 	bl	800c870 <HAL_RCCEx_GetD3PCLK1Freq>
 800da32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800da34:	e03c      	b.n	800dab0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7fe ff2e 	bl	800c89c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800da40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da44:	e034      	b.n	800dab0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da46:	f107 0318 	add.w	r3, r7, #24
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7ff f87a 	bl	800cb44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800da50:	69fb      	ldr	r3, [r7, #28]
 800da52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da54:	e02c      	b.n	800dab0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da56:	4b09      	ldr	r3, [pc, #36]	; (800da7c <UART_SetConfig+0x69c>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f003 0320 	and.w	r3, r3, #32
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d016      	beq.n	800da90 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800da62:	4b06      	ldr	r3, [pc, #24]	; (800da7c <UART_SetConfig+0x69c>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	08db      	lsrs	r3, r3, #3
 800da68:	f003 0303 	and.w	r3, r3, #3
 800da6c:	4a07      	ldr	r2, [pc, #28]	; (800da8c <UART_SetConfig+0x6ac>)
 800da6e:	fa22 f303 	lsr.w	r3, r2, r3
 800da72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800da74:	e01c      	b.n	800dab0 <UART_SetConfig+0x6d0>
 800da76:	bf00      	nop
 800da78:	40011400 	.word	0x40011400
 800da7c:	58024400 	.word	0x58024400
 800da80:	40007800 	.word	0x40007800
 800da84:	40007c00 	.word	0x40007c00
 800da88:	58000c00 	.word	0x58000c00
 800da8c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800da90:	4b9d      	ldr	r3, [pc, #628]	; (800dd08 <UART_SetConfig+0x928>)
 800da92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da94:	e00c      	b.n	800dab0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800da96:	4b9d      	ldr	r3, [pc, #628]	; (800dd0c <UART_SetConfig+0x92c>)
 800da98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da9a:	e009      	b.n	800dab0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800daa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800daa2:	e005      	b.n	800dab0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800daa4:	2300      	movs	r3, #0
 800daa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800daa8:	2301      	movs	r3, #1
 800daaa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800daae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	f000 81de 	beq.w	800de74 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dabc:	4a94      	ldr	r2, [pc, #592]	; (800dd10 <UART_SetConfig+0x930>)
 800dabe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dac2:	461a      	mov	r2, r3
 800dac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dac6:	fbb3 f3f2 	udiv	r3, r3, r2
 800daca:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	685a      	ldr	r2, [r3, #4]
 800dad0:	4613      	mov	r3, r2
 800dad2:	005b      	lsls	r3, r3, #1
 800dad4:	4413      	add	r3, r2
 800dad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dad8:	429a      	cmp	r2, r3
 800dada:	d305      	bcc.n	800dae8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d903      	bls.n	800daf0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800dae8:	2301      	movs	r3, #1
 800daea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800daee:	e1c1      	b.n	800de74 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800daf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daf2:	2200      	movs	r2, #0
 800daf4:	60bb      	str	r3, [r7, #8]
 800daf6:	60fa      	str	r2, [r7, #12]
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dafc:	4a84      	ldr	r2, [pc, #528]	; (800dd10 <UART_SetConfig+0x930>)
 800dafe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db02:	b29b      	uxth	r3, r3
 800db04:	2200      	movs	r2, #0
 800db06:	603b      	str	r3, [r7, #0]
 800db08:	607a      	str	r2, [r7, #4]
 800db0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800db12:	f7f2 fc35 	bl	8000380 <__aeabi_uldivmod>
 800db16:	4602      	mov	r2, r0
 800db18:	460b      	mov	r3, r1
 800db1a:	4610      	mov	r0, r2
 800db1c:	4619      	mov	r1, r3
 800db1e:	f04f 0200 	mov.w	r2, #0
 800db22:	f04f 0300 	mov.w	r3, #0
 800db26:	020b      	lsls	r3, r1, #8
 800db28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800db2c:	0202      	lsls	r2, r0, #8
 800db2e:	6979      	ldr	r1, [r7, #20]
 800db30:	6849      	ldr	r1, [r1, #4]
 800db32:	0849      	lsrs	r1, r1, #1
 800db34:	2000      	movs	r0, #0
 800db36:	460c      	mov	r4, r1
 800db38:	4605      	mov	r5, r0
 800db3a:	eb12 0804 	adds.w	r8, r2, r4
 800db3e:	eb43 0905 	adc.w	r9, r3, r5
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	2200      	movs	r2, #0
 800db48:	469a      	mov	sl, r3
 800db4a:	4693      	mov	fp, r2
 800db4c:	4652      	mov	r2, sl
 800db4e:	465b      	mov	r3, fp
 800db50:	4640      	mov	r0, r8
 800db52:	4649      	mov	r1, r9
 800db54:	f7f2 fc14 	bl	8000380 <__aeabi_uldivmod>
 800db58:	4602      	mov	r2, r0
 800db5a:	460b      	mov	r3, r1
 800db5c:	4613      	mov	r3, r2
 800db5e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800db60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800db66:	d308      	bcc.n	800db7a <UART_SetConfig+0x79a>
 800db68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db6e:	d204      	bcs.n	800db7a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db76:	60da      	str	r2, [r3, #12]
 800db78:	e17c      	b.n	800de74 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800db7a:	2301      	movs	r3, #1
 800db7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800db80:	e178      	b.n	800de74 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	69db      	ldr	r3, [r3, #28]
 800db86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db8a:	f040 80c5 	bne.w	800dd18 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800db8e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800db92:	2b20      	cmp	r3, #32
 800db94:	dc48      	bgt.n	800dc28 <UART_SetConfig+0x848>
 800db96:	2b00      	cmp	r3, #0
 800db98:	db7b      	blt.n	800dc92 <UART_SetConfig+0x8b2>
 800db9a:	2b20      	cmp	r3, #32
 800db9c:	d879      	bhi.n	800dc92 <UART_SetConfig+0x8b2>
 800db9e:	a201      	add	r2, pc, #4	; (adr r2, 800dba4 <UART_SetConfig+0x7c4>)
 800dba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dba4:	0800dc2f 	.word	0x0800dc2f
 800dba8:	0800dc37 	.word	0x0800dc37
 800dbac:	0800dc93 	.word	0x0800dc93
 800dbb0:	0800dc93 	.word	0x0800dc93
 800dbb4:	0800dc3f 	.word	0x0800dc3f
 800dbb8:	0800dc93 	.word	0x0800dc93
 800dbbc:	0800dc93 	.word	0x0800dc93
 800dbc0:	0800dc93 	.word	0x0800dc93
 800dbc4:	0800dc4f 	.word	0x0800dc4f
 800dbc8:	0800dc93 	.word	0x0800dc93
 800dbcc:	0800dc93 	.word	0x0800dc93
 800dbd0:	0800dc93 	.word	0x0800dc93
 800dbd4:	0800dc93 	.word	0x0800dc93
 800dbd8:	0800dc93 	.word	0x0800dc93
 800dbdc:	0800dc93 	.word	0x0800dc93
 800dbe0:	0800dc93 	.word	0x0800dc93
 800dbe4:	0800dc5f 	.word	0x0800dc5f
 800dbe8:	0800dc93 	.word	0x0800dc93
 800dbec:	0800dc93 	.word	0x0800dc93
 800dbf0:	0800dc93 	.word	0x0800dc93
 800dbf4:	0800dc93 	.word	0x0800dc93
 800dbf8:	0800dc93 	.word	0x0800dc93
 800dbfc:	0800dc93 	.word	0x0800dc93
 800dc00:	0800dc93 	.word	0x0800dc93
 800dc04:	0800dc93 	.word	0x0800dc93
 800dc08:	0800dc93 	.word	0x0800dc93
 800dc0c:	0800dc93 	.word	0x0800dc93
 800dc10:	0800dc93 	.word	0x0800dc93
 800dc14:	0800dc93 	.word	0x0800dc93
 800dc18:	0800dc93 	.word	0x0800dc93
 800dc1c:	0800dc93 	.word	0x0800dc93
 800dc20:	0800dc93 	.word	0x0800dc93
 800dc24:	0800dc85 	.word	0x0800dc85
 800dc28:	2b40      	cmp	r3, #64	; 0x40
 800dc2a:	d02e      	beq.n	800dc8a <UART_SetConfig+0x8aa>
 800dc2c:	e031      	b.n	800dc92 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc2e:	f7fd fe85 	bl	800b93c <HAL_RCC_GetPCLK1Freq>
 800dc32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dc34:	e033      	b.n	800dc9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dc36:	f7fd fe97 	bl	800b968 <HAL_RCC_GetPCLK2Freq>
 800dc3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dc3c:	e02f      	b.n	800dc9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7fe fe2a 	bl	800c89c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc4c:	e027      	b.n	800dc9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc4e:	f107 0318 	add.w	r3, r7, #24
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7fe ff76 	bl	800cb44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc5c:	e01f      	b.n	800dc9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc5e:	4b2d      	ldr	r3, [pc, #180]	; (800dd14 <UART_SetConfig+0x934>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f003 0320 	and.w	r3, r3, #32
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d009      	beq.n	800dc7e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dc6a:	4b2a      	ldr	r3, [pc, #168]	; (800dd14 <UART_SetConfig+0x934>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	08db      	lsrs	r3, r3, #3
 800dc70:	f003 0303 	and.w	r3, r3, #3
 800dc74:	4a24      	ldr	r2, [pc, #144]	; (800dd08 <UART_SetConfig+0x928>)
 800dc76:	fa22 f303 	lsr.w	r3, r2, r3
 800dc7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc7c:	e00f      	b.n	800dc9e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dc7e:	4b22      	ldr	r3, [pc, #136]	; (800dd08 <UART_SetConfig+0x928>)
 800dc80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc82:	e00c      	b.n	800dc9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc84:	4b21      	ldr	r3, [pc, #132]	; (800dd0c <UART_SetConfig+0x92c>)
 800dc86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc88:	e009      	b.n	800dc9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc90:	e005      	b.n	800dc9e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dc92:	2300      	movs	r3, #0
 800dc94:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dc96:	2301      	movs	r3, #1
 800dc98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dc9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dc9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	f000 80e7 	beq.w	800de74 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcaa:	4a19      	ldr	r2, [pc, #100]	; (800dd10 <UART_SetConfig+0x930>)
 800dcac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcb8:	005a      	lsls	r2, r3, #1
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	085b      	lsrs	r3, r3, #1
 800dcc0:	441a      	add	r2, r3
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcce:	2b0f      	cmp	r3, #15
 800dcd0:	d916      	bls.n	800dd00 <UART_SetConfig+0x920>
 800dcd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcd8:	d212      	bcs.n	800dd00 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcdc:	b29b      	uxth	r3, r3
 800dcde:	f023 030f 	bic.w	r3, r3, #15
 800dce2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce6:	085b      	lsrs	r3, r3, #1
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	f003 0307 	and.w	r3, r3, #7
 800dcee:	b29a      	uxth	r2, r3
 800dcf0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dcf2:	4313      	orrs	r3, r2
 800dcf4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800dcfc:	60da      	str	r2, [r3, #12]
 800dcfe:	e0b9      	b.n	800de74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dd00:	2301      	movs	r3, #1
 800dd02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dd06:	e0b5      	b.n	800de74 <UART_SetConfig+0xa94>
 800dd08:	03d09000 	.word	0x03d09000
 800dd0c:	003d0900 	.word	0x003d0900
 800dd10:	0801323c 	.word	0x0801323c
 800dd14:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800dd18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dd1c:	2b20      	cmp	r3, #32
 800dd1e:	dc49      	bgt.n	800ddb4 <UART_SetConfig+0x9d4>
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	db7c      	blt.n	800de1e <UART_SetConfig+0xa3e>
 800dd24:	2b20      	cmp	r3, #32
 800dd26:	d87a      	bhi.n	800de1e <UART_SetConfig+0xa3e>
 800dd28:	a201      	add	r2, pc, #4	; (adr r2, 800dd30 <UART_SetConfig+0x950>)
 800dd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd2e:	bf00      	nop
 800dd30:	0800ddbb 	.word	0x0800ddbb
 800dd34:	0800ddc3 	.word	0x0800ddc3
 800dd38:	0800de1f 	.word	0x0800de1f
 800dd3c:	0800de1f 	.word	0x0800de1f
 800dd40:	0800ddcb 	.word	0x0800ddcb
 800dd44:	0800de1f 	.word	0x0800de1f
 800dd48:	0800de1f 	.word	0x0800de1f
 800dd4c:	0800de1f 	.word	0x0800de1f
 800dd50:	0800dddb 	.word	0x0800dddb
 800dd54:	0800de1f 	.word	0x0800de1f
 800dd58:	0800de1f 	.word	0x0800de1f
 800dd5c:	0800de1f 	.word	0x0800de1f
 800dd60:	0800de1f 	.word	0x0800de1f
 800dd64:	0800de1f 	.word	0x0800de1f
 800dd68:	0800de1f 	.word	0x0800de1f
 800dd6c:	0800de1f 	.word	0x0800de1f
 800dd70:	0800ddeb 	.word	0x0800ddeb
 800dd74:	0800de1f 	.word	0x0800de1f
 800dd78:	0800de1f 	.word	0x0800de1f
 800dd7c:	0800de1f 	.word	0x0800de1f
 800dd80:	0800de1f 	.word	0x0800de1f
 800dd84:	0800de1f 	.word	0x0800de1f
 800dd88:	0800de1f 	.word	0x0800de1f
 800dd8c:	0800de1f 	.word	0x0800de1f
 800dd90:	0800de1f 	.word	0x0800de1f
 800dd94:	0800de1f 	.word	0x0800de1f
 800dd98:	0800de1f 	.word	0x0800de1f
 800dd9c:	0800de1f 	.word	0x0800de1f
 800dda0:	0800de1f 	.word	0x0800de1f
 800dda4:	0800de1f 	.word	0x0800de1f
 800dda8:	0800de1f 	.word	0x0800de1f
 800ddac:	0800de1f 	.word	0x0800de1f
 800ddb0:	0800de11 	.word	0x0800de11
 800ddb4:	2b40      	cmp	r3, #64	; 0x40
 800ddb6:	d02e      	beq.n	800de16 <UART_SetConfig+0xa36>
 800ddb8:	e031      	b.n	800de1e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ddba:	f7fd fdbf 	bl	800b93c <HAL_RCC_GetPCLK1Freq>
 800ddbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ddc0:	e033      	b.n	800de2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ddc2:	f7fd fdd1 	bl	800b968 <HAL_RCC_GetPCLK2Freq>
 800ddc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ddc8:	e02f      	b.n	800de2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7fe fd64 	bl	800c89c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ddd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddd8:	e027      	b.n	800de2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ddda:	f107 0318 	add.w	r3, r7, #24
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7fe feb0 	bl	800cb44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dde8:	e01f      	b.n	800de2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddea:	4b2d      	ldr	r3, [pc, #180]	; (800dea0 <UART_SetConfig+0xac0>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f003 0320 	and.w	r3, r3, #32
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d009      	beq.n	800de0a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ddf6:	4b2a      	ldr	r3, [pc, #168]	; (800dea0 <UART_SetConfig+0xac0>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	08db      	lsrs	r3, r3, #3
 800ddfc:	f003 0303 	and.w	r3, r3, #3
 800de00:	4a28      	ldr	r2, [pc, #160]	; (800dea4 <UART_SetConfig+0xac4>)
 800de02:	fa22 f303 	lsr.w	r3, r2, r3
 800de06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de08:	e00f      	b.n	800de2a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800de0a:	4b26      	ldr	r3, [pc, #152]	; (800dea4 <UART_SetConfig+0xac4>)
 800de0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de0e:	e00c      	b.n	800de2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de10:	4b25      	ldr	r3, [pc, #148]	; (800dea8 <UART_SetConfig+0xac8>)
 800de12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de14:	e009      	b.n	800de2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de1c:	e005      	b.n	800de2a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800de1e:	2300      	movs	r3, #0
 800de20:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800de22:	2301      	movs	r3, #1
 800de24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800de28:	bf00      	nop
    }

    if (pclk != 0U)
 800de2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d021      	beq.n	800de74 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de34:	4a1d      	ldr	r2, [pc, #116]	; (800deac <UART_SetConfig+0xacc>)
 800de36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de3a:	461a      	mov	r2, r3
 800de3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de3e:	fbb3 f2f2 	udiv	r2, r3, r2
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	685b      	ldr	r3, [r3, #4]
 800de46:	085b      	lsrs	r3, r3, #1
 800de48:	441a      	add	r2, r3
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800de52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de56:	2b0f      	cmp	r3, #15
 800de58:	d909      	bls.n	800de6e <UART_SetConfig+0xa8e>
 800de5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de60:	d205      	bcs.n	800de6e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800de62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de64:	b29a      	uxth	r2, r3
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	60da      	str	r2, [r3, #12]
 800de6c:	e002      	b.n	800de74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800de6e:	2301      	movs	r3, #1
 800de70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	2201      	movs	r2, #1
 800de78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	2201      	movs	r2, #1
 800de80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	2200      	movs	r2, #0
 800de88:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	2200      	movs	r2, #0
 800de8e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800de90:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800de94:	4618      	mov	r0, r3
 800de96:	3748      	adds	r7, #72	; 0x48
 800de98:	46bd      	mov	sp, r7
 800de9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800de9e:	bf00      	nop
 800dea0:	58024400 	.word	0x58024400
 800dea4:	03d09000 	.word	0x03d09000
 800dea8:	003d0900 	.word	0x003d0900
 800deac:	0801323c 	.word	0x0801323c

0800deb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800deb0:	b480      	push	{r7}
 800deb2:	b083      	sub	sp, #12
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800debc:	f003 0301 	and.w	r3, r3, #1
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d00a      	beq.n	800deda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	685b      	ldr	r3, [r3, #4]
 800deca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	430a      	orrs	r2, r1
 800ded8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dede:	f003 0302 	and.w	r3, r3, #2
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d00a      	beq.n	800defc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	430a      	orrs	r2, r1
 800defa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df00:	f003 0304 	and.w	r3, r3, #4
 800df04:	2b00      	cmp	r3, #0
 800df06:	d00a      	beq.n	800df1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	685b      	ldr	r3, [r3, #4]
 800df0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	430a      	orrs	r2, r1
 800df1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df22:	f003 0308 	and.w	r3, r3, #8
 800df26:	2b00      	cmp	r3, #0
 800df28:	d00a      	beq.n	800df40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	430a      	orrs	r2, r1
 800df3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df44:	f003 0310 	and.w	r3, r3, #16
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d00a      	beq.n	800df62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	689b      	ldr	r3, [r3, #8]
 800df52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	430a      	orrs	r2, r1
 800df60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df66:	f003 0320 	and.w	r3, r3, #32
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d00a      	beq.n	800df84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	689b      	ldr	r3, [r3, #8]
 800df74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	430a      	orrs	r2, r1
 800df82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d01a      	beq.n	800dfc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	430a      	orrs	r2, r1
 800dfa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfae:	d10a      	bne.n	800dfc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	430a      	orrs	r2, r1
 800dfc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00a      	beq.n	800dfe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	430a      	orrs	r2, r1
 800dfe6:	605a      	str	r2, [r3, #4]
  }
}
 800dfe8:	bf00      	nop
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b086      	sub	sp, #24
 800dff8:	af02      	add	r7, sp, #8
 800dffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2200      	movs	r2, #0
 800e000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e004:	f7f9 f8f0 	bl	80071e8 <HAL_GetTick>
 800e008:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f003 0308 	and.w	r3, r3, #8
 800e014:	2b08      	cmp	r3, #8
 800e016:	d10e      	bne.n	800e036 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e01c:	9300      	str	r3, [sp, #0]
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2200      	movs	r2, #0
 800e022:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f000 f82f 	bl	800e08a <UART_WaitOnFlagUntilTimeout>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d001      	beq.n	800e036 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e032:	2303      	movs	r3, #3
 800e034:	e025      	b.n	800e082 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f003 0304 	and.w	r3, r3, #4
 800e040:	2b04      	cmp	r3, #4
 800e042:	d10e      	bne.n	800e062 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e044:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e048:	9300      	str	r3, [sp, #0]
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2200      	movs	r2, #0
 800e04e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f000 f819 	bl	800e08a <UART_WaitOnFlagUntilTimeout>
 800e058:	4603      	mov	r3, r0
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d001      	beq.n	800e062 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e05e:	2303      	movs	r3, #3
 800e060:	e00f      	b.n	800e082 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2220      	movs	r2, #32
 800e066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2220      	movs	r2, #32
 800e06e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2200      	movs	r2, #0
 800e076:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2200      	movs	r2, #0
 800e07c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e080:	2300      	movs	r3, #0
}
 800e082:	4618      	mov	r0, r3
 800e084:	3710      	adds	r7, #16
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}

0800e08a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e08a:	b580      	push	{r7, lr}
 800e08c:	b09c      	sub	sp, #112	; 0x70
 800e08e:	af00      	add	r7, sp, #0
 800e090:	60f8      	str	r0, [r7, #12]
 800e092:	60b9      	str	r1, [r7, #8]
 800e094:	603b      	str	r3, [r7, #0]
 800e096:	4613      	mov	r3, r2
 800e098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e09a:	e0a9      	b.n	800e1f0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e09c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0a2:	f000 80a5 	beq.w	800e1f0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e0a6:	f7f9 f89f 	bl	80071e8 <HAL_GetTick>
 800e0aa:	4602      	mov	r2, r0
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	1ad3      	subs	r3, r2, r3
 800e0b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d302      	bcc.n	800e0bc <UART_WaitOnFlagUntilTimeout+0x32>
 800e0b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d140      	bne.n	800e13e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0c4:	e853 3f00 	ldrex	r3, [r3]
 800e0c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e0ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e0d0:	667b      	str	r3, [r7, #100]	; 0x64
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e0da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e0e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e0e2:	e841 2300 	strex	r3, r2, [r1]
 800e0e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e0e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d1e6      	bne.n	800e0bc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	3308      	adds	r3, #8
 800e0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0f8:	e853 3f00 	ldrex	r3, [r3]
 800e0fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e100:	f023 0301 	bic.w	r3, r3, #1
 800e104:	663b      	str	r3, [r7, #96]	; 0x60
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	3308      	adds	r3, #8
 800e10c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e10e:	64ba      	str	r2, [r7, #72]	; 0x48
 800e110:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e112:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e114:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e116:	e841 2300 	strex	r3, r2, [r1]
 800e11a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e11c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d1e5      	bne.n	800e0ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2220      	movs	r2, #32
 800e126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2220      	movs	r2, #32
 800e12e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2200      	movs	r2, #0
 800e136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e13a:	2303      	movs	r3, #3
 800e13c:	e069      	b.n	800e212 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	f003 0304 	and.w	r3, r3, #4
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d051      	beq.n	800e1f0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	69db      	ldr	r3, [r3, #28]
 800e152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e15a:	d149      	bne.n	800e1f0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e164:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16e:	e853 3f00 	ldrex	r3, [r3]
 800e172:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e176:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e17a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	461a      	mov	r2, r3
 800e182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e184:	637b      	str	r3, [r7, #52]	; 0x34
 800e186:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e188:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e18a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e18c:	e841 2300 	strex	r3, r2, [r1]
 800e190:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e194:	2b00      	cmp	r3, #0
 800e196:	d1e6      	bne.n	800e166 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	3308      	adds	r3, #8
 800e19e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	e853 3f00 	ldrex	r3, [r3]
 800e1a6:	613b      	str	r3, [r7, #16]
   return(result);
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	f023 0301 	bic.w	r3, r3, #1
 800e1ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	3308      	adds	r3, #8
 800e1b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e1b8:	623a      	str	r2, [r7, #32]
 800e1ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1bc:	69f9      	ldr	r1, [r7, #28]
 800e1be:	6a3a      	ldr	r2, [r7, #32]
 800e1c0:	e841 2300 	strex	r3, r2, [r1]
 800e1c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e1c6:	69bb      	ldr	r3, [r7, #24]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d1e5      	bne.n	800e198 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	2220      	movs	r2, #32
 800e1d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2220      	movs	r2, #32
 800e1d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2220      	movs	r2, #32
 800e1e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e1ec:	2303      	movs	r3, #3
 800e1ee:	e010      	b.n	800e212 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	69da      	ldr	r2, [r3, #28]
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	4013      	ands	r3, r2
 800e1fa:	68ba      	ldr	r2, [r7, #8]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	bf0c      	ite	eq
 800e200:	2301      	moveq	r3, #1
 800e202:	2300      	movne	r3, #0
 800e204:	b2db      	uxtb	r3, r3
 800e206:	461a      	mov	r2, r3
 800e208:	79fb      	ldrb	r3, [r7, #7]
 800e20a:	429a      	cmp	r2, r3
 800e20c:	f43f af46 	beq.w	800e09c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e210:	2300      	movs	r3, #0
}
 800e212:	4618      	mov	r0, r3
 800e214:	3770      	adds	r7, #112	; 0x70
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}

0800e21a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e21a:	b480      	push	{r7}
 800e21c:	b085      	sub	sp, #20
 800e21e:	af00      	add	r7, sp, #0
 800e220:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d101      	bne.n	800e230 <HAL_UARTEx_DisableFifoMode+0x16>
 800e22c:	2302      	movs	r3, #2
 800e22e:	e027      	b.n	800e280 <HAL_UARTEx_DisableFifoMode+0x66>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2201      	movs	r2, #1
 800e234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2224      	movs	r2, #36	; 0x24
 800e23c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	681a      	ldr	r2, [r3, #0]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f022 0201 	bic.w	r2, r2, #1
 800e256:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e25e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	68fa      	ldr	r2, [r7, #12]
 800e26c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2220      	movs	r2, #32
 800e272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2200      	movs	r2, #0
 800e27a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e27e:	2300      	movs	r3, #0
}
 800e280:	4618      	mov	r0, r3
 800e282:	3714      	adds	r7, #20
 800e284:	46bd      	mov	sp, r7
 800e286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28a:	4770      	bx	lr

0800e28c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d101      	bne.n	800e2a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e2a0:	2302      	movs	r3, #2
 800e2a2:	e02d      	b.n	800e300 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2224      	movs	r2, #36	; 0x24
 800e2b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f022 0201 	bic.w	r2, r2, #1
 800e2ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	689b      	ldr	r3, [r3, #8]
 800e2d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	683a      	ldr	r2, [r7, #0]
 800e2dc:	430a      	orrs	r2, r1
 800e2de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f000 f84f 	bl	800e384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	68fa      	ldr	r2, [r7, #12]
 800e2ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2220      	movs	r2, #32
 800e2f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e2fe:	2300      	movs	r3, #0
}
 800e300:	4618      	mov	r0, r3
 800e302:	3710      	adds	r7, #16
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}

0800e308 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b084      	sub	sp, #16
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d101      	bne.n	800e320 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e31c:	2302      	movs	r3, #2
 800e31e:	e02d      	b.n	800e37c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2201      	movs	r2, #1
 800e324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2224      	movs	r2, #36	; 0x24
 800e32c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	f022 0201 	bic.w	r2, r2, #1
 800e346:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	683a      	ldr	r2, [r7, #0]
 800e358:	430a      	orrs	r2, r1
 800e35a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f000 f811 	bl	800e384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	68fa      	ldr	r2, [r7, #12]
 800e368:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2220      	movs	r2, #32
 800e36e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2200      	movs	r2, #0
 800e376:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e37a:	2300      	movs	r3, #0
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3710      	adds	r7, #16
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e384:	b480      	push	{r7}
 800e386:	b085      	sub	sp, #20
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e390:	2b00      	cmp	r3, #0
 800e392:	d108      	bne.n	800e3a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2201      	movs	r2, #1
 800e398:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2201      	movs	r2, #1
 800e3a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e3a4:	e031      	b.n	800e40a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e3a6:	2310      	movs	r3, #16
 800e3a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e3aa:	2310      	movs	r3, #16
 800e3ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	689b      	ldr	r3, [r3, #8]
 800e3b4:	0e5b      	lsrs	r3, r3, #25
 800e3b6:	b2db      	uxtb	r3, r3
 800e3b8:	f003 0307 	and.w	r3, r3, #7
 800e3bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	689b      	ldr	r3, [r3, #8]
 800e3c4:	0f5b      	lsrs	r3, r3, #29
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	f003 0307 	and.w	r3, r3, #7
 800e3cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e3ce:	7bbb      	ldrb	r3, [r7, #14]
 800e3d0:	7b3a      	ldrb	r2, [r7, #12]
 800e3d2:	4911      	ldr	r1, [pc, #68]	; (800e418 <UARTEx_SetNbDataToProcess+0x94>)
 800e3d4:	5c8a      	ldrb	r2, [r1, r2]
 800e3d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e3da:	7b3a      	ldrb	r2, [r7, #12]
 800e3dc:	490f      	ldr	r1, [pc, #60]	; (800e41c <UARTEx_SetNbDataToProcess+0x98>)
 800e3de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e3e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e3e4:	b29a      	uxth	r2, r3
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e3ec:	7bfb      	ldrb	r3, [r7, #15]
 800e3ee:	7b7a      	ldrb	r2, [r7, #13]
 800e3f0:	4909      	ldr	r1, [pc, #36]	; (800e418 <UARTEx_SetNbDataToProcess+0x94>)
 800e3f2:	5c8a      	ldrb	r2, [r1, r2]
 800e3f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e3f8:	7b7a      	ldrb	r2, [r7, #13]
 800e3fa:	4908      	ldr	r1, [pc, #32]	; (800e41c <UARTEx_SetNbDataToProcess+0x98>)
 800e3fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e3fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800e402:	b29a      	uxth	r2, r3
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e40a:	bf00      	nop
 800e40c:	3714      	adds	r7, #20
 800e40e:	46bd      	mov	sp, r7
 800e410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e414:	4770      	bx	lr
 800e416:	bf00      	nop
 800e418:	08013254 	.word	0x08013254
 800e41c:	0801325c 	.word	0x0801325c

0800e420 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e420:	b480      	push	{r7}
 800e422:	b083      	sub	sp, #12
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d121      	bne.n	800e476 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681a      	ldr	r2, [r3, #0]
 800e436:	4b27      	ldr	r3, [pc, #156]	; (800e4d4 <FMC_SDRAM_Init+0xb4>)
 800e438:	4013      	ands	r3, r2
 800e43a:	683a      	ldr	r2, [r7, #0]
 800e43c:	6851      	ldr	r1, [r2, #4]
 800e43e:	683a      	ldr	r2, [r7, #0]
 800e440:	6892      	ldr	r2, [r2, #8]
 800e442:	4311      	orrs	r1, r2
 800e444:	683a      	ldr	r2, [r7, #0]
 800e446:	68d2      	ldr	r2, [r2, #12]
 800e448:	4311      	orrs	r1, r2
 800e44a:	683a      	ldr	r2, [r7, #0]
 800e44c:	6912      	ldr	r2, [r2, #16]
 800e44e:	4311      	orrs	r1, r2
 800e450:	683a      	ldr	r2, [r7, #0]
 800e452:	6952      	ldr	r2, [r2, #20]
 800e454:	4311      	orrs	r1, r2
 800e456:	683a      	ldr	r2, [r7, #0]
 800e458:	6992      	ldr	r2, [r2, #24]
 800e45a:	4311      	orrs	r1, r2
 800e45c:	683a      	ldr	r2, [r7, #0]
 800e45e:	69d2      	ldr	r2, [r2, #28]
 800e460:	4311      	orrs	r1, r2
 800e462:	683a      	ldr	r2, [r7, #0]
 800e464:	6a12      	ldr	r2, [r2, #32]
 800e466:	4311      	orrs	r1, r2
 800e468:	683a      	ldr	r2, [r7, #0]
 800e46a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e46c:	430a      	orrs	r2, r1
 800e46e:	431a      	orrs	r2, r3
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	601a      	str	r2, [r3, #0]
 800e474:	e026      	b.n	800e4c4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	69d9      	ldr	r1, [r3, #28]
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	6a1b      	ldr	r3, [r3, #32]
 800e486:	4319      	orrs	r1, r3
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e48c:	430b      	orrs	r3, r1
 800e48e:	431a      	orrs	r2, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	685a      	ldr	r2, [r3, #4]
 800e498:	4b0e      	ldr	r3, [pc, #56]	; (800e4d4 <FMC_SDRAM_Init+0xb4>)
 800e49a:	4013      	ands	r3, r2
 800e49c:	683a      	ldr	r2, [r7, #0]
 800e49e:	6851      	ldr	r1, [r2, #4]
 800e4a0:	683a      	ldr	r2, [r7, #0]
 800e4a2:	6892      	ldr	r2, [r2, #8]
 800e4a4:	4311      	orrs	r1, r2
 800e4a6:	683a      	ldr	r2, [r7, #0]
 800e4a8:	68d2      	ldr	r2, [r2, #12]
 800e4aa:	4311      	orrs	r1, r2
 800e4ac:	683a      	ldr	r2, [r7, #0]
 800e4ae:	6912      	ldr	r2, [r2, #16]
 800e4b0:	4311      	orrs	r1, r2
 800e4b2:	683a      	ldr	r2, [r7, #0]
 800e4b4:	6952      	ldr	r2, [r2, #20]
 800e4b6:	4311      	orrs	r1, r2
 800e4b8:	683a      	ldr	r2, [r7, #0]
 800e4ba:	6992      	ldr	r2, [r2, #24]
 800e4bc:	430a      	orrs	r2, r1
 800e4be:	431a      	orrs	r2, r3
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800e4c4:	2300      	movs	r3, #0
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	370c      	adds	r7, #12
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr
 800e4d2:	bf00      	nop
 800e4d4:	ffff8000 	.word	0xffff8000

0800e4d8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b085      	sub	sp, #20
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	60b9      	str	r1, [r7, #8]
 800e4e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d128      	bne.n	800e53c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	689b      	ldr	r3, [r3, #8]
 800e4ee:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	1e59      	subs	r1, r3, #1
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	685b      	ldr	r3, [r3, #4]
 800e4fc:	3b01      	subs	r3, #1
 800e4fe:	011b      	lsls	r3, r3, #4
 800e500:	4319      	orrs	r1, r3
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	689b      	ldr	r3, [r3, #8]
 800e506:	3b01      	subs	r3, #1
 800e508:	021b      	lsls	r3, r3, #8
 800e50a:	4319      	orrs	r1, r3
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	68db      	ldr	r3, [r3, #12]
 800e510:	3b01      	subs	r3, #1
 800e512:	031b      	lsls	r3, r3, #12
 800e514:	4319      	orrs	r1, r3
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	691b      	ldr	r3, [r3, #16]
 800e51a:	3b01      	subs	r3, #1
 800e51c:	041b      	lsls	r3, r3, #16
 800e51e:	4319      	orrs	r1, r3
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	695b      	ldr	r3, [r3, #20]
 800e524:	3b01      	subs	r3, #1
 800e526:	051b      	lsls	r3, r3, #20
 800e528:	4319      	orrs	r1, r3
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	699b      	ldr	r3, [r3, #24]
 800e52e:	3b01      	subs	r3, #1
 800e530:	061b      	lsls	r3, r3, #24
 800e532:	430b      	orrs	r3, r1
 800e534:	431a      	orrs	r2, r3
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	609a      	str	r2, [r3, #8]
 800e53a:	e02d      	b.n	800e598 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	689a      	ldr	r2, [r3, #8]
 800e540:	4b19      	ldr	r3, [pc, #100]	; (800e5a8 <FMC_SDRAM_Timing_Init+0xd0>)
 800e542:	4013      	ands	r3, r2
 800e544:	68ba      	ldr	r2, [r7, #8]
 800e546:	68d2      	ldr	r2, [r2, #12]
 800e548:	3a01      	subs	r2, #1
 800e54a:	0311      	lsls	r1, r2, #12
 800e54c:	68ba      	ldr	r2, [r7, #8]
 800e54e:	6952      	ldr	r2, [r2, #20]
 800e550:	3a01      	subs	r2, #1
 800e552:	0512      	lsls	r2, r2, #20
 800e554:	430a      	orrs	r2, r1
 800e556:	431a      	orrs	r2, r3
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	68db      	ldr	r3, [r3, #12]
 800e560:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	1e59      	subs	r1, r3, #1
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	3b01      	subs	r3, #1
 800e570:	011b      	lsls	r3, r3, #4
 800e572:	4319      	orrs	r1, r3
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	689b      	ldr	r3, [r3, #8]
 800e578:	3b01      	subs	r3, #1
 800e57a:	021b      	lsls	r3, r3, #8
 800e57c:	4319      	orrs	r1, r3
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	691b      	ldr	r3, [r3, #16]
 800e582:	3b01      	subs	r3, #1
 800e584:	041b      	lsls	r3, r3, #16
 800e586:	4319      	orrs	r1, r3
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	699b      	ldr	r3, [r3, #24]
 800e58c:	3b01      	subs	r3, #1
 800e58e:	061b      	lsls	r3, r3, #24
 800e590:	430b      	orrs	r3, r1
 800e592:	431a      	orrs	r2, r3
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800e598:	2300      	movs	r3, #0
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3714      	adds	r7, #20
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a4:	4770      	bx	lr
 800e5a6:	bf00      	nop
 800e5a8:	ff0f0fff 	.word	0xff0f0fff

0800e5ac <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b085      	sub	sp, #20
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	60f8      	str	r0, [r7, #12]
 800e5b4:	60b9      	str	r1, [r7, #8]
 800e5b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	691a      	ldr	r2, [r3, #16]
 800e5bc:	4b0c      	ldr	r3, [pc, #48]	; (800e5f0 <FMC_SDRAM_SendCommand+0x44>)
 800e5be:	4013      	ands	r3, r2
 800e5c0:	68ba      	ldr	r2, [r7, #8]
 800e5c2:	6811      	ldr	r1, [r2, #0]
 800e5c4:	68ba      	ldr	r2, [r7, #8]
 800e5c6:	6852      	ldr	r2, [r2, #4]
 800e5c8:	4311      	orrs	r1, r2
 800e5ca:	68ba      	ldr	r2, [r7, #8]
 800e5cc:	6892      	ldr	r2, [r2, #8]
 800e5ce:	3a01      	subs	r2, #1
 800e5d0:	0152      	lsls	r2, r2, #5
 800e5d2:	4311      	orrs	r1, r2
 800e5d4:	68ba      	ldr	r2, [r7, #8]
 800e5d6:	68d2      	ldr	r2, [r2, #12]
 800e5d8:	0252      	lsls	r2, r2, #9
 800e5da:	430a      	orrs	r2, r1
 800e5dc:	431a      	orrs	r2, r3
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800e5e2:	2300      	movs	r3, #0
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3714      	adds	r7, #20
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ee:	4770      	bx	lr
 800e5f0:	ffc00000 	.word	0xffc00000

0800e5f4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	695a      	ldr	r2, [r3, #20]
 800e602:	4b07      	ldr	r3, [pc, #28]	; (800e620 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800e604:	4013      	ands	r3, r2
 800e606:	683a      	ldr	r2, [r7, #0]
 800e608:	0052      	lsls	r2, r2, #1
 800e60a:	431a      	orrs	r2, r3
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800e610:	2300      	movs	r3, #0
}
 800e612:	4618      	mov	r0, r3
 800e614:	370c      	adds	r7, #12
 800e616:	46bd      	mov	sp, r7
 800e618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61c:	4770      	bx	lr
 800e61e:	bf00      	nop
 800e620:	ffffc001 	.word	0xffffc001

0800e624 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b082      	sub	sp, #8
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4a22      	ldr	r2, [pc, #136]	; (800e6bc <UTIL_LCD_SetFuncDriver+0x98>)
 800e632:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	4a20      	ldr	r2, [pc, #128]	; (800e6bc <UTIL_LCD_SetFuncDriver+0x98>)
 800e63a:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	689b      	ldr	r3, [r3, #8]
 800e640:	4a1e      	ldr	r2, [pc, #120]	; (800e6bc <UTIL_LCD_SetFuncDriver+0x98>)
 800e642:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	68db      	ldr	r3, [r3, #12]
 800e648:	4a1c      	ldr	r2, [pc, #112]	; (800e6bc <UTIL_LCD_SetFuncDriver+0x98>)
 800e64a:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	691b      	ldr	r3, [r3, #16]
 800e650:	4a1a      	ldr	r2, [pc, #104]	; (800e6bc <UTIL_LCD_SetFuncDriver+0x98>)
 800e652:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	695b      	ldr	r3, [r3, #20]
 800e658:	4a18      	ldr	r2, [pc, #96]	; (800e6bc <UTIL_LCD_SetFuncDriver+0x98>)
 800e65a:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	699b      	ldr	r3, [r3, #24]
 800e660:	4a16      	ldr	r2, [pc, #88]	; (800e6bc <UTIL_LCD_SetFuncDriver+0x98>)
 800e662:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	69db      	ldr	r3, [r3, #28]
 800e668:	4a14      	ldr	r2, [pc, #80]	; (800e6bc <UTIL_LCD_SetFuncDriver+0x98>)
 800e66a:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6a1b      	ldr	r3, [r3, #32]
 800e670:	4a12      	ldr	r2, [pc, #72]	; (800e6bc <UTIL_LCD_SetFuncDriver+0x98>)
 800e672:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e678:	4a10      	ldr	r2, [pc, #64]	; (800e6bc <UTIL_LCD_SetFuncDriver+0x98>)
 800e67a:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e680:	4a0e      	ldr	r2, [pc, #56]	; (800e6bc <UTIL_LCD_SetFuncDriver+0x98>)
 800e682:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 800e684:	4b0e      	ldr	r3, [pc, #56]	; (800e6c0 <UTIL_LCD_SetFuncDriver+0x9c>)
 800e686:	2200      	movs	r2, #0
 800e688:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 800e68a:	4b0d      	ldr	r3, [pc, #52]	; (800e6c0 <UTIL_LCD_SetFuncDriver+0x9c>)
 800e68c:	2200      	movs	r2, #0
 800e68e:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800e690:	4b0a      	ldr	r3, [pc, #40]	; (800e6bc <UTIL_LCD_SetFuncDriver+0x98>)
 800e692:	69db      	ldr	r3, [r3, #28]
 800e694:	4a0b      	ldr	r2, [pc, #44]	; (800e6c4 <UTIL_LCD_SetFuncDriver+0xa0>)
 800e696:	4611      	mov	r1, r2
 800e698:	2000      	movs	r0, #0
 800e69a:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 800e69c:	4b07      	ldr	r3, [pc, #28]	; (800e6bc <UTIL_LCD_SetFuncDriver+0x98>)
 800e69e:	6a1b      	ldr	r3, [r3, #32]
 800e6a0:	4a09      	ldr	r2, [pc, #36]	; (800e6c8 <UTIL_LCD_SetFuncDriver+0xa4>)
 800e6a2:	4611      	mov	r1, r2
 800e6a4:	2000      	movs	r0, #0
 800e6a6:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800e6a8:	4b04      	ldr	r3, [pc, #16]	; (800e6bc <UTIL_LCD_SetFuncDriver+0x98>)
 800e6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ac:	4a07      	ldr	r2, [pc, #28]	; (800e6cc <UTIL_LCD_SetFuncDriver+0xa8>)
 800e6ae:	4611      	mov	r1, r2
 800e6b0:	2000      	movs	r0, #0
 800e6b2:	4798      	blx	r3
}
 800e6b4:	bf00      	nop
 800e6b6:	3708      	adds	r7, #8
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}
 800e6bc:	24001b88 	.word	0x24001b88
 800e6c0:	24001b48 	.word	0x24001b48
 800e6c4:	24001b5c 	.word	0x24001b5c
 800e6c8:	24001b60 	.word	0x24001b60
 800e6cc:	24001b64 	.word	0x24001b64

0800e6d0 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 800e6d8:	4b06      	ldr	r3, [pc, #24]	; (800e6f4 <UTIL_LCD_SetTextColor+0x24>)
 800e6da:	68db      	ldr	r3, [r3, #12]
 800e6dc:	4a05      	ldr	r2, [pc, #20]	; (800e6f4 <UTIL_LCD_SetTextColor+0x24>)
 800e6de:	015b      	lsls	r3, r3, #5
 800e6e0:	4413      	add	r3, r2
 800e6e2:	687a      	ldr	r2, [r7, #4]
 800e6e4:	601a      	str	r2, [r3, #0]
}
 800e6e6:	bf00      	nop
 800e6e8:	370c      	adds	r7, #12
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr
 800e6f2:	bf00      	nop
 800e6f4:	24001b48 	.word	0x24001b48

0800e6f8 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b083      	sub	sp, #12
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 800e700:	4b06      	ldr	r3, [pc, #24]	; (800e71c <UTIL_LCD_SetBackColor+0x24>)
 800e702:	68db      	ldr	r3, [r3, #12]
 800e704:	4a05      	ldr	r2, [pc, #20]	; (800e71c <UTIL_LCD_SetBackColor+0x24>)
 800e706:	015b      	lsls	r3, r3, #5
 800e708:	4413      	add	r3, r2
 800e70a:	3304      	adds	r3, #4
 800e70c:	687a      	ldr	r2, [r7, #4]
 800e70e:	601a      	str	r2, [r3, #0]
}
 800e710:	bf00      	nop
 800e712:	370c      	adds	r7, #12
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr
 800e71c:	24001b48 	.word	0x24001b48

0800e720 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 800e720:	b480      	push	{r7}
 800e722:	b083      	sub	sp, #12
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 800e728:	4b06      	ldr	r3, [pc, #24]	; (800e744 <UTIL_LCD_SetFont+0x24>)
 800e72a:	68db      	ldr	r3, [r3, #12]
 800e72c:	4a05      	ldr	r2, [pc, #20]	; (800e744 <UTIL_LCD_SetFont+0x24>)
 800e72e:	015b      	lsls	r3, r3, #5
 800e730:	4413      	add	r3, r2
 800e732:	3308      	adds	r3, #8
 800e734:	687a      	ldr	r2, [r7, #4]
 800e736:	601a      	str	r2, [r3, #0]
}
 800e738:	bf00      	nop
 800e73a:	370c      	adds	r7, #12
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr
 800e744:	24001b48 	.word	0x24001b48

0800e748 <UTIL_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
 800e748:	b480      	push	{r7}
 800e74a:	af00      	add	r7, sp, #0
  return DrawProp[DrawProp->LcdLayer].pFont;
 800e74c:	4b05      	ldr	r3, [pc, #20]	; (800e764 <UTIL_LCD_GetFont+0x1c>)
 800e74e:	68db      	ldr	r3, [r3, #12]
 800e750:	4a04      	ldr	r2, [pc, #16]	; (800e764 <UTIL_LCD_GetFont+0x1c>)
 800e752:	015b      	lsls	r3, r3, #5
 800e754:	4413      	add	r3, r2
 800e756:	3308      	adds	r3, #8
 800e758:	681b      	ldr	r3, [r3, #0]
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr
 800e764:	24001b48 	.word	0x24001b48

0800e768 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800e768:	b590      	push	{r4, r7, lr}
 800e76a:	b087      	sub	sp, #28
 800e76c:	af02      	add	r7, sp, #8
 800e76e:	60f8      	str	r0, [r7, #12]
 800e770:	60b9      	str	r1, [r7, #8]
 800e772:	607a      	str	r2, [r7, #4]
 800e774:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 800e776:	4b08      	ldr	r3, [pc, #32]	; (800e798 <UTIL_LCD_FillRGBRect+0x30>)
 800e778:	685c      	ldr	r4, [r3, #4]
 800e77a:	4b08      	ldr	r3, [pc, #32]	; (800e79c <UTIL_LCD_FillRGBRect+0x34>)
 800e77c:	6918      	ldr	r0, [r3, #16]
 800e77e:	6a3b      	ldr	r3, [r7, #32]
 800e780:	9301      	str	r3, [sp, #4]
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	9300      	str	r3, [sp, #0]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	68ba      	ldr	r2, [r7, #8]
 800e78a:	68f9      	ldr	r1, [r7, #12]
 800e78c:	47a0      	blx	r4
}
 800e78e:	bf00      	nop
 800e790:	3714      	adds	r7, #20
 800e792:	46bd      	mov	sp, r7
 800e794:	bd90      	pop	{r4, r7, pc}
 800e796:	bf00      	nop
 800e798:	24001b88 	.word	0x24001b88
 800e79c:	24001b48 	.word	0x24001b48

0800e7a0 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800e7a0:	b590      	push	{r4, r7, lr}
 800e7a2:	b087      	sub	sp, #28
 800e7a4:	af02      	add	r7, sp, #8
 800e7a6:	60f8      	str	r0, [r7, #12]
 800e7a8:	60b9      	str	r1, [r7, #8]
 800e7aa:	607a      	str	r2, [r7, #4]
 800e7ac:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800e7ae:	4b15      	ldr	r3, [pc, #84]	; (800e804 <UTIL_LCD_DrawHLine+0x64>)
 800e7b0:	69db      	ldr	r3, [r3, #28]
 800e7b2:	2b02      	cmp	r3, #2
 800e7b4:	d118      	bne.n	800e7e8 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 800e7b6:	4b14      	ldr	r3, [pc, #80]	; (800e808 <UTIL_LCD_DrawHLine+0x68>)
 800e7b8:	689c      	ldr	r4, [r3, #8]
 800e7ba:	4b12      	ldr	r3, [pc, #72]	; (800e804 <UTIL_LCD_DrawHLine+0x64>)
 800e7bc:	6918      	ldr	r0, [r3, #16]
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	08db      	lsrs	r3, r3, #3
 800e7c2:	f003 021f 	and.w	r2, r3, #31
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	0a9b      	lsrs	r3, r3, #10
 800e7ca:	015b      	lsls	r3, r3, #5
 800e7cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800e7d0:	431a      	orrs	r2, r3
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	0cdb      	lsrs	r3, r3, #19
 800e7d6:	02db      	lsls	r3, r3, #11
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	4313      	orrs	r3, r2
 800e7dc:	9300      	str	r3, [sp, #0]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	68ba      	ldr	r2, [r7, #8]
 800e7e2:	68f9      	ldr	r1, [r7, #12]
 800e7e4:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 800e7e6:	e009      	b.n	800e7fc <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 800e7e8:	4b07      	ldr	r3, [pc, #28]	; (800e808 <UTIL_LCD_DrawHLine+0x68>)
 800e7ea:	689c      	ldr	r4, [r3, #8]
 800e7ec:	4b05      	ldr	r3, [pc, #20]	; (800e804 <UTIL_LCD_DrawHLine+0x64>)
 800e7ee:	6918      	ldr	r0, [r3, #16]
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	9300      	str	r3, [sp, #0]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	68ba      	ldr	r2, [r7, #8]
 800e7f8:	68f9      	ldr	r1, [r7, #12]
 800e7fa:	47a0      	blx	r4
}
 800e7fc:	bf00      	nop
 800e7fe:	3714      	adds	r7, #20
 800e800:	46bd      	mov	sp, r7
 800e802:	bd90      	pop	{r4, r7, pc}
 800e804:	24001b48 	.word	0x24001b48
 800e808:	24001b88 	.word	0x24001b88

0800e80c <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800e80c:	b590      	push	{r4, r7, lr}
 800e80e:	b087      	sub	sp, #28
 800e810:	af02      	add	r7, sp, #8
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	60b9      	str	r1, [r7, #8]
 800e816:	607a      	str	r2, [r7, #4]
 800e818:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800e81a:	4b15      	ldr	r3, [pc, #84]	; (800e870 <UTIL_LCD_DrawVLine+0x64>)
 800e81c:	69db      	ldr	r3, [r3, #28]
 800e81e:	2b02      	cmp	r3, #2
 800e820:	d118      	bne.n	800e854 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 800e822:	4b14      	ldr	r3, [pc, #80]	; (800e874 <UTIL_LCD_DrawVLine+0x68>)
 800e824:	68dc      	ldr	r4, [r3, #12]
 800e826:	4b12      	ldr	r3, [pc, #72]	; (800e870 <UTIL_LCD_DrawVLine+0x64>)
 800e828:	6918      	ldr	r0, [r3, #16]
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	08db      	lsrs	r3, r3, #3
 800e82e:	f003 021f 	and.w	r2, r3, #31
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	0a9b      	lsrs	r3, r3, #10
 800e836:	015b      	lsls	r3, r3, #5
 800e838:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800e83c:	431a      	orrs	r2, r3
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	0cdb      	lsrs	r3, r3, #19
 800e842:	02db      	lsls	r3, r3, #11
 800e844:	b29b      	uxth	r3, r3
 800e846:	4313      	orrs	r3, r2
 800e848:	9300      	str	r3, [sp, #0]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	68ba      	ldr	r2, [r7, #8]
 800e84e:	68f9      	ldr	r1, [r7, #12]
 800e850:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 800e852:	e009      	b.n	800e868 <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 800e854:	4b07      	ldr	r3, [pc, #28]	; (800e874 <UTIL_LCD_DrawVLine+0x68>)
 800e856:	68dc      	ldr	r4, [r3, #12]
 800e858:	4b05      	ldr	r3, [pc, #20]	; (800e870 <UTIL_LCD_DrawVLine+0x64>)
 800e85a:	6918      	ldr	r0, [r3, #16]
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	9300      	str	r3, [sp, #0]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	68ba      	ldr	r2, [r7, #8]
 800e864:	68f9      	ldr	r1, [r7, #12]
 800e866:	47a0      	blx	r4
}
 800e868:	bf00      	nop
 800e86a:	3714      	adds	r7, #20
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd90      	pop	{r4, r7, pc}
 800e870:	24001b48 	.word	0x24001b48
 800e874:	24001b88 	.word	0x24001b88

0800e878 <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
 800e878:	b5b0      	push	{r4, r5, r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	4603      	mov	r3, r0
 800e880:	603a      	str	r2, [r7, #0]
 800e882:	80fb      	strh	r3, [r7, #6]
 800e884:	460b      	mov	r3, r1
 800e886:	80bb      	strh	r3, [r7, #4]
  /* Set Pixel */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800e888:	4b13      	ldr	r3, [pc, #76]	; (800e8d8 <UTIL_LCD_SetPixel+0x60>)
 800e88a:	69db      	ldr	r3, [r3, #28]
 800e88c:	2b02      	cmp	r3, #2
 800e88e:	d117      	bne.n	800e8c0 <UTIL_LCD_SetPixel+0x48>
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 800e890:	4b12      	ldr	r3, [pc, #72]	; (800e8dc <UTIL_LCD_SetPixel+0x64>)
 800e892:	699c      	ldr	r4, [r3, #24]
 800e894:	4b10      	ldr	r3, [pc, #64]	; (800e8d8 <UTIL_LCD_SetPixel+0x60>)
 800e896:	6918      	ldr	r0, [r3, #16]
 800e898:	88f9      	ldrh	r1, [r7, #6]
 800e89a:	88bd      	ldrh	r5, [r7, #4]
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	08db      	lsrs	r3, r3, #3
 800e8a0:	f003 021f 	and.w	r2, r3, #31
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	0a9b      	lsrs	r3, r3, #10
 800e8a8:	015b      	lsls	r3, r3, #5
 800e8aa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800e8ae:	431a      	orrs	r2, r3
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	0cdb      	lsrs	r3, r3, #19
 800e8b4:	02db      	lsls	r3, r3, #11
 800e8b6:	b29b      	uxth	r3, r3
 800e8b8:	4313      	orrs	r3, r2
 800e8ba:	462a      	mov	r2, r5
 800e8bc:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
  }
}
 800e8be:	e007      	b.n	800e8d0 <UTIL_LCD_SetPixel+0x58>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 800e8c0:	4b06      	ldr	r3, [pc, #24]	; (800e8dc <UTIL_LCD_SetPixel+0x64>)
 800e8c2:	699c      	ldr	r4, [r3, #24]
 800e8c4:	4b04      	ldr	r3, [pc, #16]	; (800e8d8 <UTIL_LCD_SetPixel+0x60>)
 800e8c6:	6918      	ldr	r0, [r3, #16]
 800e8c8:	88f9      	ldrh	r1, [r7, #6]
 800e8ca:	88ba      	ldrh	r2, [r7, #4]
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	47a0      	blx	r4
}
 800e8d0:	bf00      	nop
 800e8d2:	3708      	adds	r7, #8
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bdb0      	pop	{r4, r5, r7, pc}
 800e8d8:	24001b48 	.word	0x24001b48
 800e8dc:	24001b88 	.word	0x24001b88

0800e8e0 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b084      	sub	sp, #16
 800e8e4:	af02      	add	r7, sp, #8
 800e8e6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800e8e8:	4b07      	ldr	r3, [pc, #28]	; (800e908 <UTIL_LCD_Clear+0x28>)
 800e8ea:	695a      	ldr	r2, [r3, #20]
 800e8ec:	4b06      	ldr	r3, [pc, #24]	; (800e908 <UTIL_LCD_Clear+0x28>)
 800e8ee:	6999      	ldr	r1, [r3, #24]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	9300      	str	r3, [sp, #0]
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	2100      	movs	r1, #0
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	f000 fc17 	bl	800f12c <UTIL_LCD_FillRect>
}
 800e8fe:	bf00      	nop
 800e900:	3708      	adds	r7, #8
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	24001b48 	.word	0x24001b48

0800e90c <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	60b9      	str	r1, [r7, #8]
 800e916:	4613      	mov	r3, r2
 800e918:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800e91a:	4b16      	ldr	r3, [pc, #88]	; (800e974 <UTIL_LCD_DisplayChar+0x68>)
 800e91c:	68db      	ldr	r3, [r3, #12]
 800e91e:	4a15      	ldr	r2, [pc, #84]	; (800e974 <UTIL_LCD_DisplayChar+0x68>)
 800e920:	015b      	lsls	r3, r3, #5
 800e922:	4413      	add	r3, r2
 800e924:	3308      	adds	r3, #8
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	79fb      	ldrb	r3, [r7, #7]
 800e92c:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 800e92e:	4911      	ldr	r1, [pc, #68]	; (800e974 <UTIL_LCD_DisplayChar+0x68>)
 800e930:	68c9      	ldr	r1, [r1, #12]
 800e932:	4810      	ldr	r0, [pc, #64]	; (800e974 <UTIL_LCD_DisplayChar+0x68>)
 800e934:	0149      	lsls	r1, r1, #5
 800e936:	4401      	add	r1, r0
 800e938:	3108      	adds	r1, #8
 800e93a:	6809      	ldr	r1, [r1, #0]
 800e93c:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800e93e:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 800e942:	4b0c      	ldr	r3, [pc, #48]	; (800e974 <UTIL_LCD_DisplayChar+0x68>)
 800e944:	68db      	ldr	r3, [r3, #12]
 800e946:	480b      	ldr	r0, [pc, #44]	; (800e974 <UTIL_LCD_DisplayChar+0x68>)
 800e948:	015b      	lsls	r3, r3, #5
 800e94a:	4403      	add	r3, r0
 800e94c:	3308      	adds	r3, #8
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	889b      	ldrh	r3, [r3, #4]
 800e952:	3307      	adds	r3, #7
 800e954:	2b00      	cmp	r3, #0
 800e956:	da00      	bge.n	800e95a <UTIL_LCD_DisplayChar+0x4e>
 800e958:	3307      	adds	r3, #7
 800e95a:	10db      	asrs	r3, r3, #3
 800e95c:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800e960:	4413      	add	r3, r2
 800e962:	461a      	mov	r2, r3
 800e964:	68b9      	ldr	r1, [r7, #8]
 800e966:	68f8      	ldr	r0, [r7, #12]
 800e968:	f000 fe96 	bl	800f698 <DrawChar>
}
 800e96c:	bf00      	nop
 800e96e:	3710      	adds	r7, #16
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}
 800e974:	24001b48 	.word	0x24001b48

0800e978 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b08a      	sub	sp, #40	; 0x28
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	607a      	str	r2, [r7, #4]
 800e984:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 800e986:	2301      	movs	r3, #1
 800e988:	627b      	str	r3, [r7, #36]	; 0x24
 800e98a:	2300      	movs	r3, #0
 800e98c:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 800e98e:	2300      	movs	r3, #0
 800e990:	61fb      	str	r3, [r7, #28]
 800e992:	2300      	movs	r3, #0
 800e994:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800e99a:	e002      	b.n	800e9a2 <UTIL_LCD_DisplayStringAt+0x2a>
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	3301      	adds	r3, #1
 800e9a0:	61fb      	str	r3, [r7, #28]
 800e9a2:	69bb      	ldr	r3, [r7, #24]
 800e9a4:	1c5a      	adds	r2, r3, #1
 800e9a6:	61ba      	str	r2, [r7, #24]
 800e9a8:	781b      	ldrb	r3, [r3, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d1f6      	bne.n	800e99c <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 800e9ae:	4b48      	ldr	r3, [pc, #288]	; (800ead0 <UTIL_LCD_DisplayStringAt+0x158>)
 800e9b0:	695b      	ldr	r3, [r3, #20]
 800e9b2:	4a47      	ldr	r2, [pc, #284]	; (800ead0 <UTIL_LCD_DisplayStringAt+0x158>)
 800e9b4:	68d2      	ldr	r2, [r2, #12]
 800e9b6:	4946      	ldr	r1, [pc, #280]	; (800ead0 <UTIL_LCD_DisplayStringAt+0x158>)
 800e9b8:	0152      	lsls	r2, r2, #5
 800e9ba:	440a      	add	r2, r1
 800e9bc:	3208      	adds	r2, #8
 800e9be:	6812      	ldr	r2, [r2, #0]
 800e9c0:	8892      	ldrh	r2, [r2, #4]
 800e9c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9c6:	617b      	str	r3, [r7, #20]

  switch (Mode)
 800e9c8:	78fb      	ldrb	r3, [r7, #3]
 800e9ca:	2b03      	cmp	r3, #3
 800e9cc:	d018      	beq.n	800ea00 <UTIL_LCD_DisplayStringAt+0x88>
 800e9ce:	2b03      	cmp	r3, #3
 800e9d0:	dc2a      	bgt.n	800ea28 <UTIL_LCD_DisplayStringAt+0xb0>
 800e9d2:	2b01      	cmp	r3, #1
 800e9d4:	d002      	beq.n	800e9dc <UTIL_LCD_DisplayStringAt+0x64>
 800e9d6:	2b02      	cmp	r3, #2
 800e9d8:	d015      	beq.n	800ea06 <UTIL_LCD_DisplayStringAt+0x8e>
 800e9da:	e025      	b.n	800ea28 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 800e9dc:	697a      	ldr	r2, [r7, #20]
 800e9de:	69fb      	ldr	r3, [r7, #28]
 800e9e0:	1ad3      	subs	r3, r2, r3
 800e9e2:	4a3b      	ldr	r2, [pc, #236]	; (800ead0 <UTIL_LCD_DisplayStringAt+0x158>)
 800e9e4:	68d2      	ldr	r2, [r2, #12]
 800e9e6:	493a      	ldr	r1, [pc, #232]	; (800ead0 <UTIL_LCD_DisplayStringAt+0x158>)
 800e9e8:	0152      	lsls	r2, r2, #5
 800e9ea:	440a      	add	r2, r1
 800e9ec:	3208      	adds	r2, #8
 800e9ee:	6812      	ldr	r2, [r2, #0]
 800e9f0:	8892      	ldrh	r2, [r2, #4]
 800e9f2:	fb02 f303 	mul.w	r3, r2, r3
 800e9f6:	085b      	lsrs	r3, r3, #1
 800e9f8:	68fa      	ldr	r2, [r7, #12]
 800e9fa:	4413      	add	r3, r2
 800e9fc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800e9fe:	e016      	b.n	800ea2e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ea04:	e013      	b.n	800ea2e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 800ea06:	697a      	ldr	r2, [r7, #20]
 800ea08:	69fb      	ldr	r3, [r7, #28]
 800ea0a:	1ad3      	subs	r3, r2, r3
 800ea0c:	4a30      	ldr	r2, [pc, #192]	; (800ead0 <UTIL_LCD_DisplayStringAt+0x158>)
 800ea0e:	68d2      	ldr	r2, [r2, #12]
 800ea10:	492f      	ldr	r1, [pc, #188]	; (800ead0 <UTIL_LCD_DisplayStringAt+0x158>)
 800ea12:	0152      	lsls	r2, r2, #5
 800ea14:	440a      	add	r2, r1
 800ea16:	3208      	adds	r2, #8
 800ea18:	6812      	ldr	r2, [r2, #0]
 800ea1a:	8892      	ldrh	r2, [r2, #4]
 800ea1c:	fb03 f202 	mul.w	r2, r3, r2
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	1ad3      	subs	r3, r2, r3
 800ea24:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ea26:	e002      	b.n	800ea2e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ea2c:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800ea2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d003      	beq.n	800ea3c <UTIL_LCD_DisplayStringAt+0xc4>
 800ea34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea3a:	d31b      	bcc.n	800ea74 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 800ea40:	e018      	b.n	800ea74 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	781b      	ldrb	r3, [r3, #0]
 800ea46:	461a      	mov	r2, r3
 800ea48:	68b9      	ldr	r1, [r7, #8]
 800ea4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea4c:	f7ff ff5e 	bl	800e90c <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 800ea50:	4b1f      	ldr	r3, [pc, #124]	; (800ead0 <UTIL_LCD_DisplayStringAt+0x158>)
 800ea52:	68db      	ldr	r3, [r3, #12]
 800ea54:	4a1e      	ldr	r2, [pc, #120]	; (800ead0 <UTIL_LCD_DisplayStringAt+0x158>)
 800ea56:	015b      	lsls	r3, r3, #5
 800ea58:	4413      	add	r3, r2
 800ea5a:	3308      	adds	r3, #8
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	889b      	ldrh	r3, [r3, #4]
 800ea60:	461a      	mov	r2, r3
 800ea62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea64:	4413      	add	r3, r2
 800ea66:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	3301      	adds	r3, #1
 800ea6c:	607b      	str	r3, [r7, #4]
    i++;
 800ea6e:	6a3b      	ldr	r3, [r7, #32]
 800ea70:	3301      	adds	r3, #1
 800ea72:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	bf14      	ite	ne
 800ea7c:	2301      	movne	r3, #1
 800ea7e:	2300      	moveq	r3, #0
 800ea80:	b2da      	uxtb	r2, r3
 800ea82:	4b13      	ldr	r3, [pc, #76]	; (800ead0 <UTIL_LCD_DisplayStringAt+0x158>)
 800ea84:	6959      	ldr	r1, [r3, #20]
 800ea86:	4b12      	ldr	r3, [pc, #72]	; (800ead0 <UTIL_LCD_DisplayStringAt+0x158>)
 800ea88:	68db      	ldr	r3, [r3, #12]
 800ea8a:	4811      	ldr	r0, [pc, #68]	; (800ead0 <UTIL_LCD_DisplayStringAt+0x158>)
 800ea8c:	015b      	lsls	r3, r3, #5
 800ea8e:	4403      	add	r3, r0
 800ea90:	3308      	adds	r3, #8
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	889b      	ldrh	r3, [r3, #4]
 800ea96:	4618      	mov	r0, r3
 800ea98:	6a3b      	ldr	r3, [r7, #32]
 800ea9a:	fb00 f303 	mul.w	r3, r0, r3
 800ea9e:	1acb      	subs	r3, r1, r3
 800eaa0:	b29b      	uxth	r3, r3
 800eaa2:	490b      	ldr	r1, [pc, #44]	; (800ead0 <UTIL_LCD_DisplayStringAt+0x158>)
 800eaa4:	68c9      	ldr	r1, [r1, #12]
 800eaa6:	480a      	ldr	r0, [pc, #40]	; (800ead0 <UTIL_LCD_DisplayStringAt+0x158>)
 800eaa8:	0149      	lsls	r1, r1, #5
 800eaaa:	4401      	add	r1, r0
 800eaac:	3108      	adds	r1, #8
 800eaae:	6809      	ldr	r1, [r1, #0]
 800eab0:	8889      	ldrh	r1, [r1, #4]
 800eab2:	428b      	cmp	r3, r1
 800eab4:	bf2c      	ite	cs
 800eab6:	2301      	movcs	r3, #1
 800eab8:	2300      	movcc	r3, #0
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	4013      	ands	r3, r2
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d1be      	bne.n	800ea42 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 800eac4:	bf00      	nop
 800eac6:	bf00      	nop
 800eac8:	3728      	adds	r7, #40	; 0x28
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}
 800eace:	bf00      	nop
 800ead0:	24001b48 	.word	0x24001b48

0800ead4 <UTIL_LCD_DrawLine>:
  * @param  Xpos2 Point 2 X position
  * @param  Ypos2 Point 2 Y position
  * @param  Color Draw color
  */
void UTIL_LCD_DrawLine(uint32_t Xpos1, uint32_t Ypos1, uint32_t Xpos2, uint32_t Ypos2, uint32_t Color)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b08e      	sub	sp, #56	; 0x38
 800ead8:	af00      	add	r7, sp, #0
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	607a      	str	r2, [r7, #4]
 800eae0:	603b      	str	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 800eae2:	2300      	movs	r3, #0
 800eae4:	843b      	strh	r3, [r7, #32]
 800eae6:	2300      	movs	r3, #0
 800eae8:	83fb      	strh	r3, [r7, #30]
 800eaea:	2300      	movs	r3, #0
 800eaec:	86fb      	strh	r3, [r7, #54]	; 0x36
 800eaee:	2300      	movs	r3, #0
 800eaf0:	86bb      	strh	r3, [r7, #52]	; 0x34
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	867b      	strh	r3, [r7, #50]	; 0x32
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	863b      	strh	r3, [r7, #48]	; 0x30
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 800eafa:	2300      	movs	r3, #0
 800eafc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800eafe:	2300      	movs	r3, #0
 800eb00:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800eb02:	2300      	movs	r3, #0
 800eb04:	857b      	strh	r3, [r7, #42]	; 0x2a
 800eb06:	2300      	movs	r3, #0
 800eb08:	853b      	strh	r3, [r7, #40]	; 0x28
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800eb0e:	2300      	movs	r3, #0
 800eb10:	84bb      	strh	r3, [r7, #36]	; 0x24
  curpixel = 0;
 800eb12:	2300      	movs	r3, #0
 800eb14:	847b      	strh	r3, [r7, #34]	; 0x22
  int32_t x_diff, y_diff;

  x_diff = Xpos2 - Xpos1;
 800eb16:	687a      	ldr	r2, [r7, #4]
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	1ad3      	subs	r3, r2, r3
 800eb1c:	61bb      	str	r3, [r7, #24]
  y_diff = Ypos2 - Ypos1;
 800eb1e:	683a      	ldr	r2, [r7, #0]
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	1ad3      	subs	r3, r2, r3
 800eb24:	617b      	str	r3, [r7, #20]

  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 800eb26:	69bb      	ldr	r3, [r7, #24]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	bfb8      	it	lt
 800eb2c:	425b      	neglt	r3, r3
 800eb2e:	843b      	strh	r3, [r7, #32]
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	bfb8      	it	lt
 800eb36:	425b      	neglt	r3, r3
 800eb38:	83fb      	strh	r3, [r7, #30]
  x = Xpos1;                       /* Start x off at the first pixel */
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	86fb      	strh	r3, [r7, #54]	; 0x36
  y = Ypos1;                       /* Start y off at the first pixel */
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	86bb      	strh	r3, [r7, #52]	; 0x34

  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 800eb42:	687a      	ldr	r2, [r7, #4]
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d304      	bcc.n	800eb54 <UTIL_LCD_DrawLine+0x80>
  {
    xinc1 = 1;
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	867b      	strh	r3, [r7, #50]	; 0x32
    xinc2 = 1;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	863b      	strh	r3, [r7, #48]	; 0x30
 800eb52:	e005      	b.n	800eb60 <UTIL_LCD_DrawLine+0x8c>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 800eb54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb58:	867b      	strh	r3, [r7, #50]	; 0x32
    xinc2 = -1;
 800eb5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb5e:	863b      	strh	r3, [r7, #48]	; 0x30
  }

  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 800eb60:	683a      	ldr	r2, [r7, #0]
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d304      	bcc.n	800eb72 <UTIL_LCD_DrawLine+0x9e>
  {
    yinc1 = 1;
 800eb68:	2301      	movs	r3, #1
 800eb6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    yinc2 = 1;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800eb70:	e005      	b.n	800eb7e <UTIL_LCD_DrawLine+0xaa>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800eb72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb76:	85fb      	strh	r3, [r7, #46]	; 0x2e
    yinc2 = -1;
 800eb78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb7c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  }

  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800eb7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	db11      	blt.n	800ebae <UTIL_LCD_DrawLine+0xda>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	867b      	strh	r3, [r7, #50]	; 0x32
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800eb8e:	2300      	movs	r3, #0
 800eb90:	85bb      	strh	r3, [r7, #44]	; 0x2c
    den = deltax;
 800eb92:	8c3b      	ldrh	r3, [r7, #32]
 800eb94:	857b      	strh	r3, [r7, #42]	; 0x2a
    num = deltax / 2;
 800eb96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	da00      	bge.n	800eba0 <UTIL_LCD_DrawLine+0xcc>
 800eb9e:	3301      	adds	r3, #1
 800eba0:	105b      	asrs	r3, r3, #1
 800eba2:	853b      	strh	r3, [r7, #40]	; 0x28
    numadd = deltay;
 800eba4:	8bfb      	ldrh	r3, [r7, #30]
 800eba6:	84fb      	strh	r3, [r7, #38]	; 0x26
    numpixels = deltax;         /* There are more x-values than y-values */
 800eba8:	8c3b      	ldrh	r3, [r7, #32]
 800ebaa:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ebac:	e010      	b.n	800ebd0 <UTIL_LCD_DrawLine+0xfc>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800ebae:	2300      	movs	r3, #0
 800ebb0:	863b      	strh	r3, [r7, #48]	; 0x30
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    den = deltay;
 800ebb6:	8bfb      	ldrh	r3, [r7, #30]
 800ebb8:	857b      	strh	r3, [r7, #42]	; 0x2a
    num = deltay / 2;
 800ebba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	da00      	bge.n	800ebc4 <UTIL_LCD_DrawLine+0xf0>
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	105b      	asrs	r3, r3, #1
 800ebc6:	853b      	strh	r3, [r7, #40]	; 0x28
    numadd = deltax;
 800ebc8:	8c3b      	ldrh	r3, [r7, #32]
 800ebca:	84fb      	strh	r3, [r7, #38]	; 0x26
    numpixels = deltay;         /* There are more y-values than x-values */
 800ebcc:	8bfb      	ldrh	r3, [r7, #30]
 800ebce:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	847b      	strh	r3, [r7, #34]	; 0x22
 800ebd4:	e02f      	b.n	800ec36 <UTIL_LCD_DrawLine+0x162>
  {
    UTIL_LCD_SetPixel(x, y, Color);   /* Draw the current pixel */
 800ebd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ebd8:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800ebda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7ff fe4b 	bl	800e878 <UTIL_LCD_SetPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 800ebe2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ebe4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ebe6:	4413      	add	r3, r2
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	853b      	strh	r3, [r7, #40]	; 0x28
    if (num >= den)                           /* Check if numerator >= denominator */
 800ebec:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800ebf0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	db0e      	blt.n	800ec16 <UTIL_LCD_DrawLine+0x142>
    {
      num -= den;                             /* Calculate the new numerator value */
 800ebf8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ebfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ebfc:	1ad3      	subs	r3, r2, r3
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	853b      	strh	r3, [r7, #40]	; 0x28
      x += xinc1;                             /* Change the x as appropriate */
 800ec02:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ec04:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ec06:	4413      	add	r3, r2
 800ec08:	b29b      	uxth	r3, r3
 800ec0a:	86fb      	strh	r3, [r7, #54]	; 0x36
      y += yinc1;                             /* Change the y as appropriate */
 800ec0c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800ec0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ec10:	4413      	add	r3, r2
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    x += xinc2;                               /* Change the x as appropriate */
 800ec16:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ec18:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ec1a:	4413      	add	r3, r2
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	86fb      	strh	r3, [r7, #54]	; 0x36
    y += yinc2;                               /* Change the y as appropriate */
 800ec20:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800ec22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ec24:	4413      	add	r3, r2
 800ec26:	b29b      	uxth	r3, r3
 800ec28:	86bb      	strh	r3, [r7, #52]	; 0x34
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800ec2a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ec2e:	b29b      	uxth	r3, r3
 800ec30:	3301      	adds	r3, #1
 800ec32:	b29b      	uxth	r3, r3
 800ec34:	847b      	strh	r3, [r7, #34]	; 0x22
 800ec36:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800ec3a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	ddc9      	ble.n	800ebd6 <UTIL_LCD_DrawLine+0x102>
  }
}
 800ec42:	bf00      	nop
 800ec44:	bf00      	nop
 800ec46:	3738      	adds	r7, #56	; 0x38
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}

0800ec4c <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	60f8      	str	r0, [r7, #12]
 800ec54:	60b9      	str	r1, [r7, #8]
 800ec56:	607a      	str	r2, [r7, #4]
 800ec58:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 800ec5a:	69bb      	ldr	r3, [r7, #24]
 800ec5c:	687a      	ldr	r2, [r7, #4]
 800ec5e:	68b9      	ldr	r1, [r7, #8]
 800ec60:	68f8      	ldr	r0, [r7, #12]
 800ec62:	f7ff fd9d 	bl	800e7a0 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 800ec66:	68ba      	ldr	r2, [r7, #8]
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	1e59      	subs	r1, r3, #1
 800ec6e:	69bb      	ldr	r3, [r7, #24]
 800ec70:	687a      	ldr	r2, [r7, #4]
 800ec72:	68f8      	ldr	r0, [r7, #12]
 800ec74:	f7ff fd94 	bl	800e7a0 <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 800ec78:	69bb      	ldr	r3, [r7, #24]
 800ec7a:	683a      	ldr	r2, [r7, #0]
 800ec7c:	68b9      	ldr	r1, [r7, #8]
 800ec7e:	68f8      	ldr	r0, [r7, #12]
 800ec80:	f7ff fdc4 	bl	800e80c <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 800ec84:	68fa      	ldr	r2, [r7, #12]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	4413      	add	r3, r2
 800ec8a:	1e58      	subs	r0, r3, #1
 800ec8c:	69bb      	ldr	r3, [r7, #24]
 800ec8e:	683a      	ldr	r2, [r7, #0]
 800ec90:	68b9      	ldr	r1, [r7, #8]
 800ec92:	f7ff fdbb 	bl	800e80c <UTIL_LCD_DrawVLine>
}
 800ec96:	bf00      	nop
 800ec98:	3710      	adds	r7, #16
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}
	...

0800eca0 <UTIL_LCD_DrawCircle>:
  * @param  Ypos    Y position
  * @param  Radius  Circle radius
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b088      	sub	sp, #32
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	60f8      	str	r0, [r7, #12]
 800eca8:	60b9      	str	r1, [r7, #8]
 800ecaa:	607a      	str	r2, [r7, #4]
 800ecac:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	005b      	lsls	r3, r3, #1
 800ecb2:	f1c3 0303 	rsb	r3, r3, #3
 800ecb6:	61fb      	str	r3, [r7, #28]
  current_x = 0;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 800ecc0:	e0eb      	b.n	800ee9a <UTIL_LCD_DrawCircle+0x1fa>
  {
    if((Ypos - current_y) < DrawProp->LcdYsize)
 800ecc2:	68ba      	ldr	r2, [r7, #8]
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	1ad2      	subs	r2, r2, r3
 800ecc8:	4b79      	ldr	r3, [pc, #484]	; (800eeb0 <UTIL_LCD_DrawCircle+0x210>)
 800ecca:	699b      	ldr	r3, [r3, #24]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d22d      	bcs.n	800ed2c <UTIL_LCD_DrawCircle+0x8c>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 800ecd0:	68fa      	ldr	r2, [r7, #12]
 800ecd2:	69bb      	ldr	r3, [r7, #24]
 800ecd4:	441a      	add	r2, r3
 800ecd6:	4b76      	ldr	r3, [pc, #472]	; (800eeb0 <UTIL_LCD_DrawCircle+0x210>)
 800ecd8:	695b      	ldr	r3, [r3, #20]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d20f      	bcs.n	800ecfe <UTIL_LCD_DrawCircle+0x5e>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos - current_y), Color);
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	b29a      	uxth	r2, r3
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	4413      	add	r3, r2
 800ece8:	b298      	uxth	r0, r3
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	b29a      	uxth	r2, r3
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	b29b      	uxth	r3, r3
 800ecf2:	1ad3      	subs	r3, r2, r3
 800ecf4:	b29b      	uxth	r3, r3
 800ecf6:	683a      	ldr	r2, [r7, #0]
 800ecf8:	4619      	mov	r1, r3
 800ecfa:	f7ff fdbd 	bl	800e878 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 800ecfe:	68fa      	ldr	r2, [r7, #12]
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	1ad2      	subs	r2, r2, r3
 800ed04:	4b6a      	ldr	r3, [pc, #424]	; (800eeb0 <UTIL_LCD_DrawCircle+0x210>)
 800ed06:	695b      	ldr	r3, [r3, #20]
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d20f      	bcs.n	800ed2c <UTIL_LCD_DrawCircle+0x8c>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos - current_y), Color);
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	b29a      	uxth	r2, r3
 800ed10:	69bb      	ldr	r3, [r7, #24]
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	1ad3      	subs	r3, r2, r3
 800ed16:	b298      	uxth	r0, r3
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	b29a      	uxth	r2, r3
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	1ad3      	subs	r3, r2, r3
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	683a      	ldr	r2, [r7, #0]
 800ed26:	4619      	mov	r1, r3
 800ed28:	f7ff fda6 	bl	800e878 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos - current_x) < DrawProp->LcdYsize)
 800ed2c:	68ba      	ldr	r2, [r7, #8]
 800ed2e:	69bb      	ldr	r3, [r7, #24]
 800ed30:	1ad2      	subs	r2, r2, r3
 800ed32:	4b5f      	ldr	r3, [pc, #380]	; (800eeb0 <UTIL_LCD_DrawCircle+0x210>)
 800ed34:	699b      	ldr	r3, [r3, #24]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d22d      	bcs.n	800ed96 <UTIL_LCD_DrawCircle+0xf6>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 800ed3a:	68fa      	ldr	r2, [r7, #12]
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	441a      	add	r2, r3
 800ed40:	4b5b      	ldr	r3, [pc, #364]	; (800eeb0 <UTIL_LCD_DrawCircle+0x210>)
 800ed42:	695b      	ldr	r3, [r3, #20]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d20f      	bcs.n	800ed68 <UTIL_LCD_DrawCircle+0xc8>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos - current_x), Color);
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	b29a      	uxth	r2, r3
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	4413      	add	r3, r2
 800ed52:	b298      	uxth	r0, r3
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	b29a      	uxth	r2, r3
 800ed58:	69bb      	ldr	r3, [r7, #24]
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	1ad3      	subs	r3, r2, r3
 800ed5e:	b29b      	uxth	r3, r3
 800ed60:	683a      	ldr	r2, [r7, #0]
 800ed62:	4619      	mov	r1, r3
 800ed64:	f7ff fd88 	bl	800e878 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 800ed68:	68fa      	ldr	r2, [r7, #12]
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	1ad2      	subs	r2, r2, r3
 800ed6e:	4b50      	ldr	r3, [pc, #320]	; (800eeb0 <UTIL_LCD_DrawCircle+0x210>)
 800ed70:	695b      	ldr	r3, [r3, #20]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d20f      	bcs.n	800ed96 <UTIL_LCD_DrawCircle+0xf6>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos - current_x), Color);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	b29a      	uxth	r2, r3
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	1ad3      	subs	r3, r2, r3
 800ed80:	b298      	uxth	r0, r3
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	b29a      	uxth	r2, r3
 800ed86:	69bb      	ldr	r3, [r7, #24]
 800ed88:	b29b      	uxth	r3, r3
 800ed8a:	1ad3      	subs	r3, r2, r3
 800ed8c:	b29b      	uxth	r3, r3
 800ed8e:	683a      	ldr	r2, [r7, #0]
 800ed90:	4619      	mov	r1, r3
 800ed92:	f7ff fd71 	bl	800e878 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_y) < DrawProp->LcdYsize)
 800ed96:	68ba      	ldr	r2, [r7, #8]
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	441a      	add	r2, r3
 800ed9c:	4b44      	ldr	r3, [pc, #272]	; (800eeb0 <UTIL_LCD_DrawCircle+0x210>)
 800ed9e:	699b      	ldr	r3, [r3, #24]
 800eda0:	429a      	cmp	r2, r3
 800eda2:	d22d      	bcs.n	800ee00 <UTIL_LCD_DrawCircle+0x160>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 800eda4:	68fa      	ldr	r2, [r7, #12]
 800eda6:	69bb      	ldr	r3, [r7, #24]
 800eda8:	441a      	add	r2, r3
 800edaa:	4b41      	ldr	r3, [pc, #260]	; (800eeb0 <UTIL_LCD_DrawCircle+0x210>)
 800edac:	695b      	ldr	r3, [r3, #20]
 800edae:	429a      	cmp	r2, r3
 800edb0:	d20f      	bcs.n	800edd2 <UTIL_LCD_DrawCircle+0x132>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos + current_y), Color);
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	b29a      	uxth	r2, r3
 800edb6:	69bb      	ldr	r3, [r7, #24]
 800edb8:	b29b      	uxth	r3, r3
 800edba:	4413      	add	r3, r2
 800edbc:	b298      	uxth	r0, r3
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	b29a      	uxth	r2, r3
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	b29b      	uxth	r3, r3
 800edc6:	4413      	add	r3, r2
 800edc8:	b29b      	uxth	r3, r3
 800edca:	683a      	ldr	r2, [r7, #0]
 800edcc:	4619      	mov	r1, r3
 800edce:	f7ff fd53 	bl	800e878 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 800edd2:	68fa      	ldr	r2, [r7, #12]
 800edd4:	69bb      	ldr	r3, [r7, #24]
 800edd6:	1ad2      	subs	r2, r2, r3
 800edd8:	4b35      	ldr	r3, [pc, #212]	; (800eeb0 <UTIL_LCD_DrawCircle+0x210>)
 800edda:	695b      	ldr	r3, [r3, #20]
 800eddc:	429a      	cmp	r2, r3
 800edde:	d20f      	bcs.n	800ee00 <UTIL_LCD_DrawCircle+0x160>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos + current_y), Color);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	b29a      	uxth	r2, r3
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	b29b      	uxth	r3, r3
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	b298      	uxth	r0, r3
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	b29a      	uxth	r2, r3
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	4413      	add	r3, r2
 800edf6:	b29b      	uxth	r3, r3
 800edf8:	683a      	ldr	r2, [r7, #0]
 800edfa:	4619      	mov	r1, r3
 800edfc:	f7ff fd3c 	bl	800e878 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_x) < DrawProp->LcdYsize)
 800ee00:	68ba      	ldr	r2, [r7, #8]
 800ee02:	69bb      	ldr	r3, [r7, #24]
 800ee04:	441a      	add	r2, r3
 800ee06:	4b2a      	ldr	r3, [pc, #168]	; (800eeb0 <UTIL_LCD_DrawCircle+0x210>)
 800ee08:	699b      	ldr	r3, [r3, #24]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d22d      	bcs.n	800ee6a <UTIL_LCD_DrawCircle+0x1ca>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 800ee0e:	68fa      	ldr	r2, [r7, #12]
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	441a      	add	r2, r3
 800ee14:	4b26      	ldr	r3, [pc, #152]	; (800eeb0 <UTIL_LCD_DrawCircle+0x210>)
 800ee16:	695b      	ldr	r3, [r3, #20]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d20f      	bcs.n	800ee3c <UTIL_LCD_DrawCircle+0x19c>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos + current_x), Color);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	b29a      	uxth	r2, r3
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	b29b      	uxth	r3, r3
 800ee24:	4413      	add	r3, r2
 800ee26:	b298      	uxth	r0, r3
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	69bb      	ldr	r3, [r7, #24]
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	4413      	add	r3, r2
 800ee32:	b29b      	uxth	r3, r3
 800ee34:	683a      	ldr	r2, [r7, #0]
 800ee36:	4619      	mov	r1, r3
 800ee38:	f7ff fd1e 	bl	800e878 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 800ee3c:	68fa      	ldr	r2, [r7, #12]
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	1ad2      	subs	r2, r2, r3
 800ee42:	4b1b      	ldr	r3, [pc, #108]	; (800eeb0 <UTIL_LCD_DrawCircle+0x210>)
 800ee44:	695b      	ldr	r3, [r3, #20]
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d20f      	bcs.n	800ee6a <UTIL_LCD_DrawCircle+0x1ca>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos + current_x), Color);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	b29a      	uxth	r2, r3
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	1ad3      	subs	r3, r2, r3
 800ee54:	b298      	uxth	r0, r3
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	b29a      	uxth	r2, r3
 800ee5a:	69bb      	ldr	r3, [r7, #24]
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	4413      	add	r3, r2
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	683a      	ldr	r2, [r7, #0]
 800ee64:	4619      	mov	r1, r3
 800ee66:	f7ff fd07 	bl	800e878 <UTIL_LCD_SetPixel>
      }
    }

    if (decision < 0)
 800ee6a:	69fb      	ldr	r3, [r7, #28]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	da06      	bge.n	800ee7e <UTIL_LCD_DrawCircle+0x1de>
    {
      decision += (current_x << 2) + 6;
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	009a      	lsls	r2, r3, #2
 800ee74:	69fb      	ldr	r3, [r7, #28]
 800ee76:	4413      	add	r3, r2
 800ee78:	3306      	adds	r3, #6
 800ee7a:	61fb      	str	r3, [r7, #28]
 800ee7c:	e00a      	b.n	800ee94 <UTIL_LCD_DrawCircle+0x1f4>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800ee7e:	69ba      	ldr	r2, [r7, #24]
 800ee80:	697b      	ldr	r3, [r7, #20]
 800ee82:	1ad3      	subs	r3, r2, r3
 800ee84:	009a      	lsls	r2, r3, #2
 800ee86:	69fb      	ldr	r3, [r7, #28]
 800ee88:	4413      	add	r3, r2
 800ee8a:	330a      	adds	r3, #10
 800ee8c:	61fb      	str	r3, [r7, #28]
      current_y--;
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	3b01      	subs	r3, #1
 800ee92:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 800ee94:	69bb      	ldr	r3, [r7, #24]
 800ee96:	3301      	adds	r3, #1
 800ee98:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 800ee9a:	69ba      	ldr	r2, [r7, #24]
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	f67f af0f 	bls.w	800ecc2 <UTIL_LCD_DrawCircle+0x22>
  }
}
 800eea4:	bf00      	nop
 800eea6:	bf00      	nop
 800eea8:	3720      	adds	r7, #32
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	24001b48 	.word	0x24001b48

0800eeb4 <UTIL_LCD_DrawPolygon>:
  * @param  Points      Pointer to the points array
  * @param  PointCount  Number of points
  * @param  Color       Draw color
  */
void UTIL_LCD_DrawPolygon(pPoint Points, uint32_t PointCount, uint32_t Color)
{
 800eeb4:	b590      	push	{r4, r7, lr}
 800eeb6:	b089      	sub	sp, #36	; 0x24
 800eeb8:	af02      	add	r7, sp, #8
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	60b9      	str	r1, [r7, #8]
 800eebe:	607a      	str	r2, [r7, #4]
  int16_t x_pos = 0, y_pos = 0;
 800eec0:	2300      	movs	r3, #0
 800eec2:	82fb      	strh	r3, [r7, #22]
 800eec4:	2300      	movs	r3, #0
 800eec6:	82bb      	strh	r3, [r7, #20]

  if(PointCount < 2)
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	2b01      	cmp	r3, #1
 800eecc:	d943      	bls.n	800ef56 <UTIL_LCD_DrawPolygon+0xa2>
  {
    return;
  }

  UTIL_LCD_DrawLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y, Color);
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eed4:	4618      	mov	r0, r3
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800eedc:	4619      	mov	r1, r3
 800eede:	68ba      	ldr	r2, [r7, #8]
 800eee0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800eee4:	4413      	add	r3, r2
 800eee6:	009b      	lsls	r3, r3, #2
 800eee8:	68fa      	ldr	r2, [r7, #12]
 800eeea:	4413      	add	r3, r2
 800eeec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eef0:	461c      	mov	r4, r3
 800eef2:	68ba      	ldr	r2, [r7, #8]
 800eef4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800eef8:	4413      	add	r3, r2
 800eefa:	009b      	lsls	r3, r3, #2
 800eefc:	68fa      	ldr	r2, [r7, #12]
 800eefe:	4413      	add	r3, r2
 800ef00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ef04:	461a      	mov	r2, r3
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	9300      	str	r3, [sp, #0]
 800ef0a:	4613      	mov	r3, r2
 800ef0c:	4622      	mov	r2, r4
 800ef0e:	f7ff fde1 	bl	800ead4 <UTIL_LCD_DrawLine>

  while(--PointCount)
 800ef12:	e019      	b.n	800ef48 <UTIL_LCD_DrawPolygon+0x94>
  {
    x_pos = Points->X;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	881b      	ldrh	r3, [r3, #0]
 800ef18:	82fb      	strh	r3, [r7, #22]
    y_pos = Points->Y;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	885b      	ldrh	r3, [r3, #2]
 800ef1e:	82bb      	strh	r3, [r7, #20]
    Points++;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	3304      	adds	r3, #4
 800ef24:	60fb      	str	r3, [r7, #12]
    UTIL_LCD_DrawLine(x_pos, y_pos, Points->X, Points->Y, Color);
 800ef26:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 800ef2a:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef34:	461a      	mov	r2, r3
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ef3c:	461c      	mov	r4, r3
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	9300      	str	r3, [sp, #0]
 800ef42:	4623      	mov	r3, r4
 800ef44:	f7ff fdc6 	bl	800ead4 <UTIL_LCD_DrawLine>
  while(--PointCount)
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	3b01      	subs	r3, #1
 800ef4c:	60bb      	str	r3, [r7, #8]
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d1df      	bne.n	800ef14 <UTIL_LCD_DrawPolygon+0x60>
 800ef54:	e000      	b.n	800ef58 <UTIL_LCD_DrawPolygon+0xa4>
    return;
 800ef56:	bf00      	nop
  }
}
 800ef58:	371c      	adds	r7, #28
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd90      	pop	{r4, r7, pc}

0800ef5e <UTIL_LCD_DrawEllipse>:
  * @param  XRadius Ellipse X radius
  * @param  YRadius Ellipse Y radius
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawEllipse(int Xpos, int Ypos, int XRadius, int YRadius, uint32_t Color)
{
 800ef5e:	b580      	push	{r7, lr}
 800ef60:	b08c      	sub	sp, #48	; 0x30
 800ef62:	af00      	add	r7, sp, #0
 800ef64:	60f8      	str	r0, [r7, #12]
 800ef66:	60b9      	str	r1, [r7, #8]
 800ef68:	607a      	str	r2, [r7, #4]
 800ef6a:	603b      	str	r3, [r7, #0]
  int x_pos = 0, y_pos = -YRadius, err = 2-2*XRadius, e2;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	425b      	negs	r3, r3
 800ef74:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f1c3 0301 	rsb	r3, r3, #1
 800ef7c:	005b      	lsls	r3, r3, #1
 800ef7e:	627b      	str	r3, [r7, #36]	; 0x24
  float k = 0, rad1 = 0, rad2 = 0;
 800ef80:	f04f 0300 	mov.w	r3, #0
 800ef84:	61fb      	str	r3, [r7, #28]
 800ef86:	f04f 0300 	mov.w	r3, #0
 800ef8a:	61bb      	str	r3, [r7, #24]
 800ef8c:	f04f 0300 	mov.w	r3, #0
 800ef90:	617b      	str	r3, [r7, #20]

  rad1 = XRadius;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	ee07 3a90 	vmov	s15, r3
 800ef98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef9c:	edc7 7a06 	vstr	s15, [r7, #24]
  rad2 = YRadius;
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	ee07 3a90 	vmov	s15, r3
 800efa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efaa:	edc7 7a05 	vstr	s15, [r7, #20]

  k = (float)(rad2/rad1);
 800efae:	edd7 6a05 	vldr	s13, [r7, #20]
 800efb2:	ed97 7a06 	vldr	s14, [r7, #24]
 800efb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800efba:	edc7 7a07 	vstr	s15, [r7, #28]

  do
  {
    UTIL_LCD_SetPixel((Xpos-(uint32_t)(x_pos/k)), (Ypos + y_pos), Color);
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	b29a      	uxth	r2, r3
 800efc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc4:	ee07 3a90 	vmov	s15, r3
 800efc8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800efcc:	ed97 7a07 	vldr	s14, [r7, #28]
 800efd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800efd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800efd8:	ee17 3a90 	vmov	r3, s15
 800efdc:	b29b      	uxth	r3, r3
 800efde:	1ad3      	subs	r3, r2, r3
 800efe0:	b298      	uxth	r0, r3
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	b29a      	uxth	r2, r3
 800efe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe8:	b29b      	uxth	r3, r3
 800efea:	4413      	add	r3, r2
 800efec:	b29b      	uxth	r3, r3
 800efee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eff0:	4619      	mov	r1, r3
 800eff2:	f7ff fc41 	bl	800e878 <UTIL_LCD_SetPixel>
    UTIL_LCD_SetPixel((Xpos+(uint32_t)(x_pos/k)), (Ypos + y_pos), Color);
 800eff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff8:	ee07 3a90 	vmov	s15, r3
 800effc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f000:	ed97 7a07 	vldr	s14, [r7, #28]
 800f004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f00c:	ee17 3a90 	vmov	r3, s15
 800f010:	b29a      	uxth	r2, r3
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	b29b      	uxth	r3, r3
 800f016:	4413      	add	r3, r2
 800f018:	b298      	uxth	r0, r3
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f020:	b29b      	uxth	r3, r3
 800f022:	4413      	add	r3, r2
 800f024:	b29b      	uxth	r3, r3
 800f026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f028:	4619      	mov	r1, r3
 800f02a:	f7ff fc25 	bl	800e878 <UTIL_LCD_SetPixel>
    UTIL_LCD_SetPixel((Xpos+(uint32_t)(x_pos/k)), (Ypos - y_pos), Color);
 800f02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f030:	ee07 3a90 	vmov	s15, r3
 800f034:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f038:	ed97 7a07 	vldr	s14, [r7, #28]
 800f03c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f044:	ee17 3a90 	vmov	r3, s15
 800f048:	b29a      	uxth	r2, r3
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	4413      	add	r3, r2
 800f050:	b298      	uxth	r0, r3
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	b29a      	uxth	r2, r3
 800f056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f058:	b29b      	uxth	r3, r3
 800f05a:	1ad3      	subs	r3, r2, r3
 800f05c:	b29b      	uxth	r3, r3
 800f05e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f060:	4619      	mov	r1, r3
 800f062:	f7ff fc09 	bl	800e878 <UTIL_LCD_SetPixel>
    UTIL_LCD_SetPixel((Xpos-(uint32_t)(x_pos/k)), (Ypos - y_pos), Color);
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	b29a      	uxth	r2, r3
 800f06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06c:	ee07 3a90 	vmov	s15, r3
 800f070:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f074:	ed97 7a07 	vldr	s14, [r7, #28]
 800f078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f07c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f080:	ee17 3a90 	vmov	r3, s15
 800f084:	b29b      	uxth	r3, r3
 800f086:	1ad3      	subs	r3, r2, r3
 800f088:	b298      	uxth	r0, r3
 800f08a:	68bb      	ldr	r3, [r7, #8]
 800f08c:	b29a      	uxth	r2, r3
 800f08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f090:	b29b      	uxth	r3, r3
 800f092:	1ad3      	subs	r3, r2, r3
 800f094:	b29b      	uxth	r3, r3
 800f096:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f098:	4619      	mov	r1, r3
 800f09a:	f7ff fbed 	bl	800e878 <UTIL_LCD_SetPixel>

    e2 = err;
 800f09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a0:	623b      	str	r3, [r7, #32]
    if (e2 <= x_pos)
 800f0a2:	6a3a      	ldr	r2, [r7, #32]
 800f0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	dc13      	bgt.n	800f0d2 <UTIL_LCD_DrawEllipse+0x174>
    {
      err += ++x_pos*2+1;
 800f0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b2:	005b      	lsls	r3, r3, #1
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0b8:	4413      	add	r3, r2
 800f0ba:	627b      	str	r3, [r7, #36]	; 0x24
      if (-y_pos == x_pos && e2 <= y_pos) e2 = 0;
 800f0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0be:	425b      	negs	r3, r3
 800f0c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d105      	bne.n	800f0d2 <UTIL_LCD_DrawEllipse+0x174>
 800f0c6:	6a3a      	ldr	r2, [r7, #32]
 800f0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	dc01      	bgt.n	800f0d2 <UTIL_LCD_DrawEllipse+0x174>
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	623b      	str	r3, [r7, #32]
    }
    if (e2 > y_pos)
 800f0d2:	6a3a      	ldr	r2, [r7, #32]
 800f0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	dd08      	ble.n	800f0ec <UTIL_LCD_DrawEllipse+0x18e>
    {
      err += ++y_pos*2+1;
 800f0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0dc:	3301      	adds	r3, #1
 800f0de:	62bb      	str	r3, [r7, #40]	; 0x28
 800f0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e2:	005b      	lsls	r3, r3, #1
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0e8:	4413      	add	r3, r2
 800f0ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }while (y_pos <= 0);
 800f0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	f77f af65 	ble.w	800efbe <UTIL_LCD_DrawEllipse+0x60>
}
 800f0f4:	bf00      	nop
 800f0f6:	bf00      	nop
 800f0f8:	3730      	adds	r7, #48	; 0x30
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
	...

0800f100 <UTIL_LCD_DrawBitmap>:
  * @param  Xpos  Bmp X position in the LCD
  * @param  Ypos  Bmp Y position in the LCD
  * @param  pData Pointer to Bmp picture address in the internal Flash
  */
void UTIL_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pData)
{
 800f100:	b590      	push	{r4, r7, lr}
 800f102:	b085      	sub	sp, #20
 800f104:	af00      	add	r7, sp, #0
 800f106:	60f8      	str	r0, [r7, #12]
 800f108:	60b9      	str	r1, [r7, #8]
 800f10a:	607a      	str	r2, [r7, #4]
  FuncDriver.DrawBitmap(DrawProp->LcdDevice, Xpos, Ypos, pData);
 800f10c:	4b05      	ldr	r3, [pc, #20]	; (800f124 <UTIL_LCD_DrawBitmap+0x24>)
 800f10e:	681c      	ldr	r4, [r3, #0]
 800f110:	4b05      	ldr	r3, [pc, #20]	; (800f128 <UTIL_LCD_DrawBitmap+0x28>)
 800f112:	6918      	ldr	r0, [r3, #16]
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	68ba      	ldr	r2, [r7, #8]
 800f118:	68f9      	ldr	r1, [r7, #12]
 800f11a:	47a0      	blx	r4
}
 800f11c:	bf00      	nop
 800f11e:	3714      	adds	r7, #20
 800f120:	46bd      	mov	sp, r7
 800f122:	bd90      	pop	{r4, r7, pc}
 800f124:	24001b88 	.word	0x24001b88
 800f128:	24001b48 	.word	0x24001b48

0800f12c <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800f12c:	b590      	push	{r4, r7, lr}
 800f12e:	b087      	sub	sp, #28
 800f130:	af02      	add	r7, sp, #8
 800f132:	60f8      	str	r0, [r7, #12]
 800f134:	60b9      	str	r1, [r7, #8]
 800f136:	607a      	str	r2, [r7, #4]
 800f138:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800f13a:	4b17      	ldr	r3, [pc, #92]	; (800f198 <UTIL_LCD_FillRect+0x6c>)
 800f13c:	69db      	ldr	r3, [r3, #28]
 800f13e:	2b02      	cmp	r3, #2
 800f140:	d11a      	bne.n	800f178 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800f142:	4b16      	ldr	r3, [pc, #88]	; (800f19c <UTIL_LCD_FillRect+0x70>)
 800f144:	691c      	ldr	r4, [r3, #16]
 800f146:	4b14      	ldr	r3, [pc, #80]	; (800f198 <UTIL_LCD_FillRect+0x6c>)
 800f148:	6918      	ldr	r0, [r3, #16]
 800f14a:	6a3b      	ldr	r3, [r7, #32]
 800f14c:	08db      	lsrs	r3, r3, #3
 800f14e:	f003 021f 	and.w	r2, r3, #31
 800f152:	6a3b      	ldr	r3, [r7, #32]
 800f154:	0a9b      	lsrs	r3, r3, #10
 800f156:	015b      	lsls	r3, r3, #5
 800f158:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800f15c:	431a      	orrs	r2, r3
 800f15e:	6a3b      	ldr	r3, [r7, #32]
 800f160:	0cdb      	lsrs	r3, r3, #19
 800f162:	02db      	lsls	r3, r3, #11
 800f164:	b29b      	uxth	r3, r3
 800f166:	4313      	orrs	r3, r2
 800f168:	9301      	str	r3, [sp, #4]
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	9300      	str	r3, [sp, #0]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	68ba      	ldr	r2, [r7, #8]
 800f172:	68f9      	ldr	r1, [r7, #12]
 800f174:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 800f176:	e00b      	b.n	800f190 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 800f178:	4b08      	ldr	r3, [pc, #32]	; (800f19c <UTIL_LCD_FillRect+0x70>)
 800f17a:	691c      	ldr	r4, [r3, #16]
 800f17c:	4b06      	ldr	r3, [pc, #24]	; (800f198 <UTIL_LCD_FillRect+0x6c>)
 800f17e:	6918      	ldr	r0, [r3, #16]
 800f180:	6a3b      	ldr	r3, [r7, #32]
 800f182:	9301      	str	r3, [sp, #4]
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	9300      	str	r3, [sp, #0]
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	68ba      	ldr	r2, [r7, #8]
 800f18c:	68f9      	ldr	r1, [r7, #12]
 800f18e:	47a0      	blx	r4
}
 800f190:	bf00      	nop
 800f192:	3714      	adds	r7, #20
 800f194:	46bd      	mov	sp, r7
 800f196:	bd90      	pop	{r4, r7, pc}
 800f198:	24001b48 	.word	0x24001b48
 800f19c:	24001b88 	.word	0x24001b88

0800f1a0 <UTIL_LCD_FillCircle>:
  * @param  Ypos   Y position
  * @param  Radius Circle radius
  * @param  Color  Draw color
  */
void UTIL_LCD_FillCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b088      	sub	sp, #32
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	607a      	str	r2, [r7, #4]
 800f1ac:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	005b      	lsls	r3, r3, #1
 800f1b2:	f1c3 0303 	rsb	r3, r3, #3
 800f1b6:	61fb      	str	r3, [r7, #28]

  current_x = 0;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 800f1c0:	e08b      	b.n	800f2da <UTIL_LCD_FillCircle+0x13a>
  {
    if(current_y > 0)
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d036      	beq.n	800f236 <UTIL_LCD_FillCircle+0x96>
    {
      if(current_y >= Xpos)
 800f1c8:	697a      	ldr	r2, [r7, #20]
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d31c      	bcc.n	800f20a <UTIL_LCD_FillCircle+0x6a>
      {
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
 800f1d0:	68ba      	ldr	r2, [r7, #8]
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	18d0      	adds	r0, r2, r3
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	005a      	lsls	r2, r3, #1
 800f1da:	68f9      	ldr	r1, [r7, #12]
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	1acb      	subs	r3, r1, r3
 800f1e0:	441a      	add	r2, r3
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	4601      	mov	r1, r0
 800f1e6:	2000      	movs	r0, #0
 800f1e8:	f7ff fada 	bl	800e7a0 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
 800f1ec:	68ba      	ldr	r2, [r7, #8]
 800f1ee:	69bb      	ldr	r3, [r7, #24]
 800f1f0:	1ad0      	subs	r0, r2, r3
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	005a      	lsls	r2, r3, #1
 800f1f6:	68f9      	ldr	r1, [r7, #12]
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	1acb      	subs	r3, r1, r3
 800f1fc:	441a      	add	r2, r3
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	4601      	mov	r1, r0
 800f202:	2000      	movs	r0, #0
 800f204:	f7ff facc 	bl	800e7a0 <UTIL_LCD_DrawHLine>
 800f208:	e015      	b.n	800f236 <UTIL_LCD_FillCircle+0x96>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
 800f20a:	68fa      	ldr	r2, [r7, #12]
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	1ad0      	subs	r0, r2, r3
 800f210:	68ba      	ldr	r2, [r7, #8]
 800f212:	69bb      	ldr	r3, [r7, #24]
 800f214:	18d1      	adds	r1, r2, r3
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	005a      	lsls	r2, r3, #1
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	f7ff fac0 	bl	800e7a0 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
 800f220:	68fa      	ldr	r2, [r7, #12]
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	1ad0      	subs	r0, r2, r3
 800f226:	68ba      	ldr	r2, [r7, #8]
 800f228:	69bb      	ldr	r3, [r7, #24]
 800f22a:	1ad1      	subs	r1, r2, r3
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	005a      	lsls	r2, r3, #1
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	f7ff fab5 	bl	800e7a0 <UTIL_LCD_DrawHLine>
      }
    }

    if(current_x > 0)
 800f236:	69bb      	ldr	r3, [r7, #24]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d036      	beq.n	800f2aa <UTIL_LCD_FillCircle+0x10a>
    {
      if(current_x >= Xpos)
 800f23c:	69ba      	ldr	r2, [r7, #24]
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	429a      	cmp	r2, r3
 800f242:	d31c      	bcc.n	800f27e <UTIL_LCD_FillCircle+0xde>
      {
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
 800f244:	68ba      	ldr	r2, [r7, #8]
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	1ad0      	subs	r0, r2, r3
 800f24a:	69bb      	ldr	r3, [r7, #24]
 800f24c:	005a      	lsls	r2, r3, #1
 800f24e:	68f9      	ldr	r1, [r7, #12]
 800f250:	69bb      	ldr	r3, [r7, #24]
 800f252:	1acb      	subs	r3, r1, r3
 800f254:	441a      	add	r2, r3
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	4601      	mov	r1, r0
 800f25a:	2000      	movs	r0, #0
 800f25c:	f7ff faa0 	bl	800e7a0 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
 800f260:	68ba      	ldr	r2, [r7, #8]
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	18d0      	adds	r0, r2, r3
 800f266:	69bb      	ldr	r3, [r7, #24]
 800f268:	005a      	lsls	r2, r3, #1
 800f26a:	68f9      	ldr	r1, [r7, #12]
 800f26c:	69bb      	ldr	r3, [r7, #24]
 800f26e:	1acb      	subs	r3, r1, r3
 800f270:	441a      	add	r2, r3
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	4601      	mov	r1, r0
 800f276:	2000      	movs	r0, #0
 800f278:	f7ff fa92 	bl	800e7a0 <UTIL_LCD_DrawHLine>
 800f27c:	e015      	b.n	800f2aa <UTIL_LCD_FillCircle+0x10a>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
 800f27e:	68fa      	ldr	r2, [r7, #12]
 800f280:	69bb      	ldr	r3, [r7, #24]
 800f282:	1ad0      	subs	r0, r2, r3
 800f284:	68ba      	ldr	r2, [r7, #8]
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	1ad1      	subs	r1, r2, r3
 800f28a:	69bb      	ldr	r3, [r7, #24]
 800f28c:	005a      	lsls	r2, r3, #1
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	f7ff fa86 	bl	800e7a0 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
 800f294:	68fa      	ldr	r2, [r7, #12]
 800f296:	69bb      	ldr	r3, [r7, #24]
 800f298:	1ad0      	subs	r0, r2, r3
 800f29a:	68ba      	ldr	r2, [r7, #8]
 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	18d1      	adds	r1, r2, r3
 800f2a0:	69bb      	ldr	r3, [r7, #24]
 800f2a2:	005a      	lsls	r2, r3, #1
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	f7ff fa7b 	bl	800e7a0 <UTIL_LCD_DrawHLine>
      }
    }
    if (decision < 0)
 800f2aa:	69fb      	ldr	r3, [r7, #28]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	da06      	bge.n	800f2be <UTIL_LCD_FillCircle+0x11e>
    {
      decision += (current_x << 2) + 6;
 800f2b0:	69bb      	ldr	r3, [r7, #24]
 800f2b2:	009a      	lsls	r2, r3, #2
 800f2b4:	69fb      	ldr	r3, [r7, #28]
 800f2b6:	4413      	add	r3, r2
 800f2b8:	3306      	adds	r3, #6
 800f2ba:	61fb      	str	r3, [r7, #28]
 800f2bc:	e00a      	b.n	800f2d4 <UTIL_LCD_FillCircle+0x134>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800f2be:	69ba      	ldr	r2, [r7, #24]
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	1ad3      	subs	r3, r2, r3
 800f2c4:	009a      	lsls	r2, r3, #2
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	330a      	adds	r3, #10
 800f2cc:	61fb      	str	r3, [r7, #28]
      current_y--;
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	3b01      	subs	r3, #1
 800f2d2:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 800f2d4:	69bb      	ldr	r3, [r7, #24]
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 800f2da:	69ba      	ldr	r2, [r7, #24]
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	f67f af6f 	bls.w	800f1c2 <UTIL_LCD_FillCircle+0x22>
  }

  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	687a      	ldr	r2, [r7, #4]
 800f2e8:	68b9      	ldr	r1, [r7, #8]
 800f2ea:	68f8      	ldr	r0, [r7, #12]
 800f2ec:	f7ff fcd8 	bl	800eca0 <UTIL_LCD_DrawCircle>
}
 800f2f0:	bf00      	nop
 800f2f2:	3720      	adds	r7, #32
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}

0800f2f8 <UTIL_LCD_FillPolygon>:
  * @param  Points     Pointer to the points array
  * @param  PointCount Number of points
  * @param  Color      Draw color
  */
void UTIL_LCD_FillPolygon(pPoint Points, uint32_t PointCount, uint32_t Color)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b094      	sub	sp, #80	; 0x50
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	60f8      	str	r0, [r7, #12]
 800f300:	60b9      	str	r1, [r7, #8]
 800f302:	607a      	str	r2, [r7, #4]
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, x_center = 0, y_center = 0, x_first = 0, y_first = 0, pixel_x = 0, pixel_y = 0, counter = 0;
 800f304:	2300      	movs	r3, #0
 800f306:	86fb      	strh	r3, [r7, #54]	; 0x36
 800f308:	2300      	movs	r3, #0
 800f30a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800f30c:	2300      	movs	r3, #0
 800f30e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800f312:	2300      	movs	r3, #0
 800f314:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800f318:	2300      	movs	r3, #0
 800f31a:	867b      	strh	r3, [r7, #50]	; 0x32
 800f31c:	2300      	movs	r3, #0
 800f31e:	863b      	strh	r3, [r7, #48]	; 0x30
 800f320:	2300      	movs	r3, #0
 800f322:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f324:	2300      	movs	r3, #0
 800f326:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f328:	2300      	movs	r3, #0
 800f32a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800f32c:	2300      	movs	r3, #0
 800f32e:	853b      	strh	r3, [r7, #40]	; 0x28
 800f330:	2300      	movs	r3, #0
 800f332:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  uint32_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 800f336:	2300      	movs	r3, #0
 800f338:	647b      	str	r3, [r7, #68]	; 0x44
 800f33a:	2300      	movs	r3, #0
 800f33c:	643b      	str	r3, [r7, #64]	; 0x40
 800f33e:	2300      	movs	r3, #0
 800f340:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f342:	2300      	movs	r3, #0
 800f344:	63bb      	str	r3, [r7, #56]	; 0x38
  Triangle_Positions_t positions;

  image_left = image_right = Points->X;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f34c:	643b      	str	r3, [r7, #64]	; 0x40
 800f34e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f350:	647b      	str	r3, [r7, #68]	; 0x44
  image_top= image_bottom = Points->Y;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f358:	63bb      	str	r3, [r7, #56]	; 0x38
 800f35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f35c:	63fb      	str	r3, [r7, #60]	; 0x3c

  for(counter = 1; counter < PointCount; counter++)
 800f35e:	2301      	movs	r3, #1
 800f360:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800f364:	e034      	b.n	800f3d0 <UTIL_LCD_FillPolygon+0xd8>
  {
    pixel_x = POLY_X(counter);
 800f366:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800f36a:	009b      	lsls	r3, r3, #2
 800f36c:	68fa      	ldr	r2, [r7, #12]
 800f36e:	4413      	add	r3, r2
 800f370:	881b      	ldrh	r3, [r3, #0]
 800f372:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(pixel_x < image_left)
 800f374:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800f378:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d902      	bls.n	800f384 <UTIL_LCD_FillPolygon+0x8c>
    {
      image_left = pixel_x;
 800f37e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800f382:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if(pixel_x > image_right)
 800f384:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800f388:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d202      	bcs.n	800f394 <UTIL_LCD_FillPolygon+0x9c>
    {
      image_right = pixel_x;
 800f38e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800f392:	643b      	str	r3, [r7, #64]	; 0x40
    }

    pixel_y = POLY_Y(counter);
 800f394:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800f398:	009b      	lsls	r3, r3, #2
 800f39a:	68fa      	ldr	r2, [r7, #12]
 800f39c:	4413      	add	r3, r2
 800f39e:	885b      	ldrh	r3, [r3, #2]
 800f3a0:	853b      	strh	r3, [r7, #40]	; 0x28
    if(pixel_y < image_top)
 800f3a2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800f3a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d902      	bls.n	800f3b2 <UTIL_LCD_FillPolygon+0xba>
    {
      image_top = pixel_y;
 800f3ac:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800f3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if(pixel_y > image_bottom)
 800f3b2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800f3b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d202      	bcs.n	800f3c2 <UTIL_LCD_FillPolygon+0xca>
    {
      image_bottom = pixel_y;
 800f3bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800f3c0:	63bb      	str	r3, [r7, #56]	; 0x38
  for(counter = 1; counter < PointCount; counter++)
 800f3c2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800f3c6:	b29b      	uxth	r3, r3
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800f3d0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800f3d4:	68ba      	ldr	r2, [r7, #8]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d8c5      	bhi.n	800f366 <UTIL_LCD_FillPolygon+0x6e>
    }
  }

  if(PointCount < 2)
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	f240 80ad 	bls.w	800f53c <UTIL_LCD_FillPolygon+0x244>
  {
    return;
  }

  x_center = (image_left + image_right)/2;
 800f3e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3e6:	4413      	add	r3, r2
 800f3e8:	085b      	lsrs	r3, r3, #1
 800f3ea:	867b      	strh	r3, [r7, #50]	; 0x32
  y_center = (image_bottom + image_top)/2;
 800f3ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3f0:	4413      	add	r3, r2
 800f3f2:	085b      	lsrs	r3, r3, #1
 800f3f4:	863b      	strh	r3, [r7, #48]	; 0x30

  x_first = Points->X;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	881b      	ldrh	r3, [r3, #0]
 800f3fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
  y_first = Points->Y;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	885b      	ldrh	r3, [r3, #2]
 800f400:	85bb      	strh	r3, [r7, #44]	; 0x2c

  while(--PointCount)
 800f402:	e052      	b.n	800f4aa <UTIL_LCD_FillPolygon+0x1b2>
  {
    X = Points->X;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	881b      	ldrh	r3, [r3, #0]
 800f408:	86fb      	strh	r3, [r7, #54]	; 0x36
    Y = Points->Y;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	885b      	ldrh	r3, [r3, #2]
 800f40e:	86bb      	strh	r3, [r7, #52]	; 0x34
    Points++;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	3304      	adds	r3, #4
 800f414:	60fb      	str	r3, [r7, #12]
    X2 = Points->X;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	881b      	ldrh	r3, [r3, #0]
 800f41a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    Y2 = Points->Y;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	885b      	ldrh	r3, [r3, #2]
 800f422:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    positions.x1 = X;
 800f426:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f42a:	613b      	str	r3, [r7, #16]
    positions.y1 = Y;
 800f42c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f430:	617b      	str	r3, [r7, #20]
    positions.x2 = X2;
 800f432:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f436:	61bb      	str	r3, [r7, #24]
    positions.y2 = Y2;
 800f438:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800f43c:	61fb      	str	r3, [r7, #28]
    positions.x3 = x_center;
 800f43e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f442:	623b      	str	r3, [r7, #32]
    positions.y3 = y_center;
 800f444:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f448:	627b      	str	r3, [r7, #36]	; 0x24
    FillTriangle(&positions, Color);
 800f44a:	f107 0310 	add.w	r3, r7, #16
 800f44e:	6879      	ldr	r1, [r7, #4]
 800f450:	4618      	mov	r0, r3
 800f452:	f000 fa7b 	bl	800f94c <FillTriangle>

    positions.x2 = x_center;
 800f456:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f45a:	61bb      	str	r3, [r7, #24]
    positions.y2 = y_center;
 800f45c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f460:	61fb      	str	r3, [r7, #28]
    positions.x3 = X2;
 800f462:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f466:	623b      	str	r3, [r7, #32]
    positions.y3 = Y2;
 800f468:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800f46c:	627b      	str	r3, [r7, #36]	; 0x24
    FillTriangle(&positions, Color);
 800f46e:	f107 0310 	add.w	r3, r7, #16
 800f472:	6879      	ldr	r1, [r7, #4]
 800f474:	4618      	mov	r0, r3
 800f476:	f000 fa69 	bl	800f94c <FillTriangle>

    positions.x1 = x_center;
 800f47a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f47e:	613b      	str	r3, [r7, #16]
    positions.y1 = y_center;
 800f480:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f484:	617b      	str	r3, [r7, #20]
    positions.x2 = X2;
 800f486:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f48a:	61bb      	str	r3, [r7, #24]
    positions.y2 = Y2;
 800f48c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800f490:	61fb      	str	r3, [r7, #28]
    positions.x3 = X;
 800f492:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f496:	623b      	str	r3, [r7, #32]
    positions.y3 = Y;
 800f498:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f49c:	627b      	str	r3, [r7, #36]	; 0x24
    FillTriangle(&positions, Color);
 800f49e:	f107 0310 	add.w	r3, r7, #16
 800f4a2:	6879      	ldr	r1, [r7, #4]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f000 fa51 	bl	800f94c <FillTriangle>
  while(--PointCount)
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	3b01      	subs	r3, #1
 800f4ae:	60bb      	str	r3, [r7, #8]
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d1a6      	bne.n	800f404 <UTIL_LCD_FillPolygon+0x10c>
  }

    positions.x1 = x_first;
 800f4b6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800f4ba:	613b      	str	r3, [r7, #16]
    positions.y1 = y_first;
 800f4bc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800f4c0:	617b      	str	r3, [r7, #20]
    positions.x2 = X2;
 800f4c2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f4c6:	61bb      	str	r3, [r7, #24]
    positions.y2 = Y2;
 800f4c8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800f4cc:	61fb      	str	r3, [r7, #28]
    positions.x3 = x_center;
 800f4ce:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f4d2:	623b      	str	r3, [r7, #32]
    positions.y3 = y_center;
 800f4d4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f4d8:	627b      	str	r3, [r7, #36]	; 0x24
    FillTriangle(&positions, Color);
 800f4da:	f107 0310 	add.w	r3, r7, #16
 800f4de:	6879      	ldr	r1, [r7, #4]
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f000 fa33 	bl	800f94c <FillTriangle>

    positions.x2 = x_center;
 800f4e6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f4ea:	61bb      	str	r3, [r7, #24]
    positions.y2 = y_center;
 800f4ec:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f4f0:	61fb      	str	r3, [r7, #28]
    positions.x3 = X2;
 800f4f2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f4f6:	623b      	str	r3, [r7, #32]
    positions.y3 = Y2;
 800f4f8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800f4fc:	627b      	str	r3, [r7, #36]	; 0x24
    FillTriangle(&positions, Color);
 800f4fe:	f107 0310 	add.w	r3, r7, #16
 800f502:	6879      	ldr	r1, [r7, #4]
 800f504:	4618      	mov	r0, r3
 800f506:	f000 fa21 	bl	800f94c <FillTriangle>

    positions.x1 = x_center;
 800f50a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f50e:	613b      	str	r3, [r7, #16]
    positions.y1 = y_center;
 800f510:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f514:	617b      	str	r3, [r7, #20]
    positions.x2 = X2;
 800f516:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f51a:	61bb      	str	r3, [r7, #24]
    positions.y2 = Y2;
 800f51c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800f520:	61fb      	str	r3, [r7, #28]
    positions.x3 = x_first;
 800f522:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800f526:	623b      	str	r3, [r7, #32]
    positions.y3 = y_first;
 800f528:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800f52c:	627b      	str	r3, [r7, #36]	; 0x24
    FillTriangle(&positions, Color);
 800f52e:	f107 0310 	add.w	r3, r7, #16
 800f532:	6879      	ldr	r1, [r7, #4]
 800f534:	4618      	mov	r0, r3
 800f536:	f000 fa09 	bl	800f94c <FillTriangle>
 800f53a:	e000      	b.n	800f53e <UTIL_LCD_FillPolygon+0x246>
    return;
 800f53c:	bf00      	nop
}
 800f53e:	3750      	adds	r7, #80	; 0x50
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <UTIL_LCD_FillEllipse>:
  * @param  XRadius Ellipse X radius
  * @param  YRadius Ellipse Y radius
  * @param  Color   Draw color
  */
void UTIL_LCD_FillEllipse(int Xpos, int Ypos, int XRadius, int YRadius, uint32_t Color)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b08c      	sub	sp, #48	; 0x30
 800f548:	af00      	add	r7, sp, #0
 800f54a:	60f8      	str	r0, [r7, #12]
 800f54c:	60b9      	str	r1, [r7, #8]
 800f54e:	607a      	str	r2, [r7, #4]
 800f550:	603b      	str	r3, [r7, #0]
  int x_pos = 0, y_pos = -YRadius, err = 2-2*XRadius, e2;
 800f552:	2300      	movs	r3, #0
 800f554:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	425b      	negs	r3, r3
 800f55a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f1c3 0301 	rsb	r3, r3, #1
 800f562:	005b      	lsls	r3, r3, #1
 800f564:	627b      	str	r3, [r7, #36]	; 0x24
  float k = 0, rad1 = 0, rad2 = 0;
 800f566:	f04f 0300 	mov.w	r3, #0
 800f56a:	61fb      	str	r3, [r7, #28]
 800f56c:	f04f 0300 	mov.w	r3, #0
 800f570:	61bb      	str	r3, [r7, #24]
 800f572:	f04f 0300 	mov.w	r3, #0
 800f576:	617b      	str	r3, [r7, #20]

  rad1 = XRadius;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	ee07 3a90 	vmov	s15, r3
 800f57e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f582:	edc7 7a06 	vstr	s15, [r7, #24]
  rad2 = YRadius;
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	ee07 3a90 	vmov	s15, r3
 800f58c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f590:	edc7 7a05 	vstr	s15, [r7, #20]

  k = (float)(rad2/rad1);
 800f594:	edd7 6a05 	vldr	s13, [r7, #20]
 800f598:	ed97 7a06 	vldr	s14, [r7, #24]
 800f59c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f5a0:	edc7 7a07 	vstr	s15, [r7, #28]

  do
  {
    UTIL_LCD_DrawHLine((Xpos-(uint32_t)(x_pos/k)), (Ypos + y_pos), (2*(uint32_t)(x_pos/k) + 1), Color);
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5a8:	ee07 2a90 	vmov	s15, r2
 800f5ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f5b0:	ed97 7a07 	vldr	s14, [r7, #28]
 800f5b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f5b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f5bc:	ee17 2a90 	vmov	r2, s15
 800f5c0:	1a98      	subs	r0, r3, r2
 800f5c2:	68ba      	ldr	r2, [r7, #8]
 800f5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c6:	4413      	add	r3, r2
 800f5c8:	4619      	mov	r1, r3
 800f5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5cc:	ee07 3a90 	vmov	s15, r3
 800f5d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f5d4:	ed97 7a07 	vldr	s14, [r7, #28]
 800f5d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f5dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f5e0:	ee17 3a90 	vmov	r3, s15
 800f5e4:	005b      	lsls	r3, r3, #1
 800f5e6:	1c5a      	adds	r2, r3, #1
 800f5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ea:	f7ff f8d9 	bl	800e7a0 <UTIL_LCD_DrawHLine>
    UTIL_LCD_DrawHLine((Xpos-(uint32_t)(x_pos/k)), (Ypos - y_pos), (2*(uint32_t)(x_pos/k) + 1), Color);
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5f2:	ee07 2a90 	vmov	s15, r2
 800f5f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f5fa:	ed97 7a07 	vldr	s14, [r7, #28]
 800f5fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f606:	ee17 2a90 	vmov	r2, s15
 800f60a:	1a98      	subs	r0, r3, r2
 800f60c:	68ba      	ldr	r2, [r7, #8]
 800f60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f610:	1ad3      	subs	r3, r2, r3
 800f612:	4619      	mov	r1, r3
 800f614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f616:	ee07 3a90 	vmov	s15, r3
 800f61a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f61e:	ed97 7a07 	vldr	s14, [r7, #28]
 800f622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f62a:	ee17 3a90 	vmov	r3, s15
 800f62e:	005b      	lsls	r3, r3, #1
 800f630:	1c5a      	adds	r2, r3, #1
 800f632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f634:	f7ff f8b4 	bl	800e7a0 <UTIL_LCD_DrawHLine>

    e2 = err;
 800f638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63a:	623b      	str	r3, [r7, #32]
    if (e2 <= x_pos)
 800f63c:	6a3a      	ldr	r2, [r7, #32]
 800f63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f640:	429a      	cmp	r2, r3
 800f642:	dc13      	bgt.n	800f66c <UTIL_LCD_FillEllipse+0x128>
    {
      err += ++x_pos*2+1;
 800f644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f646:	3301      	adds	r3, #1
 800f648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f64c:	005b      	lsls	r3, r3, #1
 800f64e:	3301      	adds	r3, #1
 800f650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f652:	4413      	add	r3, r2
 800f654:	627b      	str	r3, [r7, #36]	; 0x24
      if (-y_pos == x_pos && e2 <= y_pos) e2 = 0;
 800f656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f658:	425b      	negs	r3, r3
 800f65a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d105      	bne.n	800f66c <UTIL_LCD_FillEllipse+0x128>
 800f660:	6a3a      	ldr	r2, [r7, #32]
 800f662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f664:	429a      	cmp	r2, r3
 800f666:	dc01      	bgt.n	800f66c <UTIL_LCD_FillEllipse+0x128>
 800f668:	2300      	movs	r3, #0
 800f66a:	623b      	str	r3, [r7, #32]
    }
    if (e2 > y_pos) err += ++y_pos*2+1;
 800f66c:	6a3a      	ldr	r2, [r7, #32]
 800f66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f670:	429a      	cmp	r2, r3
 800f672:	dd08      	ble.n	800f686 <UTIL_LCD_FillEllipse+0x142>
 800f674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f676:	3301      	adds	r3, #1
 800f678:	62bb      	str	r3, [r7, #40]	; 0x28
 800f67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f67c:	005b      	lsls	r3, r3, #1
 800f67e:	3301      	adds	r3, #1
 800f680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f682:	4413      	add	r3, r2
 800f684:	627b      	str	r3, [r7, #36]	; 0x24
  }
  while (y_pos <= 0);
 800f686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f688:	2b00      	cmp	r3, #0
 800f68a:	dd8b      	ble.n	800f5a4 <UTIL_LCD_FillEllipse+0x60>
}
 800f68c:	bf00      	nop
 800f68e:	bf00      	nop
 800f690:	3730      	adds	r7, #48	; 0x30
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
	...

0800f698 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b0b2      	sub	sp, #200	; 0xc8
 800f69c:	af02      	add	r7, sp, #8
 800f69e:	60f8      	str	r0, [r7, #12]
 800f6a0:	60b9      	str	r1, [r7, #8]
 800f6a2:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 800f6b0:	4ba5      	ldr	r3, [pc, #660]	; (800f948 <DrawChar+0x2b0>)
 800f6b2:	68db      	ldr	r3, [r3, #12]
 800f6b4:	4aa4      	ldr	r2, [pc, #656]	; (800f948 <DrawChar+0x2b0>)
 800f6b6:	015b      	lsls	r3, r3, #5
 800f6b8:	4413      	add	r3, r2
 800f6ba:	3308      	adds	r3, #8
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	88db      	ldrh	r3, [r3, #6]
 800f6c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 800f6c4:	4ba0      	ldr	r3, [pc, #640]	; (800f948 <DrawChar+0x2b0>)
 800f6c6:	68db      	ldr	r3, [r3, #12]
 800f6c8:	4a9f      	ldr	r2, [pc, #636]	; (800f948 <DrawChar+0x2b0>)
 800f6ca:	015b      	lsls	r3, r3, #5
 800f6cc:	4413      	add	r3, r2
 800f6ce:	3308      	adds	r3, #8
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	889b      	ldrh	r3, [r3, #4]
 800f6d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 800f6d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f6dc:	3307      	adds	r3, #7
 800f6de:	f023 0207 	bic.w	r2, r3, #7
 800f6e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f6e6:	1ad3      	subs	r3, r2, r3
 800f6e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f6f2:	e11c      	b.n	800f92e <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 800f6f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f6f8:	3307      	adds	r3, #7
 800f6fa:	08db      	lsrs	r3, r3, #3
 800f6fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f700:	fb02 f303 	mul.w	r3, r2, r3
 800f704:	687a      	ldr	r2, [r7, #4]
 800f706:	4413      	add	r3, r2
 800f708:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 800f70c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f710:	3307      	adds	r3, #7
 800f712:	08db      	lsrs	r3, r3, #3
 800f714:	2b01      	cmp	r3, #1
 800f716:	d002      	beq.n	800f71e <DrawChar+0x86>
 800f718:	2b02      	cmp	r3, #2
 800f71a:	d006      	beq.n	800f72a <DrawChar+0x92>
 800f71c:	e011      	b.n	800f742 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 800f71e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 800f728:	e01d      	b.n	800f766 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800f72a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f72e:	781b      	ldrb	r3, [r3, #0]
 800f730:	021b      	lsls	r3, r3, #8
 800f732:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f736:	3201      	adds	r2, #1
 800f738:	7812      	ldrb	r2, [r2, #0]
 800f73a:	4313      	orrs	r3, r2
 800f73c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 800f740:	e011      	b.n	800f766 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800f742:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	041a      	lsls	r2, r3, #16
 800f74a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f74e:	3301      	adds	r3, #1
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	021b      	lsls	r3, r3, #8
 800f754:	4313      	orrs	r3, r2
 800f756:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f75a:	3202      	adds	r2, #2
 800f75c:	7812      	ldrb	r2, [r2, #0]
 800f75e:	4313      	orrs	r3, r2
 800f760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 800f764:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800f766:	4b78      	ldr	r3, [pc, #480]	; (800f948 <DrawChar+0x2b0>)
 800f768:	68db      	ldr	r3, [r3, #12]
 800f76a:	4a77      	ldr	r2, [pc, #476]	; (800f948 <DrawChar+0x2b0>)
 800f76c:	015b      	lsls	r3, r3, #5
 800f76e:	4413      	add	r3, r2
 800f770:	331c      	adds	r3, #28
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	2b02      	cmp	r3, #2
 800f776:	f040 808c 	bne.w	800f892 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 800f77a:	2300      	movs	r3, #0
 800f77c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f780:	e074      	b.n	800f86c <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 800f782:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f786:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f78a:	1ad2      	subs	r2, r2, r3
 800f78c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f790:	4413      	add	r3, r2
 800f792:	3b01      	subs	r3, #1
 800f794:	2201      	movs	r2, #1
 800f796:	fa02 f303 	lsl.w	r3, r2, r3
 800f79a:	461a      	mov	r2, r3
 800f79c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f7a0:	4013      	ands	r3, r2
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d02d      	beq.n	800f802 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 800f7a6:	4b68      	ldr	r3, [pc, #416]	; (800f948 <DrawChar+0x2b0>)
 800f7a8:	68db      	ldr	r3, [r3, #12]
 800f7aa:	4a67      	ldr	r2, [pc, #412]	; (800f948 <DrawChar+0x2b0>)
 800f7ac:	015b      	lsls	r3, r3, #5
 800f7ae:	4413      	add	r3, r2
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	08db      	lsrs	r3, r3, #3
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	f003 031f 	and.w	r3, r3, #31
 800f7ba:	b29a      	uxth	r2, r3
 800f7bc:	4b62      	ldr	r3, [pc, #392]	; (800f948 <DrawChar+0x2b0>)
 800f7be:	68db      	ldr	r3, [r3, #12]
 800f7c0:	4961      	ldr	r1, [pc, #388]	; (800f948 <DrawChar+0x2b0>)
 800f7c2:	015b      	lsls	r3, r3, #5
 800f7c4:	440b      	add	r3, r1
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	0a9b      	lsrs	r3, r3, #10
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	015b      	lsls	r3, r3, #5
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800f7d4:	b29b      	uxth	r3, r3
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	b29a      	uxth	r2, r3
 800f7da:	4b5b      	ldr	r3, [pc, #364]	; (800f948 <DrawChar+0x2b0>)
 800f7dc:	68db      	ldr	r3, [r3, #12]
 800f7de:	495a      	ldr	r1, [pc, #360]	; (800f948 <DrawChar+0x2b0>)
 800f7e0:	015b      	lsls	r3, r3, #5
 800f7e2:	440b      	add	r3, r1
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	0cdb      	lsrs	r3, r3, #19
 800f7e8:	b29b      	uxth	r3, r3
 800f7ea:	02db      	lsls	r3, r3, #11
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	4313      	orrs	r3, r2
 800f7f0:	b29a      	uxth	r2, r3
 800f7f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f7f6:	005b      	lsls	r3, r3, #1
 800f7f8:	33c0      	adds	r3, #192	; 0xc0
 800f7fa:	443b      	add	r3, r7
 800f7fc:	f823 2c4c 	strh.w	r2, [r3, #-76]
 800f800:	e02f      	b.n	800f862 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 800f802:	4b51      	ldr	r3, [pc, #324]	; (800f948 <DrawChar+0x2b0>)
 800f804:	68db      	ldr	r3, [r3, #12]
 800f806:	4a50      	ldr	r2, [pc, #320]	; (800f948 <DrawChar+0x2b0>)
 800f808:	015b      	lsls	r3, r3, #5
 800f80a:	4413      	add	r3, r2
 800f80c:	3304      	adds	r3, #4
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	08db      	lsrs	r3, r3, #3
 800f812:	b29b      	uxth	r3, r3
 800f814:	f003 031f 	and.w	r3, r3, #31
 800f818:	b29a      	uxth	r2, r3
 800f81a:	4b4b      	ldr	r3, [pc, #300]	; (800f948 <DrawChar+0x2b0>)
 800f81c:	68db      	ldr	r3, [r3, #12]
 800f81e:	494a      	ldr	r1, [pc, #296]	; (800f948 <DrawChar+0x2b0>)
 800f820:	015b      	lsls	r3, r3, #5
 800f822:	440b      	add	r3, r1
 800f824:	3304      	adds	r3, #4
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	0a9b      	lsrs	r3, r3, #10
 800f82a:	b29b      	uxth	r3, r3
 800f82c:	015b      	lsls	r3, r3, #5
 800f82e:	b29b      	uxth	r3, r3
 800f830:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800f834:	b29b      	uxth	r3, r3
 800f836:	4313      	orrs	r3, r2
 800f838:	b29a      	uxth	r2, r3
 800f83a:	4b43      	ldr	r3, [pc, #268]	; (800f948 <DrawChar+0x2b0>)
 800f83c:	68db      	ldr	r3, [r3, #12]
 800f83e:	4942      	ldr	r1, [pc, #264]	; (800f948 <DrawChar+0x2b0>)
 800f840:	015b      	lsls	r3, r3, #5
 800f842:	440b      	add	r3, r1
 800f844:	3304      	adds	r3, #4
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	0cdb      	lsrs	r3, r3, #19
 800f84a:	b29b      	uxth	r3, r3
 800f84c:	02db      	lsls	r3, r3, #11
 800f84e:	b29b      	uxth	r3, r3
 800f850:	4313      	orrs	r3, r2
 800f852:	b29a      	uxth	r2, r3
 800f854:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f858:	005b      	lsls	r3, r3, #1
 800f85a:	33c0      	adds	r3, #192	; 0xc0
 800f85c:	443b      	add	r3, r7
 800f85e:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 800f862:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f866:	3301      	adds	r3, #1
 800f868:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f86c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800f870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f874:	429a      	cmp	r2, r3
 800f876:	d384      	bcc.n	800f782 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 800f878:	68b9      	ldr	r1, [r7, #8]
 800f87a:	1c4b      	adds	r3, r1, #1
 800f87c:	60bb      	str	r3, [r7, #8]
 800f87e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800f882:	2301      	movs	r3, #1
 800f884:	9300      	str	r3, [sp, #0]
 800f886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f88a:	68f8      	ldr	r0, [r7, #12]
 800f88c:	f7fe ff6c 	bl	800e768 <UTIL_LCD_FillRGBRect>
 800f890:	e048      	b.n	800f924 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 800f892:	2300      	movs	r3, #0
 800f894:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f898:	e032      	b.n	800f900 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 800f89a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f89e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f8a2:	1ad2      	subs	r2, r2, r3
 800f8a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f8a8:	4413      	add	r3, r2
 800f8aa:	3b01      	subs	r3, #1
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	fa02 f303 	lsl.w	r3, r2, r3
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f8b8:	4013      	ands	r3, r2
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d00d      	beq.n	800f8da <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 800f8be:	4b22      	ldr	r3, [pc, #136]	; (800f948 <DrawChar+0x2b0>)
 800f8c0:	68db      	ldr	r3, [r3, #12]
 800f8c2:	4a21      	ldr	r2, [pc, #132]	; (800f948 <DrawChar+0x2b0>)
 800f8c4:	015b      	lsls	r3, r3, #5
 800f8c6:	4413      	add	r3, r2
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f8ce:	009b      	lsls	r3, r3, #2
 800f8d0:	33c0      	adds	r3, #192	; 0xc0
 800f8d2:	443b      	add	r3, r7
 800f8d4:	f843 2cac 	str.w	r2, [r3, #-172]
 800f8d8:	e00d      	b.n	800f8f6 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 800f8da:	4b1b      	ldr	r3, [pc, #108]	; (800f948 <DrawChar+0x2b0>)
 800f8dc:	68db      	ldr	r3, [r3, #12]
 800f8de:	4a1a      	ldr	r2, [pc, #104]	; (800f948 <DrawChar+0x2b0>)
 800f8e0:	015b      	lsls	r3, r3, #5
 800f8e2:	4413      	add	r3, r2
 800f8e4:	3304      	adds	r3, #4
 800f8e6:	681a      	ldr	r2, [r3, #0]
 800f8e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f8ec:	009b      	lsls	r3, r3, #2
 800f8ee:	33c0      	adds	r3, #192	; 0xc0
 800f8f0:	443b      	add	r3, r7
 800f8f2:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 800f8f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f900:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800f904:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f908:	429a      	cmp	r2, r3
 800f90a:	d3c6      	bcc.n	800f89a <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 800f90c:	68b9      	ldr	r1, [r7, #8]
 800f90e:	1c4b      	adds	r3, r1, #1
 800f910:	60bb      	str	r3, [r7, #8]
 800f912:	f107 0214 	add.w	r2, r7, #20
 800f916:	2301      	movs	r3, #1
 800f918:	9300      	str	r3, [sp, #0]
 800f91a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f91e:	68f8      	ldr	r0, [r7, #12]
 800f920:	f7fe ff22 	bl	800e768 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 800f924:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f928:	3301      	adds	r3, #1
 800f92a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f92e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f932:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f936:	429a      	cmp	r2, r3
 800f938:	f4ff aedc 	bcc.w	800f6f4 <DrawChar+0x5c>
    }
  }
}
 800f93c:	bf00      	nop
 800f93e:	bf00      	nop
 800f940:	37c0      	adds	r7, #192	; 0xc0
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
 800f946:	bf00      	nop
 800f948:	24001b48 	.word	0x24001b48

0800f94c <FillTriangle>:
  * @brief  Fills a triangle (between 3 points).
  * @param  Positions  pointer to riangle coordinates
  * @param  Color      Draw color
  */
static void FillTriangle(Triangle_Positions_t *Positions, uint32_t Color)
{
 800f94c:	b590      	push	{r4, r7, lr}
 800f94e:	b08f      	sub	sp, #60	; 0x3c
 800f950:	af02      	add	r7, sp, #8
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	6039      	str	r1, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 800f956:	2300      	movs	r3, #0
 800f958:	833b      	strh	r3, [r7, #24]
 800f95a:	2300      	movs	r3, #0
 800f95c:	82fb      	strh	r3, [r7, #22]
 800f95e:	2300      	movs	r3, #0
 800f960:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f962:	2300      	movs	r3, #0
 800f964:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f966:	2300      	movs	r3, #0
 800f968:	857b      	strh	r3, [r7, #42]	; 0x2a
 800f96a:	2300      	movs	r3, #0
 800f96c:	853b      	strh	r3, [r7, #40]	; 0x28
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 800f96e:	2300      	movs	r3, #0
 800f970:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f972:	2300      	movs	r3, #0
 800f974:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f976:	2300      	movs	r3, #0
 800f978:	847b      	strh	r3, [r7, #34]	; 0x22
 800f97a:	2300      	movs	r3, #0
 800f97c:	843b      	strh	r3, [r7, #32]
 800f97e:	2300      	movs	r3, #0
 800f980:	83fb      	strh	r3, [r7, #30]
 800f982:	2300      	movs	r3, #0
 800f984:	83bb      	strh	r3, [r7, #28]
  curpixel = 0;
 800f986:	2300      	movs	r3, #0
 800f988:	837b      	strh	r3, [r7, #26]
  int32_t x_diff, y_diff;

  x_diff = Positions->x2 - Positions->x1;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	689a      	ldr	r2, [r3, #8]
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	1ad3      	subs	r3, r2, r3
 800f994:	613b      	str	r3, [r7, #16]
  y_diff = Positions->y2 - Positions->y1;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	68da      	ldr	r2, [r3, #12]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	685b      	ldr	r3, [r3, #4]
 800f99e:	1ad3      	subs	r3, r2, r3
 800f9a0:	60fb      	str	r3, [r7, #12]

  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	bfb8      	it	lt
 800f9a8:	425b      	neglt	r3, r3
 800f9aa:	833b      	strh	r3, [r7, #24]
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	bfb8      	it	lt
 800f9b2:	425b      	neglt	r3, r3
 800f9b4:	82fb      	strh	r3, [r7, #22]
  x = Positions->x1;                       /* Start x off at the first pixel */
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
  y = Positions->y1;                       /* Start y off at the first pixel */
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  if (Positions->x2 >= Positions->x1)                 /* The x-values are increasing */
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	689a      	ldr	r2, [r3, #8]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d304      	bcc.n	800f9d8 <FillTriangle+0x8c>
  {
    xinc1 = 1;
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	857b      	strh	r3, [r7, #42]	; 0x2a
    xinc2 = 1;
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	853b      	strh	r3, [r7, #40]	; 0x28
 800f9d6:	e005      	b.n	800f9e4 <FillTriangle+0x98>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 800f9d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9dc:	857b      	strh	r3, [r7, #42]	; 0x2a
    xinc2 = -1;
 800f9de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9e2:	853b      	strh	r3, [r7, #40]	; 0x28
  }

  if (Positions->y2 >= Positions->y1)                 /* The y-values are increasing */
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	68da      	ldr	r2, [r3, #12]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	685b      	ldr	r3, [r3, #4]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d304      	bcc.n	800f9fa <FillTriangle+0xae>
  {
    yinc1 = 1;
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	84fb      	strh	r3, [r7, #38]	; 0x26
    yinc2 = 1;
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f9f8:	e005      	b.n	800fa06 <FillTriangle+0xba>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800f9fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9fe:	84fb      	strh	r3, [r7, #38]	; 0x26
    yinc2 = -1;
 800fa00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa04:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800fa06:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800fa0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	db11      	blt.n	800fa36 <FillTriangle+0xea>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800fa12:	2300      	movs	r3, #0
 800fa14:	857b      	strh	r3, [r7, #42]	; 0x2a
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800fa16:	2300      	movs	r3, #0
 800fa18:	84bb      	strh	r3, [r7, #36]	; 0x24
    den = deltax;
 800fa1a:	8b3b      	ldrh	r3, [r7, #24]
 800fa1c:	847b      	strh	r3, [r7, #34]	; 0x22
    num = deltax / 2;
 800fa1e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	da00      	bge.n	800fa28 <FillTriangle+0xdc>
 800fa26:	3301      	adds	r3, #1
 800fa28:	105b      	asrs	r3, r3, #1
 800fa2a:	843b      	strh	r3, [r7, #32]
    numadd = deltay;
 800fa2c:	8afb      	ldrh	r3, [r7, #22]
 800fa2e:	83fb      	strh	r3, [r7, #30]
    numpixels = deltax;         /* There are more x-values than y-values */
 800fa30:	8b3b      	ldrh	r3, [r7, #24]
 800fa32:	83bb      	strh	r3, [r7, #28]
 800fa34:	e010      	b.n	800fa58 <FillTriangle+0x10c>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800fa36:	2300      	movs	r3, #0
 800fa38:	853b      	strh	r3, [r7, #40]	; 0x28
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	84fb      	strh	r3, [r7, #38]	; 0x26
    den = deltay;
 800fa3e:	8afb      	ldrh	r3, [r7, #22]
 800fa40:	847b      	strh	r3, [r7, #34]	; 0x22
    num = deltay / 2;
 800fa42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	da00      	bge.n	800fa4c <FillTriangle+0x100>
 800fa4a:	3301      	adds	r3, #1
 800fa4c:	105b      	asrs	r3, r3, #1
 800fa4e:	843b      	strh	r3, [r7, #32]
    numadd = deltax;
 800fa50:	8b3b      	ldrh	r3, [r7, #24]
 800fa52:	83fb      	strh	r3, [r7, #30]
    numpixels = deltay;         /* There are more y-values than x-values */
 800fa54:	8afb      	ldrh	r3, [r7, #22]
 800fa56:	83bb      	strh	r3, [r7, #28]
  }

  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800fa58:	2300      	movs	r3, #0
 800fa5a:	837b      	strh	r3, [r7, #26]
 800fa5c:	e036      	b.n	800facc <FillTriangle+0x180>
  {
    UTIL_LCD_DrawLine(x, y, Positions->x3, Positions->y3, Color);
 800fa5e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800fa62:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	691a      	ldr	r2, [r3, #16]
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	695c      	ldr	r4, [r3, #20]
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	9300      	str	r3, [sp, #0]
 800fa72:	4623      	mov	r3, r4
 800fa74:	f7ff f82e 	bl	800ead4 <UTIL_LCD_DrawLine>

    num += numadd;              /* Increase the numerator by the top of the fraction */
 800fa78:	8c3a      	ldrh	r2, [r7, #32]
 800fa7a:	8bfb      	ldrh	r3, [r7, #30]
 800fa7c:	4413      	add	r3, r2
 800fa7e:	b29b      	uxth	r3, r3
 800fa80:	843b      	strh	r3, [r7, #32]
    if (num >= den)             /* Check if numerator >= denominator */
 800fa82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fa86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	db0e      	blt.n	800faac <FillTriangle+0x160>
    {
      num -= den;               /* Calculate the new numerator value */
 800fa8e:	8c3a      	ldrh	r2, [r7, #32]
 800fa90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fa92:	1ad3      	subs	r3, r2, r3
 800fa94:	b29b      	uxth	r3, r3
 800fa96:	843b      	strh	r3, [r7, #32]
      x += xinc1;               /* Change the x as appropriate */
 800fa98:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fa9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fa9c:	4413      	add	r3, r2
 800fa9e:	b29b      	uxth	r3, r3
 800faa0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      y += yinc1;               /* Change the y as appropriate */
 800faa2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800faa4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800faa6:	4413      	add	r3, r2
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    x += xinc2;                 /* Change the x as appropriate */
 800faac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800faae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fab0:	4413      	add	r3, r2
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    y += yinc2;                 /* Change the y as appropriate */
 800fab6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800fab8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800faba:	4413      	add	r3, r2
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	85bb      	strh	r3, [r7, #44]	; 0x2c
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800fac0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800fac4:	b29b      	uxth	r3, r3
 800fac6:	3301      	adds	r3, #1
 800fac8:	b29b      	uxth	r3, r3
 800faca:	837b      	strh	r3, [r7, #26]
 800facc:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800fad0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800fad4:	429a      	cmp	r2, r3
 800fad6:	ddc2      	ble.n	800fa5e <FillTriangle+0x112>
  }
}
 800fad8:	bf00      	nop
 800fada:	bf00      	nop
 800fadc:	3734      	adds	r7, #52	; 0x34
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd90      	pop	{r4, r7, pc}
	...

0800fae4 <__errno>:
 800fae4:	4b01      	ldr	r3, [pc, #4]	; (800faec <__errno+0x8>)
 800fae6:	6818      	ldr	r0, [r3, #0]
 800fae8:	4770      	bx	lr
 800faea:	bf00      	nop
 800faec:	240000c8 	.word	0x240000c8

0800faf0 <__libc_init_array>:
 800faf0:	b570      	push	{r4, r5, r6, lr}
 800faf2:	4d0d      	ldr	r5, [pc, #52]	; (800fb28 <__libc_init_array+0x38>)
 800faf4:	4c0d      	ldr	r4, [pc, #52]	; (800fb2c <__libc_init_array+0x3c>)
 800faf6:	1b64      	subs	r4, r4, r5
 800faf8:	10a4      	asrs	r4, r4, #2
 800fafa:	2600      	movs	r6, #0
 800fafc:	42a6      	cmp	r6, r4
 800fafe:	d109      	bne.n	800fb14 <__libc_init_array+0x24>
 800fb00:	4d0b      	ldr	r5, [pc, #44]	; (800fb30 <__libc_init_array+0x40>)
 800fb02:	4c0c      	ldr	r4, [pc, #48]	; (800fb34 <__libc_init_array+0x44>)
 800fb04:	f000 fc8e 	bl	8010424 <_init>
 800fb08:	1b64      	subs	r4, r4, r5
 800fb0a:	10a4      	asrs	r4, r4, #2
 800fb0c:	2600      	movs	r6, #0
 800fb0e:	42a6      	cmp	r6, r4
 800fb10:	d105      	bne.n	800fb1e <__libc_init_array+0x2e>
 800fb12:	bd70      	pop	{r4, r5, r6, pc}
 800fb14:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb18:	4798      	blx	r3
 800fb1a:	3601      	adds	r6, #1
 800fb1c:	e7ee      	b.n	800fafc <__libc_init_array+0xc>
 800fb1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb22:	4798      	blx	r3
 800fb24:	3601      	adds	r6, #1
 800fb26:	e7f2      	b.n	800fb0e <__libc_init_array+0x1e>
 800fb28:	08016c84 	.word	0x08016c84
 800fb2c:	08016c84 	.word	0x08016c84
 800fb30:	08016c84 	.word	0x08016c84
 800fb34:	08016c88 	.word	0x08016c88

0800fb38 <memcpy>:
 800fb38:	440a      	add	r2, r1
 800fb3a:	4291      	cmp	r1, r2
 800fb3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb40:	d100      	bne.n	800fb44 <memcpy+0xc>
 800fb42:	4770      	bx	lr
 800fb44:	b510      	push	{r4, lr}
 800fb46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb4e:	4291      	cmp	r1, r2
 800fb50:	d1f9      	bne.n	800fb46 <memcpy+0xe>
 800fb52:	bd10      	pop	{r4, pc}

0800fb54 <memset>:
 800fb54:	4402      	add	r2, r0
 800fb56:	4603      	mov	r3, r0
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d100      	bne.n	800fb5e <memset+0xa>
 800fb5c:	4770      	bx	lr
 800fb5e:	f803 1b01 	strb.w	r1, [r3], #1
 800fb62:	e7f9      	b.n	800fb58 <memset+0x4>

0800fb64 <siprintf>:
 800fb64:	b40e      	push	{r1, r2, r3}
 800fb66:	b500      	push	{lr}
 800fb68:	b09c      	sub	sp, #112	; 0x70
 800fb6a:	ab1d      	add	r3, sp, #116	; 0x74
 800fb6c:	9002      	str	r0, [sp, #8]
 800fb6e:	9006      	str	r0, [sp, #24]
 800fb70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fb74:	4809      	ldr	r0, [pc, #36]	; (800fb9c <siprintf+0x38>)
 800fb76:	9107      	str	r1, [sp, #28]
 800fb78:	9104      	str	r1, [sp, #16]
 800fb7a:	4909      	ldr	r1, [pc, #36]	; (800fba0 <siprintf+0x3c>)
 800fb7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb80:	9105      	str	r1, [sp, #20]
 800fb82:	6800      	ldr	r0, [r0, #0]
 800fb84:	9301      	str	r3, [sp, #4]
 800fb86:	a902      	add	r1, sp, #8
 800fb88:	f000 f868 	bl	800fc5c <_svfiprintf_r>
 800fb8c:	9b02      	ldr	r3, [sp, #8]
 800fb8e:	2200      	movs	r2, #0
 800fb90:	701a      	strb	r2, [r3, #0]
 800fb92:	b01c      	add	sp, #112	; 0x70
 800fb94:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb98:	b003      	add	sp, #12
 800fb9a:	4770      	bx	lr
 800fb9c:	240000c8 	.word	0x240000c8
 800fba0:	ffff0208 	.word	0xffff0208

0800fba4 <__ssputs_r>:
 800fba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fba8:	688e      	ldr	r6, [r1, #8]
 800fbaa:	429e      	cmp	r6, r3
 800fbac:	4682      	mov	sl, r0
 800fbae:	460c      	mov	r4, r1
 800fbb0:	4690      	mov	r8, r2
 800fbb2:	461f      	mov	r7, r3
 800fbb4:	d838      	bhi.n	800fc28 <__ssputs_r+0x84>
 800fbb6:	898a      	ldrh	r2, [r1, #12]
 800fbb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fbbc:	d032      	beq.n	800fc24 <__ssputs_r+0x80>
 800fbbe:	6825      	ldr	r5, [r4, #0]
 800fbc0:	6909      	ldr	r1, [r1, #16]
 800fbc2:	eba5 0901 	sub.w	r9, r5, r1
 800fbc6:	6965      	ldr	r5, [r4, #20]
 800fbc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fbcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fbd0:	3301      	adds	r3, #1
 800fbd2:	444b      	add	r3, r9
 800fbd4:	106d      	asrs	r5, r5, #1
 800fbd6:	429d      	cmp	r5, r3
 800fbd8:	bf38      	it	cc
 800fbda:	461d      	movcc	r5, r3
 800fbdc:	0553      	lsls	r3, r2, #21
 800fbde:	d531      	bpl.n	800fc44 <__ssputs_r+0xa0>
 800fbe0:	4629      	mov	r1, r5
 800fbe2:	f000 fb55 	bl	8010290 <_malloc_r>
 800fbe6:	4606      	mov	r6, r0
 800fbe8:	b950      	cbnz	r0, 800fc00 <__ssputs_r+0x5c>
 800fbea:	230c      	movs	r3, #12
 800fbec:	f8ca 3000 	str.w	r3, [sl]
 800fbf0:	89a3      	ldrh	r3, [r4, #12]
 800fbf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbf6:	81a3      	strh	r3, [r4, #12]
 800fbf8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc00:	6921      	ldr	r1, [r4, #16]
 800fc02:	464a      	mov	r2, r9
 800fc04:	f7ff ff98 	bl	800fb38 <memcpy>
 800fc08:	89a3      	ldrh	r3, [r4, #12]
 800fc0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc12:	81a3      	strh	r3, [r4, #12]
 800fc14:	6126      	str	r6, [r4, #16]
 800fc16:	6165      	str	r5, [r4, #20]
 800fc18:	444e      	add	r6, r9
 800fc1a:	eba5 0509 	sub.w	r5, r5, r9
 800fc1e:	6026      	str	r6, [r4, #0]
 800fc20:	60a5      	str	r5, [r4, #8]
 800fc22:	463e      	mov	r6, r7
 800fc24:	42be      	cmp	r6, r7
 800fc26:	d900      	bls.n	800fc2a <__ssputs_r+0x86>
 800fc28:	463e      	mov	r6, r7
 800fc2a:	6820      	ldr	r0, [r4, #0]
 800fc2c:	4632      	mov	r2, r6
 800fc2e:	4641      	mov	r1, r8
 800fc30:	f000 faa8 	bl	8010184 <memmove>
 800fc34:	68a3      	ldr	r3, [r4, #8]
 800fc36:	1b9b      	subs	r3, r3, r6
 800fc38:	60a3      	str	r3, [r4, #8]
 800fc3a:	6823      	ldr	r3, [r4, #0]
 800fc3c:	4433      	add	r3, r6
 800fc3e:	6023      	str	r3, [r4, #0]
 800fc40:	2000      	movs	r0, #0
 800fc42:	e7db      	b.n	800fbfc <__ssputs_r+0x58>
 800fc44:	462a      	mov	r2, r5
 800fc46:	f000 fb97 	bl	8010378 <_realloc_r>
 800fc4a:	4606      	mov	r6, r0
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	d1e1      	bne.n	800fc14 <__ssputs_r+0x70>
 800fc50:	6921      	ldr	r1, [r4, #16]
 800fc52:	4650      	mov	r0, sl
 800fc54:	f000 fab0 	bl	80101b8 <_free_r>
 800fc58:	e7c7      	b.n	800fbea <__ssputs_r+0x46>
	...

0800fc5c <_svfiprintf_r>:
 800fc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc60:	4698      	mov	r8, r3
 800fc62:	898b      	ldrh	r3, [r1, #12]
 800fc64:	061b      	lsls	r3, r3, #24
 800fc66:	b09d      	sub	sp, #116	; 0x74
 800fc68:	4607      	mov	r7, r0
 800fc6a:	460d      	mov	r5, r1
 800fc6c:	4614      	mov	r4, r2
 800fc6e:	d50e      	bpl.n	800fc8e <_svfiprintf_r+0x32>
 800fc70:	690b      	ldr	r3, [r1, #16]
 800fc72:	b963      	cbnz	r3, 800fc8e <_svfiprintf_r+0x32>
 800fc74:	2140      	movs	r1, #64	; 0x40
 800fc76:	f000 fb0b 	bl	8010290 <_malloc_r>
 800fc7a:	6028      	str	r0, [r5, #0]
 800fc7c:	6128      	str	r0, [r5, #16]
 800fc7e:	b920      	cbnz	r0, 800fc8a <_svfiprintf_r+0x2e>
 800fc80:	230c      	movs	r3, #12
 800fc82:	603b      	str	r3, [r7, #0]
 800fc84:	f04f 30ff 	mov.w	r0, #4294967295
 800fc88:	e0d1      	b.n	800fe2e <_svfiprintf_r+0x1d2>
 800fc8a:	2340      	movs	r3, #64	; 0x40
 800fc8c:	616b      	str	r3, [r5, #20]
 800fc8e:	2300      	movs	r3, #0
 800fc90:	9309      	str	r3, [sp, #36]	; 0x24
 800fc92:	2320      	movs	r3, #32
 800fc94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc98:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc9c:	2330      	movs	r3, #48	; 0x30
 800fc9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fe48 <_svfiprintf_r+0x1ec>
 800fca2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fca6:	f04f 0901 	mov.w	r9, #1
 800fcaa:	4623      	mov	r3, r4
 800fcac:	469a      	mov	sl, r3
 800fcae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcb2:	b10a      	cbz	r2, 800fcb8 <_svfiprintf_r+0x5c>
 800fcb4:	2a25      	cmp	r2, #37	; 0x25
 800fcb6:	d1f9      	bne.n	800fcac <_svfiprintf_r+0x50>
 800fcb8:	ebba 0b04 	subs.w	fp, sl, r4
 800fcbc:	d00b      	beq.n	800fcd6 <_svfiprintf_r+0x7a>
 800fcbe:	465b      	mov	r3, fp
 800fcc0:	4622      	mov	r2, r4
 800fcc2:	4629      	mov	r1, r5
 800fcc4:	4638      	mov	r0, r7
 800fcc6:	f7ff ff6d 	bl	800fba4 <__ssputs_r>
 800fcca:	3001      	adds	r0, #1
 800fccc:	f000 80aa 	beq.w	800fe24 <_svfiprintf_r+0x1c8>
 800fcd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcd2:	445a      	add	r2, fp
 800fcd4:	9209      	str	r2, [sp, #36]	; 0x24
 800fcd6:	f89a 3000 	ldrb.w	r3, [sl]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	f000 80a2 	beq.w	800fe24 <_svfiprintf_r+0x1c8>
 800fce0:	2300      	movs	r3, #0
 800fce2:	f04f 32ff 	mov.w	r2, #4294967295
 800fce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fcea:	f10a 0a01 	add.w	sl, sl, #1
 800fcee:	9304      	str	r3, [sp, #16]
 800fcf0:	9307      	str	r3, [sp, #28]
 800fcf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fcf6:	931a      	str	r3, [sp, #104]	; 0x68
 800fcf8:	4654      	mov	r4, sl
 800fcfa:	2205      	movs	r2, #5
 800fcfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd00:	4851      	ldr	r0, [pc, #324]	; (800fe48 <_svfiprintf_r+0x1ec>)
 800fd02:	f7f0 faed 	bl	80002e0 <memchr>
 800fd06:	9a04      	ldr	r2, [sp, #16]
 800fd08:	b9d8      	cbnz	r0, 800fd42 <_svfiprintf_r+0xe6>
 800fd0a:	06d0      	lsls	r0, r2, #27
 800fd0c:	bf44      	itt	mi
 800fd0e:	2320      	movmi	r3, #32
 800fd10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd14:	0711      	lsls	r1, r2, #28
 800fd16:	bf44      	itt	mi
 800fd18:	232b      	movmi	r3, #43	; 0x2b
 800fd1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd1e:	f89a 3000 	ldrb.w	r3, [sl]
 800fd22:	2b2a      	cmp	r3, #42	; 0x2a
 800fd24:	d015      	beq.n	800fd52 <_svfiprintf_r+0xf6>
 800fd26:	9a07      	ldr	r2, [sp, #28]
 800fd28:	4654      	mov	r4, sl
 800fd2a:	2000      	movs	r0, #0
 800fd2c:	f04f 0c0a 	mov.w	ip, #10
 800fd30:	4621      	mov	r1, r4
 800fd32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd36:	3b30      	subs	r3, #48	; 0x30
 800fd38:	2b09      	cmp	r3, #9
 800fd3a:	d94e      	bls.n	800fdda <_svfiprintf_r+0x17e>
 800fd3c:	b1b0      	cbz	r0, 800fd6c <_svfiprintf_r+0x110>
 800fd3e:	9207      	str	r2, [sp, #28]
 800fd40:	e014      	b.n	800fd6c <_svfiprintf_r+0x110>
 800fd42:	eba0 0308 	sub.w	r3, r0, r8
 800fd46:	fa09 f303 	lsl.w	r3, r9, r3
 800fd4a:	4313      	orrs	r3, r2
 800fd4c:	9304      	str	r3, [sp, #16]
 800fd4e:	46a2      	mov	sl, r4
 800fd50:	e7d2      	b.n	800fcf8 <_svfiprintf_r+0x9c>
 800fd52:	9b03      	ldr	r3, [sp, #12]
 800fd54:	1d19      	adds	r1, r3, #4
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	9103      	str	r1, [sp, #12]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	bfbb      	ittet	lt
 800fd5e:	425b      	neglt	r3, r3
 800fd60:	f042 0202 	orrlt.w	r2, r2, #2
 800fd64:	9307      	strge	r3, [sp, #28]
 800fd66:	9307      	strlt	r3, [sp, #28]
 800fd68:	bfb8      	it	lt
 800fd6a:	9204      	strlt	r2, [sp, #16]
 800fd6c:	7823      	ldrb	r3, [r4, #0]
 800fd6e:	2b2e      	cmp	r3, #46	; 0x2e
 800fd70:	d10c      	bne.n	800fd8c <_svfiprintf_r+0x130>
 800fd72:	7863      	ldrb	r3, [r4, #1]
 800fd74:	2b2a      	cmp	r3, #42	; 0x2a
 800fd76:	d135      	bne.n	800fde4 <_svfiprintf_r+0x188>
 800fd78:	9b03      	ldr	r3, [sp, #12]
 800fd7a:	1d1a      	adds	r2, r3, #4
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	9203      	str	r2, [sp, #12]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	bfb8      	it	lt
 800fd84:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd88:	3402      	adds	r4, #2
 800fd8a:	9305      	str	r3, [sp, #20]
 800fd8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fe58 <_svfiprintf_r+0x1fc>
 800fd90:	7821      	ldrb	r1, [r4, #0]
 800fd92:	2203      	movs	r2, #3
 800fd94:	4650      	mov	r0, sl
 800fd96:	f7f0 faa3 	bl	80002e0 <memchr>
 800fd9a:	b140      	cbz	r0, 800fdae <_svfiprintf_r+0x152>
 800fd9c:	2340      	movs	r3, #64	; 0x40
 800fd9e:	eba0 000a 	sub.w	r0, r0, sl
 800fda2:	fa03 f000 	lsl.w	r0, r3, r0
 800fda6:	9b04      	ldr	r3, [sp, #16]
 800fda8:	4303      	orrs	r3, r0
 800fdaa:	3401      	adds	r4, #1
 800fdac:	9304      	str	r3, [sp, #16]
 800fdae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdb2:	4826      	ldr	r0, [pc, #152]	; (800fe4c <_svfiprintf_r+0x1f0>)
 800fdb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fdb8:	2206      	movs	r2, #6
 800fdba:	f7f0 fa91 	bl	80002e0 <memchr>
 800fdbe:	2800      	cmp	r0, #0
 800fdc0:	d038      	beq.n	800fe34 <_svfiprintf_r+0x1d8>
 800fdc2:	4b23      	ldr	r3, [pc, #140]	; (800fe50 <_svfiprintf_r+0x1f4>)
 800fdc4:	bb1b      	cbnz	r3, 800fe0e <_svfiprintf_r+0x1b2>
 800fdc6:	9b03      	ldr	r3, [sp, #12]
 800fdc8:	3307      	adds	r3, #7
 800fdca:	f023 0307 	bic.w	r3, r3, #7
 800fdce:	3308      	adds	r3, #8
 800fdd0:	9303      	str	r3, [sp, #12]
 800fdd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdd4:	4433      	add	r3, r6
 800fdd6:	9309      	str	r3, [sp, #36]	; 0x24
 800fdd8:	e767      	b.n	800fcaa <_svfiprintf_r+0x4e>
 800fdda:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdde:	460c      	mov	r4, r1
 800fde0:	2001      	movs	r0, #1
 800fde2:	e7a5      	b.n	800fd30 <_svfiprintf_r+0xd4>
 800fde4:	2300      	movs	r3, #0
 800fde6:	3401      	adds	r4, #1
 800fde8:	9305      	str	r3, [sp, #20]
 800fdea:	4619      	mov	r1, r3
 800fdec:	f04f 0c0a 	mov.w	ip, #10
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdf6:	3a30      	subs	r2, #48	; 0x30
 800fdf8:	2a09      	cmp	r2, #9
 800fdfa:	d903      	bls.n	800fe04 <_svfiprintf_r+0x1a8>
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d0c5      	beq.n	800fd8c <_svfiprintf_r+0x130>
 800fe00:	9105      	str	r1, [sp, #20]
 800fe02:	e7c3      	b.n	800fd8c <_svfiprintf_r+0x130>
 800fe04:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe08:	4604      	mov	r4, r0
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	e7f0      	b.n	800fdf0 <_svfiprintf_r+0x194>
 800fe0e:	ab03      	add	r3, sp, #12
 800fe10:	9300      	str	r3, [sp, #0]
 800fe12:	462a      	mov	r2, r5
 800fe14:	4b0f      	ldr	r3, [pc, #60]	; (800fe54 <_svfiprintf_r+0x1f8>)
 800fe16:	a904      	add	r1, sp, #16
 800fe18:	4638      	mov	r0, r7
 800fe1a:	f3af 8000 	nop.w
 800fe1e:	1c42      	adds	r2, r0, #1
 800fe20:	4606      	mov	r6, r0
 800fe22:	d1d6      	bne.n	800fdd2 <_svfiprintf_r+0x176>
 800fe24:	89ab      	ldrh	r3, [r5, #12]
 800fe26:	065b      	lsls	r3, r3, #25
 800fe28:	f53f af2c 	bmi.w	800fc84 <_svfiprintf_r+0x28>
 800fe2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe2e:	b01d      	add	sp, #116	; 0x74
 800fe30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe34:	ab03      	add	r3, sp, #12
 800fe36:	9300      	str	r3, [sp, #0]
 800fe38:	462a      	mov	r2, r5
 800fe3a:	4b06      	ldr	r3, [pc, #24]	; (800fe54 <_svfiprintf_r+0x1f8>)
 800fe3c:	a904      	add	r1, sp, #16
 800fe3e:	4638      	mov	r0, r7
 800fe40:	f000 f87a 	bl	800ff38 <_printf_i>
 800fe44:	e7eb      	b.n	800fe1e <_svfiprintf_r+0x1c2>
 800fe46:	bf00      	nop
 800fe48:	08016c48 	.word	0x08016c48
 800fe4c:	08016c52 	.word	0x08016c52
 800fe50:	00000000 	.word	0x00000000
 800fe54:	0800fba5 	.word	0x0800fba5
 800fe58:	08016c4e 	.word	0x08016c4e

0800fe5c <_printf_common>:
 800fe5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe60:	4616      	mov	r6, r2
 800fe62:	4699      	mov	r9, r3
 800fe64:	688a      	ldr	r2, [r1, #8]
 800fe66:	690b      	ldr	r3, [r1, #16]
 800fe68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	bfb8      	it	lt
 800fe70:	4613      	movlt	r3, r2
 800fe72:	6033      	str	r3, [r6, #0]
 800fe74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fe78:	4607      	mov	r7, r0
 800fe7a:	460c      	mov	r4, r1
 800fe7c:	b10a      	cbz	r2, 800fe82 <_printf_common+0x26>
 800fe7e:	3301      	adds	r3, #1
 800fe80:	6033      	str	r3, [r6, #0]
 800fe82:	6823      	ldr	r3, [r4, #0]
 800fe84:	0699      	lsls	r1, r3, #26
 800fe86:	bf42      	ittt	mi
 800fe88:	6833      	ldrmi	r3, [r6, #0]
 800fe8a:	3302      	addmi	r3, #2
 800fe8c:	6033      	strmi	r3, [r6, #0]
 800fe8e:	6825      	ldr	r5, [r4, #0]
 800fe90:	f015 0506 	ands.w	r5, r5, #6
 800fe94:	d106      	bne.n	800fea4 <_printf_common+0x48>
 800fe96:	f104 0a19 	add.w	sl, r4, #25
 800fe9a:	68e3      	ldr	r3, [r4, #12]
 800fe9c:	6832      	ldr	r2, [r6, #0]
 800fe9e:	1a9b      	subs	r3, r3, r2
 800fea0:	42ab      	cmp	r3, r5
 800fea2:	dc26      	bgt.n	800fef2 <_printf_common+0x96>
 800fea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fea8:	1e13      	subs	r3, r2, #0
 800feaa:	6822      	ldr	r2, [r4, #0]
 800feac:	bf18      	it	ne
 800feae:	2301      	movne	r3, #1
 800feb0:	0692      	lsls	r2, r2, #26
 800feb2:	d42b      	bmi.n	800ff0c <_printf_common+0xb0>
 800feb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800feb8:	4649      	mov	r1, r9
 800feba:	4638      	mov	r0, r7
 800febc:	47c0      	blx	r8
 800febe:	3001      	adds	r0, #1
 800fec0:	d01e      	beq.n	800ff00 <_printf_common+0xa4>
 800fec2:	6823      	ldr	r3, [r4, #0]
 800fec4:	68e5      	ldr	r5, [r4, #12]
 800fec6:	6832      	ldr	r2, [r6, #0]
 800fec8:	f003 0306 	and.w	r3, r3, #6
 800fecc:	2b04      	cmp	r3, #4
 800fece:	bf08      	it	eq
 800fed0:	1aad      	subeq	r5, r5, r2
 800fed2:	68a3      	ldr	r3, [r4, #8]
 800fed4:	6922      	ldr	r2, [r4, #16]
 800fed6:	bf0c      	ite	eq
 800fed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fedc:	2500      	movne	r5, #0
 800fede:	4293      	cmp	r3, r2
 800fee0:	bfc4      	itt	gt
 800fee2:	1a9b      	subgt	r3, r3, r2
 800fee4:	18ed      	addgt	r5, r5, r3
 800fee6:	2600      	movs	r6, #0
 800fee8:	341a      	adds	r4, #26
 800feea:	42b5      	cmp	r5, r6
 800feec:	d11a      	bne.n	800ff24 <_printf_common+0xc8>
 800feee:	2000      	movs	r0, #0
 800fef0:	e008      	b.n	800ff04 <_printf_common+0xa8>
 800fef2:	2301      	movs	r3, #1
 800fef4:	4652      	mov	r2, sl
 800fef6:	4649      	mov	r1, r9
 800fef8:	4638      	mov	r0, r7
 800fefa:	47c0      	blx	r8
 800fefc:	3001      	adds	r0, #1
 800fefe:	d103      	bne.n	800ff08 <_printf_common+0xac>
 800ff00:	f04f 30ff 	mov.w	r0, #4294967295
 800ff04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff08:	3501      	adds	r5, #1
 800ff0a:	e7c6      	b.n	800fe9a <_printf_common+0x3e>
 800ff0c:	18e1      	adds	r1, r4, r3
 800ff0e:	1c5a      	adds	r2, r3, #1
 800ff10:	2030      	movs	r0, #48	; 0x30
 800ff12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ff16:	4422      	add	r2, r4
 800ff18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ff1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ff20:	3302      	adds	r3, #2
 800ff22:	e7c7      	b.n	800feb4 <_printf_common+0x58>
 800ff24:	2301      	movs	r3, #1
 800ff26:	4622      	mov	r2, r4
 800ff28:	4649      	mov	r1, r9
 800ff2a:	4638      	mov	r0, r7
 800ff2c:	47c0      	blx	r8
 800ff2e:	3001      	adds	r0, #1
 800ff30:	d0e6      	beq.n	800ff00 <_printf_common+0xa4>
 800ff32:	3601      	adds	r6, #1
 800ff34:	e7d9      	b.n	800feea <_printf_common+0x8e>
	...

0800ff38 <_printf_i>:
 800ff38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff3c:	7e0f      	ldrb	r7, [r1, #24]
 800ff3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ff40:	2f78      	cmp	r7, #120	; 0x78
 800ff42:	4691      	mov	r9, r2
 800ff44:	4680      	mov	r8, r0
 800ff46:	460c      	mov	r4, r1
 800ff48:	469a      	mov	sl, r3
 800ff4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ff4e:	d807      	bhi.n	800ff60 <_printf_i+0x28>
 800ff50:	2f62      	cmp	r7, #98	; 0x62
 800ff52:	d80a      	bhi.n	800ff6a <_printf_i+0x32>
 800ff54:	2f00      	cmp	r7, #0
 800ff56:	f000 80d8 	beq.w	801010a <_printf_i+0x1d2>
 800ff5a:	2f58      	cmp	r7, #88	; 0x58
 800ff5c:	f000 80a3 	beq.w	80100a6 <_printf_i+0x16e>
 800ff60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ff68:	e03a      	b.n	800ffe0 <_printf_i+0xa8>
 800ff6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ff6e:	2b15      	cmp	r3, #21
 800ff70:	d8f6      	bhi.n	800ff60 <_printf_i+0x28>
 800ff72:	a101      	add	r1, pc, #4	; (adr r1, 800ff78 <_printf_i+0x40>)
 800ff74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ff78:	0800ffd1 	.word	0x0800ffd1
 800ff7c:	0800ffe5 	.word	0x0800ffe5
 800ff80:	0800ff61 	.word	0x0800ff61
 800ff84:	0800ff61 	.word	0x0800ff61
 800ff88:	0800ff61 	.word	0x0800ff61
 800ff8c:	0800ff61 	.word	0x0800ff61
 800ff90:	0800ffe5 	.word	0x0800ffe5
 800ff94:	0800ff61 	.word	0x0800ff61
 800ff98:	0800ff61 	.word	0x0800ff61
 800ff9c:	0800ff61 	.word	0x0800ff61
 800ffa0:	0800ff61 	.word	0x0800ff61
 800ffa4:	080100f1 	.word	0x080100f1
 800ffa8:	08010015 	.word	0x08010015
 800ffac:	080100d3 	.word	0x080100d3
 800ffb0:	0800ff61 	.word	0x0800ff61
 800ffb4:	0800ff61 	.word	0x0800ff61
 800ffb8:	08010113 	.word	0x08010113
 800ffbc:	0800ff61 	.word	0x0800ff61
 800ffc0:	08010015 	.word	0x08010015
 800ffc4:	0800ff61 	.word	0x0800ff61
 800ffc8:	0800ff61 	.word	0x0800ff61
 800ffcc:	080100db 	.word	0x080100db
 800ffd0:	682b      	ldr	r3, [r5, #0]
 800ffd2:	1d1a      	adds	r2, r3, #4
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	602a      	str	r2, [r5, #0]
 800ffd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ffdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	e0a3      	b.n	801012c <_printf_i+0x1f4>
 800ffe4:	6820      	ldr	r0, [r4, #0]
 800ffe6:	6829      	ldr	r1, [r5, #0]
 800ffe8:	0606      	lsls	r6, r0, #24
 800ffea:	f101 0304 	add.w	r3, r1, #4
 800ffee:	d50a      	bpl.n	8010006 <_printf_i+0xce>
 800fff0:	680e      	ldr	r6, [r1, #0]
 800fff2:	602b      	str	r3, [r5, #0]
 800fff4:	2e00      	cmp	r6, #0
 800fff6:	da03      	bge.n	8010000 <_printf_i+0xc8>
 800fff8:	232d      	movs	r3, #45	; 0x2d
 800fffa:	4276      	negs	r6, r6
 800fffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010000:	485e      	ldr	r0, [pc, #376]	; (801017c <_printf_i+0x244>)
 8010002:	230a      	movs	r3, #10
 8010004:	e019      	b.n	801003a <_printf_i+0x102>
 8010006:	680e      	ldr	r6, [r1, #0]
 8010008:	602b      	str	r3, [r5, #0]
 801000a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801000e:	bf18      	it	ne
 8010010:	b236      	sxthne	r6, r6
 8010012:	e7ef      	b.n	800fff4 <_printf_i+0xbc>
 8010014:	682b      	ldr	r3, [r5, #0]
 8010016:	6820      	ldr	r0, [r4, #0]
 8010018:	1d19      	adds	r1, r3, #4
 801001a:	6029      	str	r1, [r5, #0]
 801001c:	0601      	lsls	r1, r0, #24
 801001e:	d501      	bpl.n	8010024 <_printf_i+0xec>
 8010020:	681e      	ldr	r6, [r3, #0]
 8010022:	e002      	b.n	801002a <_printf_i+0xf2>
 8010024:	0646      	lsls	r6, r0, #25
 8010026:	d5fb      	bpl.n	8010020 <_printf_i+0xe8>
 8010028:	881e      	ldrh	r6, [r3, #0]
 801002a:	4854      	ldr	r0, [pc, #336]	; (801017c <_printf_i+0x244>)
 801002c:	2f6f      	cmp	r7, #111	; 0x6f
 801002e:	bf0c      	ite	eq
 8010030:	2308      	moveq	r3, #8
 8010032:	230a      	movne	r3, #10
 8010034:	2100      	movs	r1, #0
 8010036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801003a:	6865      	ldr	r5, [r4, #4]
 801003c:	60a5      	str	r5, [r4, #8]
 801003e:	2d00      	cmp	r5, #0
 8010040:	bfa2      	ittt	ge
 8010042:	6821      	ldrge	r1, [r4, #0]
 8010044:	f021 0104 	bicge.w	r1, r1, #4
 8010048:	6021      	strge	r1, [r4, #0]
 801004a:	b90e      	cbnz	r6, 8010050 <_printf_i+0x118>
 801004c:	2d00      	cmp	r5, #0
 801004e:	d04d      	beq.n	80100ec <_printf_i+0x1b4>
 8010050:	4615      	mov	r5, r2
 8010052:	fbb6 f1f3 	udiv	r1, r6, r3
 8010056:	fb03 6711 	mls	r7, r3, r1, r6
 801005a:	5dc7      	ldrb	r7, [r0, r7]
 801005c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010060:	4637      	mov	r7, r6
 8010062:	42bb      	cmp	r3, r7
 8010064:	460e      	mov	r6, r1
 8010066:	d9f4      	bls.n	8010052 <_printf_i+0x11a>
 8010068:	2b08      	cmp	r3, #8
 801006a:	d10b      	bne.n	8010084 <_printf_i+0x14c>
 801006c:	6823      	ldr	r3, [r4, #0]
 801006e:	07de      	lsls	r6, r3, #31
 8010070:	d508      	bpl.n	8010084 <_printf_i+0x14c>
 8010072:	6923      	ldr	r3, [r4, #16]
 8010074:	6861      	ldr	r1, [r4, #4]
 8010076:	4299      	cmp	r1, r3
 8010078:	bfde      	ittt	le
 801007a:	2330      	movle	r3, #48	; 0x30
 801007c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010080:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010084:	1b52      	subs	r2, r2, r5
 8010086:	6122      	str	r2, [r4, #16]
 8010088:	f8cd a000 	str.w	sl, [sp]
 801008c:	464b      	mov	r3, r9
 801008e:	aa03      	add	r2, sp, #12
 8010090:	4621      	mov	r1, r4
 8010092:	4640      	mov	r0, r8
 8010094:	f7ff fee2 	bl	800fe5c <_printf_common>
 8010098:	3001      	adds	r0, #1
 801009a:	d14c      	bne.n	8010136 <_printf_i+0x1fe>
 801009c:	f04f 30ff 	mov.w	r0, #4294967295
 80100a0:	b004      	add	sp, #16
 80100a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100a6:	4835      	ldr	r0, [pc, #212]	; (801017c <_printf_i+0x244>)
 80100a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80100ac:	6829      	ldr	r1, [r5, #0]
 80100ae:	6823      	ldr	r3, [r4, #0]
 80100b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80100b4:	6029      	str	r1, [r5, #0]
 80100b6:	061d      	lsls	r5, r3, #24
 80100b8:	d514      	bpl.n	80100e4 <_printf_i+0x1ac>
 80100ba:	07df      	lsls	r7, r3, #31
 80100bc:	bf44      	itt	mi
 80100be:	f043 0320 	orrmi.w	r3, r3, #32
 80100c2:	6023      	strmi	r3, [r4, #0]
 80100c4:	b91e      	cbnz	r6, 80100ce <_printf_i+0x196>
 80100c6:	6823      	ldr	r3, [r4, #0]
 80100c8:	f023 0320 	bic.w	r3, r3, #32
 80100cc:	6023      	str	r3, [r4, #0]
 80100ce:	2310      	movs	r3, #16
 80100d0:	e7b0      	b.n	8010034 <_printf_i+0xfc>
 80100d2:	6823      	ldr	r3, [r4, #0]
 80100d4:	f043 0320 	orr.w	r3, r3, #32
 80100d8:	6023      	str	r3, [r4, #0]
 80100da:	2378      	movs	r3, #120	; 0x78
 80100dc:	4828      	ldr	r0, [pc, #160]	; (8010180 <_printf_i+0x248>)
 80100de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80100e2:	e7e3      	b.n	80100ac <_printf_i+0x174>
 80100e4:	0659      	lsls	r1, r3, #25
 80100e6:	bf48      	it	mi
 80100e8:	b2b6      	uxthmi	r6, r6
 80100ea:	e7e6      	b.n	80100ba <_printf_i+0x182>
 80100ec:	4615      	mov	r5, r2
 80100ee:	e7bb      	b.n	8010068 <_printf_i+0x130>
 80100f0:	682b      	ldr	r3, [r5, #0]
 80100f2:	6826      	ldr	r6, [r4, #0]
 80100f4:	6961      	ldr	r1, [r4, #20]
 80100f6:	1d18      	adds	r0, r3, #4
 80100f8:	6028      	str	r0, [r5, #0]
 80100fa:	0635      	lsls	r5, r6, #24
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	d501      	bpl.n	8010104 <_printf_i+0x1cc>
 8010100:	6019      	str	r1, [r3, #0]
 8010102:	e002      	b.n	801010a <_printf_i+0x1d2>
 8010104:	0670      	lsls	r0, r6, #25
 8010106:	d5fb      	bpl.n	8010100 <_printf_i+0x1c8>
 8010108:	8019      	strh	r1, [r3, #0]
 801010a:	2300      	movs	r3, #0
 801010c:	6123      	str	r3, [r4, #16]
 801010e:	4615      	mov	r5, r2
 8010110:	e7ba      	b.n	8010088 <_printf_i+0x150>
 8010112:	682b      	ldr	r3, [r5, #0]
 8010114:	1d1a      	adds	r2, r3, #4
 8010116:	602a      	str	r2, [r5, #0]
 8010118:	681d      	ldr	r5, [r3, #0]
 801011a:	6862      	ldr	r2, [r4, #4]
 801011c:	2100      	movs	r1, #0
 801011e:	4628      	mov	r0, r5
 8010120:	f7f0 f8de 	bl	80002e0 <memchr>
 8010124:	b108      	cbz	r0, 801012a <_printf_i+0x1f2>
 8010126:	1b40      	subs	r0, r0, r5
 8010128:	6060      	str	r0, [r4, #4]
 801012a:	6863      	ldr	r3, [r4, #4]
 801012c:	6123      	str	r3, [r4, #16]
 801012e:	2300      	movs	r3, #0
 8010130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010134:	e7a8      	b.n	8010088 <_printf_i+0x150>
 8010136:	6923      	ldr	r3, [r4, #16]
 8010138:	462a      	mov	r2, r5
 801013a:	4649      	mov	r1, r9
 801013c:	4640      	mov	r0, r8
 801013e:	47d0      	blx	sl
 8010140:	3001      	adds	r0, #1
 8010142:	d0ab      	beq.n	801009c <_printf_i+0x164>
 8010144:	6823      	ldr	r3, [r4, #0]
 8010146:	079b      	lsls	r3, r3, #30
 8010148:	d413      	bmi.n	8010172 <_printf_i+0x23a>
 801014a:	68e0      	ldr	r0, [r4, #12]
 801014c:	9b03      	ldr	r3, [sp, #12]
 801014e:	4298      	cmp	r0, r3
 8010150:	bfb8      	it	lt
 8010152:	4618      	movlt	r0, r3
 8010154:	e7a4      	b.n	80100a0 <_printf_i+0x168>
 8010156:	2301      	movs	r3, #1
 8010158:	4632      	mov	r2, r6
 801015a:	4649      	mov	r1, r9
 801015c:	4640      	mov	r0, r8
 801015e:	47d0      	blx	sl
 8010160:	3001      	adds	r0, #1
 8010162:	d09b      	beq.n	801009c <_printf_i+0x164>
 8010164:	3501      	adds	r5, #1
 8010166:	68e3      	ldr	r3, [r4, #12]
 8010168:	9903      	ldr	r1, [sp, #12]
 801016a:	1a5b      	subs	r3, r3, r1
 801016c:	42ab      	cmp	r3, r5
 801016e:	dcf2      	bgt.n	8010156 <_printf_i+0x21e>
 8010170:	e7eb      	b.n	801014a <_printf_i+0x212>
 8010172:	2500      	movs	r5, #0
 8010174:	f104 0619 	add.w	r6, r4, #25
 8010178:	e7f5      	b.n	8010166 <_printf_i+0x22e>
 801017a:	bf00      	nop
 801017c:	08016c59 	.word	0x08016c59
 8010180:	08016c6a 	.word	0x08016c6a

08010184 <memmove>:
 8010184:	4288      	cmp	r0, r1
 8010186:	b510      	push	{r4, lr}
 8010188:	eb01 0402 	add.w	r4, r1, r2
 801018c:	d902      	bls.n	8010194 <memmove+0x10>
 801018e:	4284      	cmp	r4, r0
 8010190:	4623      	mov	r3, r4
 8010192:	d807      	bhi.n	80101a4 <memmove+0x20>
 8010194:	1e43      	subs	r3, r0, #1
 8010196:	42a1      	cmp	r1, r4
 8010198:	d008      	beq.n	80101ac <memmove+0x28>
 801019a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801019e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80101a2:	e7f8      	b.n	8010196 <memmove+0x12>
 80101a4:	4402      	add	r2, r0
 80101a6:	4601      	mov	r1, r0
 80101a8:	428a      	cmp	r2, r1
 80101aa:	d100      	bne.n	80101ae <memmove+0x2a>
 80101ac:	bd10      	pop	{r4, pc}
 80101ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80101b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80101b6:	e7f7      	b.n	80101a8 <memmove+0x24>

080101b8 <_free_r>:
 80101b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80101ba:	2900      	cmp	r1, #0
 80101bc:	d044      	beq.n	8010248 <_free_r+0x90>
 80101be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101c2:	9001      	str	r0, [sp, #4]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	f1a1 0404 	sub.w	r4, r1, #4
 80101ca:	bfb8      	it	lt
 80101cc:	18e4      	addlt	r4, r4, r3
 80101ce:	f000 f913 	bl	80103f8 <__malloc_lock>
 80101d2:	4a1e      	ldr	r2, [pc, #120]	; (801024c <_free_r+0x94>)
 80101d4:	9801      	ldr	r0, [sp, #4]
 80101d6:	6813      	ldr	r3, [r2, #0]
 80101d8:	b933      	cbnz	r3, 80101e8 <_free_r+0x30>
 80101da:	6063      	str	r3, [r4, #4]
 80101dc:	6014      	str	r4, [r2, #0]
 80101de:	b003      	add	sp, #12
 80101e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80101e4:	f000 b90e 	b.w	8010404 <__malloc_unlock>
 80101e8:	42a3      	cmp	r3, r4
 80101ea:	d908      	bls.n	80101fe <_free_r+0x46>
 80101ec:	6825      	ldr	r5, [r4, #0]
 80101ee:	1961      	adds	r1, r4, r5
 80101f0:	428b      	cmp	r3, r1
 80101f2:	bf01      	itttt	eq
 80101f4:	6819      	ldreq	r1, [r3, #0]
 80101f6:	685b      	ldreq	r3, [r3, #4]
 80101f8:	1949      	addeq	r1, r1, r5
 80101fa:	6021      	streq	r1, [r4, #0]
 80101fc:	e7ed      	b.n	80101da <_free_r+0x22>
 80101fe:	461a      	mov	r2, r3
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	b10b      	cbz	r3, 8010208 <_free_r+0x50>
 8010204:	42a3      	cmp	r3, r4
 8010206:	d9fa      	bls.n	80101fe <_free_r+0x46>
 8010208:	6811      	ldr	r1, [r2, #0]
 801020a:	1855      	adds	r5, r2, r1
 801020c:	42a5      	cmp	r5, r4
 801020e:	d10b      	bne.n	8010228 <_free_r+0x70>
 8010210:	6824      	ldr	r4, [r4, #0]
 8010212:	4421      	add	r1, r4
 8010214:	1854      	adds	r4, r2, r1
 8010216:	42a3      	cmp	r3, r4
 8010218:	6011      	str	r1, [r2, #0]
 801021a:	d1e0      	bne.n	80101de <_free_r+0x26>
 801021c:	681c      	ldr	r4, [r3, #0]
 801021e:	685b      	ldr	r3, [r3, #4]
 8010220:	6053      	str	r3, [r2, #4]
 8010222:	4421      	add	r1, r4
 8010224:	6011      	str	r1, [r2, #0]
 8010226:	e7da      	b.n	80101de <_free_r+0x26>
 8010228:	d902      	bls.n	8010230 <_free_r+0x78>
 801022a:	230c      	movs	r3, #12
 801022c:	6003      	str	r3, [r0, #0]
 801022e:	e7d6      	b.n	80101de <_free_r+0x26>
 8010230:	6825      	ldr	r5, [r4, #0]
 8010232:	1961      	adds	r1, r4, r5
 8010234:	428b      	cmp	r3, r1
 8010236:	bf04      	itt	eq
 8010238:	6819      	ldreq	r1, [r3, #0]
 801023a:	685b      	ldreq	r3, [r3, #4]
 801023c:	6063      	str	r3, [r4, #4]
 801023e:	bf04      	itt	eq
 8010240:	1949      	addeq	r1, r1, r5
 8010242:	6021      	streq	r1, [r4, #0]
 8010244:	6054      	str	r4, [r2, #4]
 8010246:	e7ca      	b.n	80101de <_free_r+0x26>
 8010248:	b003      	add	sp, #12
 801024a:	bd30      	pop	{r4, r5, pc}
 801024c:	24001bb4 	.word	0x24001bb4

08010250 <sbrk_aligned>:
 8010250:	b570      	push	{r4, r5, r6, lr}
 8010252:	4e0e      	ldr	r6, [pc, #56]	; (801028c <sbrk_aligned+0x3c>)
 8010254:	460c      	mov	r4, r1
 8010256:	6831      	ldr	r1, [r6, #0]
 8010258:	4605      	mov	r5, r0
 801025a:	b911      	cbnz	r1, 8010262 <sbrk_aligned+0x12>
 801025c:	f000 f8bc 	bl	80103d8 <_sbrk_r>
 8010260:	6030      	str	r0, [r6, #0]
 8010262:	4621      	mov	r1, r4
 8010264:	4628      	mov	r0, r5
 8010266:	f000 f8b7 	bl	80103d8 <_sbrk_r>
 801026a:	1c43      	adds	r3, r0, #1
 801026c:	d00a      	beq.n	8010284 <sbrk_aligned+0x34>
 801026e:	1cc4      	adds	r4, r0, #3
 8010270:	f024 0403 	bic.w	r4, r4, #3
 8010274:	42a0      	cmp	r0, r4
 8010276:	d007      	beq.n	8010288 <sbrk_aligned+0x38>
 8010278:	1a21      	subs	r1, r4, r0
 801027a:	4628      	mov	r0, r5
 801027c:	f000 f8ac 	bl	80103d8 <_sbrk_r>
 8010280:	3001      	adds	r0, #1
 8010282:	d101      	bne.n	8010288 <sbrk_aligned+0x38>
 8010284:	f04f 34ff 	mov.w	r4, #4294967295
 8010288:	4620      	mov	r0, r4
 801028a:	bd70      	pop	{r4, r5, r6, pc}
 801028c:	24001bb8 	.word	0x24001bb8

08010290 <_malloc_r>:
 8010290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010294:	1ccd      	adds	r5, r1, #3
 8010296:	f025 0503 	bic.w	r5, r5, #3
 801029a:	3508      	adds	r5, #8
 801029c:	2d0c      	cmp	r5, #12
 801029e:	bf38      	it	cc
 80102a0:	250c      	movcc	r5, #12
 80102a2:	2d00      	cmp	r5, #0
 80102a4:	4607      	mov	r7, r0
 80102a6:	db01      	blt.n	80102ac <_malloc_r+0x1c>
 80102a8:	42a9      	cmp	r1, r5
 80102aa:	d905      	bls.n	80102b8 <_malloc_r+0x28>
 80102ac:	230c      	movs	r3, #12
 80102ae:	603b      	str	r3, [r7, #0]
 80102b0:	2600      	movs	r6, #0
 80102b2:	4630      	mov	r0, r6
 80102b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102b8:	4e2e      	ldr	r6, [pc, #184]	; (8010374 <_malloc_r+0xe4>)
 80102ba:	f000 f89d 	bl	80103f8 <__malloc_lock>
 80102be:	6833      	ldr	r3, [r6, #0]
 80102c0:	461c      	mov	r4, r3
 80102c2:	bb34      	cbnz	r4, 8010312 <_malloc_r+0x82>
 80102c4:	4629      	mov	r1, r5
 80102c6:	4638      	mov	r0, r7
 80102c8:	f7ff ffc2 	bl	8010250 <sbrk_aligned>
 80102cc:	1c43      	adds	r3, r0, #1
 80102ce:	4604      	mov	r4, r0
 80102d0:	d14d      	bne.n	801036e <_malloc_r+0xde>
 80102d2:	6834      	ldr	r4, [r6, #0]
 80102d4:	4626      	mov	r6, r4
 80102d6:	2e00      	cmp	r6, #0
 80102d8:	d140      	bne.n	801035c <_malloc_r+0xcc>
 80102da:	6823      	ldr	r3, [r4, #0]
 80102dc:	4631      	mov	r1, r6
 80102de:	4638      	mov	r0, r7
 80102e0:	eb04 0803 	add.w	r8, r4, r3
 80102e4:	f000 f878 	bl	80103d8 <_sbrk_r>
 80102e8:	4580      	cmp	r8, r0
 80102ea:	d13a      	bne.n	8010362 <_malloc_r+0xd2>
 80102ec:	6821      	ldr	r1, [r4, #0]
 80102ee:	3503      	adds	r5, #3
 80102f0:	1a6d      	subs	r5, r5, r1
 80102f2:	f025 0503 	bic.w	r5, r5, #3
 80102f6:	3508      	adds	r5, #8
 80102f8:	2d0c      	cmp	r5, #12
 80102fa:	bf38      	it	cc
 80102fc:	250c      	movcc	r5, #12
 80102fe:	4629      	mov	r1, r5
 8010300:	4638      	mov	r0, r7
 8010302:	f7ff ffa5 	bl	8010250 <sbrk_aligned>
 8010306:	3001      	adds	r0, #1
 8010308:	d02b      	beq.n	8010362 <_malloc_r+0xd2>
 801030a:	6823      	ldr	r3, [r4, #0]
 801030c:	442b      	add	r3, r5
 801030e:	6023      	str	r3, [r4, #0]
 8010310:	e00e      	b.n	8010330 <_malloc_r+0xa0>
 8010312:	6822      	ldr	r2, [r4, #0]
 8010314:	1b52      	subs	r2, r2, r5
 8010316:	d41e      	bmi.n	8010356 <_malloc_r+0xc6>
 8010318:	2a0b      	cmp	r2, #11
 801031a:	d916      	bls.n	801034a <_malloc_r+0xba>
 801031c:	1961      	adds	r1, r4, r5
 801031e:	42a3      	cmp	r3, r4
 8010320:	6025      	str	r5, [r4, #0]
 8010322:	bf18      	it	ne
 8010324:	6059      	strne	r1, [r3, #4]
 8010326:	6863      	ldr	r3, [r4, #4]
 8010328:	bf08      	it	eq
 801032a:	6031      	streq	r1, [r6, #0]
 801032c:	5162      	str	r2, [r4, r5]
 801032e:	604b      	str	r3, [r1, #4]
 8010330:	4638      	mov	r0, r7
 8010332:	f104 060b 	add.w	r6, r4, #11
 8010336:	f000 f865 	bl	8010404 <__malloc_unlock>
 801033a:	f026 0607 	bic.w	r6, r6, #7
 801033e:	1d23      	adds	r3, r4, #4
 8010340:	1af2      	subs	r2, r6, r3
 8010342:	d0b6      	beq.n	80102b2 <_malloc_r+0x22>
 8010344:	1b9b      	subs	r3, r3, r6
 8010346:	50a3      	str	r3, [r4, r2]
 8010348:	e7b3      	b.n	80102b2 <_malloc_r+0x22>
 801034a:	6862      	ldr	r2, [r4, #4]
 801034c:	42a3      	cmp	r3, r4
 801034e:	bf0c      	ite	eq
 8010350:	6032      	streq	r2, [r6, #0]
 8010352:	605a      	strne	r2, [r3, #4]
 8010354:	e7ec      	b.n	8010330 <_malloc_r+0xa0>
 8010356:	4623      	mov	r3, r4
 8010358:	6864      	ldr	r4, [r4, #4]
 801035a:	e7b2      	b.n	80102c2 <_malloc_r+0x32>
 801035c:	4634      	mov	r4, r6
 801035e:	6876      	ldr	r6, [r6, #4]
 8010360:	e7b9      	b.n	80102d6 <_malloc_r+0x46>
 8010362:	230c      	movs	r3, #12
 8010364:	603b      	str	r3, [r7, #0]
 8010366:	4638      	mov	r0, r7
 8010368:	f000 f84c 	bl	8010404 <__malloc_unlock>
 801036c:	e7a1      	b.n	80102b2 <_malloc_r+0x22>
 801036e:	6025      	str	r5, [r4, #0]
 8010370:	e7de      	b.n	8010330 <_malloc_r+0xa0>
 8010372:	bf00      	nop
 8010374:	24001bb4 	.word	0x24001bb4

08010378 <_realloc_r>:
 8010378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801037c:	4680      	mov	r8, r0
 801037e:	4614      	mov	r4, r2
 8010380:	460e      	mov	r6, r1
 8010382:	b921      	cbnz	r1, 801038e <_realloc_r+0x16>
 8010384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010388:	4611      	mov	r1, r2
 801038a:	f7ff bf81 	b.w	8010290 <_malloc_r>
 801038e:	b92a      	cbnz	r2, 801039c <_realloc_r+0x24>
 8010390:	f7ff ff12 	bl	80101b8 <_free_r>
 8010394:	4625      	mov	r5, r4
 8010396:	4628      	mov	r0, r5
 8010398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801039c:	f000 f838 	bl	8010410 <_malloc_usable_size_r>
 80103a0:	4284      	cmp	r4, r0
 80103a2:	4607      	mov	r7, r0
 80103a4:	d802      	bhi.n	80103ac <_realloc_r+0x34>
 80103a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80103aa:	d812      	bhi.n	80103d2 <_realloc_r+0x5a>
 80103ac:	4621      	mov	r1, r4
 80103ae:	4640      	mov	r0, r8
 80103b0:	f7ff ff6e 	bl	8010290 <_malloc_r>
 80103b4:	4605      	mov	r5, r0
 80103b6:	2800      	cmp	r0, #0
 80103b8:	d0ed      	beq.n	8010396 <_realloc_r+0x1e>
 80103ba:	42bc      	cmp	r4, r7
 80103bc:	4622      	mov	r2, r4
 80103be:	4631      	mov	r1, r6
 80103c0:	bf28      	it	cs
 80103c2:	463a      	movcs	r2, r7
 80103c4:	f7ff fbb8 	bl	800fb38 <memcpy>
 80103c8:	4631      	mov	r1, r6
 80103ca:	4640      	mov	r0, r8
 80103cc:	f7ff fef4 	bl	80101b8 <_free_r>
 80103d0:	e7e1      	b.n	8010396 <_realloc_r+0x1e>
 80103d2:	4635      	mov	r5, r6
 80103d4:	e7df      	b.n	8010396 <_realloc_r+0x1e>
	...

080103d8 <_sbrk_r>:
 80103d8:	b538      	push	{r3, r4, r5, lr}
 80103da:	4d06      	ldr	r5, [pc, #24]	; (80103f4 <_sbrk_r+0x1c>)
 80103dc:	2300      	movs	r3, #0
 80103de:	4604      	mov	r4, r0
 80103e0:	4608      	mov	r0, r1
 80103e2:	602b      	str	r3, [r5, #0]
 80103e4:	f7f1 fa3e 	bl	8001864 <_sbrk>
 80103e8:	1c43      	adds	r3, r0, #1
 80103ea:	d102      	bne.n	80103f2 <_sbrk_r+0x1a>
 80103ec:	682b      	ldr	r3, [r5, #0]
 80103ee:	b103      	cbz	r3, 80103f2 <_sbrk_r+0x1a>
 80103f0:	6023      	str	r3, [r4, #0]
 80103f2:	bd38      	pop	{r3, r4, r5, pc}
 80103f4:	24001bbc 	.word	0x24001bbc

080103f8 <__malloc_lock>:
 80103f8:	4801      	ldr	r0, [pc, #4]	; (8010400 <__malloc_lock+0x8>)
 80103fa:	f000 b811 	b.w	8010420 <__retarget_lock_acquire_recursive>
 80103fe:	bf00      	nop
 8010400:	24001bc0 	.word	0x24001bc0

08010404 <__malloc_unlock>:
 8010404:	4801      	ldr	r0, [pc, #4]	; (801040c <__malloc_unlock+0x8>)
 8010406:	f000 b80c 	b.w	8010422 <__retarget_lock_release_recursive>
 801040a:	bf00      	nop
 801040c:	24001bc0 	.word	0x24001bc0

08010410 <_malloc_usable_size_r>:
 8010410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010414:	1f18      	subs	r0, r3, #4
 8010416:	2b00      	cmp	r3, #0
 8010418:	bfbc      	itt	lt
 801041a:	580b      	ldrlt	r3, [r1, r0]
 801041c:	18c0      	addlt	r0, r0, r3
 801041e:	4770      	bx	lr

08010420 <__retarget_lock_acquire_recursive>:
 8010420:	4770      	bx	lr

08010422 <__retarget_lock_release_recursive>:
 8010422:	4770      	bx	lr

08010424 <_init>:
 8010424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010426:	bf00      	nop
 8010428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801042a:	bc08      	pop	{r3}
 801042c:	469e      	mov	lr, r3
 801042e:	4770      	bx	lr

08010430 <_fini>:
 8010430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010432:	bf00      	nop
 8010434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010436:	bc08      	pop	{r3}
 8010438:	469e      	mov	lr, r3
 801043a:	4770      	bx	lr
